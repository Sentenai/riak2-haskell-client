{- This file was auto-generated from riak.proto by the proto-lens-protoc program. -}
{-# LANGUAGE ScopedTypeVariables, DataKinds, TypeFamilies, UndecidableInstances, GeneralizedNewtypeDeriving, MultiParamTypeClasses, FlexibleContexts, FlexibleInstances, PatternSynonyms, MagicHash, NoImplicitPrelude, DataKinds, BangPatterns, TypeApplications, OverloadedStrings, DerivingStrategies#-}
{-# OPTIONS_GHC -Wno-unused-imports#-}
{-# OPTIONS_GHC -Wno-duplicate-exports#-}
{-# OPTIONS_GHC -Wno-dodgy-exports#-}
module Proto.Riak (
        CounterOp(), DtFetchReq(), DtFetchResp(), DtFetchResp'DataType(..),
        DtFetchResp'DataType(), DtOp(), DtUpdateReq(), DtUpdateResp(),
        DtValue(), GSetOp(), HllOp(), MapEntry(), MapField(),
        MapField'MapFieldType(..), MapField'MapFieldType(), MapOp(),
        MapUpdate(), MapUpdate'FlagOp(..), MapUpdate'FlagOp(),
        RpbAuthReq(), RpbAuthResp(), RpbBucketKeyPreflistItem(),
        RpbBucketProps(), RpbBucketProps'RpbReplMode(..),
        RpbBucketProps'RpbReplMode(), RpbCSBucketReq(), RpbCSBucketResp(),
        RpbCommitHook(), RpbContent(), RpbCounterGetReq(),
        RpbCounterGetResp(), RpbCounterUpdateReq(), RpbCounterUpdateResp(),
        RpbCoverageEntry(), RpbCoverageReq(), RpbCoverageResp(),
        RpbDelReq(), RpbDelResp(), RpbErrorResp(),
        RpbGetBucketKeyPreflistReq(), RpbGetBucketKeyPreflistResp(),
        RpbGetBucketReq(), RpbGetBucketResp(), RpbGetBucketTypeReq(),
        RpbGetClientIdReq(), RpbGetClientIdResp(), RpbGetReq(),
        RpbGetResp(), RpbGetServerInfoReq(), RpbGetServerInfoResp(),
        RpbIndexBodyResp(), RpbIndexObject(), RpbIndexReq(),
        RpbIndexReq'IndexQueryType(..), RpbIndexReq'IndexQueryType(),
        RpbIndexResp(), RpbLink(), RpbListBucketsReq(),
        RpbListBucketsResp(), RpbListKeysReq(), RpbListKeysResp(),
        RpbMapRedReq(), RpbMapRedResp(), RpbModFun(), RpbPair(),
        RpbPingReq(), RpbPingResp(), RpbPutReq(), RpbPutResp(),
        RpbResetBucketReq(), RpbResetBucketResp(), RpbSearchDoc(),
        RpbSearchQueryReq(), RpbSearchQueryResp(), RpbSetBucketReq(),
        RpbSetBucketResp(), RpbSetBucketTypeReq(), RpbSetClientIdReq(),
        RpbYokozunaIndex(), RpbYokozunaIndexDeleteReq(),
        RpbYokozunaIndexGetReq(), RpbYokozunaIndexGetResp(),
        RpbYokozunaIndexPutReq(), RpbYokozunaSchema(),
        RpbYokozunaSchemaGetReq(), RpbYokozunaSchemaGetResp(),
        RpbYokozunaSchemaPutReq(), SetOp(), TsCell(),
        TsColumnDescription(), TsColumnType(..), TsColumnType(),
        TsCoverageEntry(), TsCoverageReq(), TsCoverageResp(), TsDelReq(),
        TsDelResp(), TsGetReq(), TsGetResp(), TsInterpolation(),
        TsListKeysReq(), TsListKeysResp(), TsPutReq(), TsPutResp(),
        TsQueryReq(), TsQueryResp(), TsRange(), TsRow()
    ) where
import qualified Data.ProtoLens.Runtime.Control.DeepSeq as Control.DeepSeq
import qualified Data.ProtoLens.Runtime.Data.ProtoLens.Prism as Data.ProtoLens.Prism
import qualified Data.ProtoLens.Runtime.Prelude as Prelude
import qualified Data.ProtoLens.Runtime.Data.Int as Data.Int
import qualified Data.ProtoLens.Runtime.Data.Monoid as Data.Monoid
import qualified Data.ProtoLens.Runtime.Data.Word as Data.Word
import qualified Data.ProtoLens.Runtime.Data.ProtoLens as Data.ProtoLens
import qualified Data.ProtoLens.Runtime.Data.ProtoLens.Encoding.Bytes as Data.ProtoLens.Encoding.Bytes
import qualified Data.ProtoLens.Runtime.Data.ProtoLens.Encoding.Growing as Data.ProtoLens.Encoding.Growing
import qualified Data.ProtoLens.Runtime.Data.ProtoLens.Encoding.Parser.Unsafe as Data.ProtoLens.Encoding.Parser.Unsafe
import qualified Data.ProtoLens.Runtime.Data.ProtoLens.Encoding.Wire as Data.ProtoLens.Encoding.Wire
import qualified Data.ProtoLens.Runtime.Data.ProtoLens.Field as Data.ProtoLens.Field
import qualified Data.ProtoLens.Runtime.Data.ProtoLens.Message.Enum as Data.ProtoLens.Message.Enum
import qualified Data.ProtoLens.Runtime.Data.ProtoLens.Service.Types as Data.ProtoLens.Service.Types
import qualified Data.ProtoLens.Runtime.Lens.Family2 as Lens.Family2
import qualified Data.ProtoLens.Runtime.Lens.Family2.Unchecked as Lens.Family2.Unchecked
import qualified Data.ProtoLens.Runtime.Data.Text as Data.Text
import qualified Data.ProtoLens.Runtime.Data.Map as Data.Map
import qualified Data.ProtoLens.Runtime.Data.ByteString as Data.ByteString
import qualified Data.ProtoLens.Runtime.Data.ByteString.Char8 as Data.ByteString.Char8
import qualified Data.ProtoLens.Runtime.Data.Text.Encoding as Data.Text.Encoding
import qualified Data.ProtoLens.Runtime.Data.Vector as Data.Vector
import qualified Data.ProtoLens.Runtime.Data.Vector.Generic as Data.Vector.Generic
import qualified Data.ProtoLens.Runtime.Data.Vector.Unboxed as Data.Vector.Unboxed
import qualified Data.ProtoLens.Runtime.Text.Read as Text.Read
{- | Fields :
     
         * 'Proto.Riak_Fields.increment' @:: Lens' CounterOp Data.Int.Int64@
         * 'Proto.Riak_Fields.maybe'increment' @:: Lens' CounterOp (Prelude.Maybe Data.Int.Int64)@ -}
data CounterOp
  = CounterOp'_constructor {_CounterOp'increment :: !(Prelude.Maybe Data.Int.Int64),
                            _CounterOp'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show CounterOp where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField CounterOp "increment" Data.Int.Int64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CounterOp'increment
           (\ x__ y__ -> x__ {_CounterOp'increment = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField CounterOp "maybe'increment" (Prelude.Maybe Data.Int.Int64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _CounterOp'increment
           (\ x__ y__ -> x__ {_CounterOp'increment = y__}))
        Prelude.id
instance Data.ProtoLens.Message CounterOp where
  messageName _ = Data.Text.pack "CounterOp"
  packedMessageDescriptor _
    = "\n\
      \\tCounterOp\DC2\FS\n\
      \\tincrement\CAN\SOH \SOH(\DC2R\tincrement"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        increment__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "increment"
              (Data.ProtoLens.ScalarField Data.ProtoLens.SInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'increment")) ::
              Data.ProtoLens.FieldDescriptor CounterOp
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, increment__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _CounterOp'_unknownFields
        (\ x__ y__ -> x__ {_CounterOp'_unknownFields = y__})
  defMessage
    = CounterOp'_constructor
        {_CounterOp'increment = Prelude.Nothing,
         _CounterOp'_unknownFields = []}
  parseMessage
    = let
        loop :: CounterOp -> Data.ProtoLens.Encoding.Bytes.Parser CounterOp
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Data.ProtoLens.Encoding.Bytes.wordToSignedInt64
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "increment"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"increment") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "CounterOp"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view
                    (Data.ProtoLens.Field.field @"maybe'increment") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       ((Prelude..)
                          ((Prelude..)
                             Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                          Data.ProtoLens.Encoding.Bytes.signedInt64ToWord
                          _v))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData CounterOp where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_CounterOp'_unknownFields x__)
             (Control.DeepSeq.deepseq (_CounterOp'increment x__) ())
{- | Fields :
     
         * 'Proto.Riak_Fields.bucket' @:: Lens' DtFetchReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.key' @:: Lens' DtFetchReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.type'' @:: Lens' DtFetchReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.r' @:: Lens' DtFetchReq Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'r' @:: Lens' DtFetchReq (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.pr' @:: Lens' DtFetchReq Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'pr' @:: Lens' DtFetchReq (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.basicQuorum' @:: Lens' DtFetchReq Prelude.Bool@
         * 'Proto.Riak_Fields.maybe'basicQuorum' @:: Lens' DtFetchReq (Prelude.Maybe Prelude.Bool)@
         * 'Proto.Riak_Fields.notfoundOk' @:: Lens' DtFetchReq Prelude.Bool@
         * 'Proto.Riak_Fields.maybe'notfoundOk' @:: Lens' DtFetchReq (Prelude.Maybe Prelude.Bool)@
         * 'Proto.Riak_Fields.timeout' @:: Lens' DtFetchReq Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'timeout' @:: Lens' DtFetchReq (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.sloppyQuorum' @:: Lens' DtFetchReq Prelude.Bool@
         * 'Proto.Riak_Fields.maybe'sloppyQuorum' @:: Lens' DtFetchReq (Prelude.Maybe Prelude.Bool)@
         * 'Proto.Riak_Fields.nVal' @:: Lens' DtFetchReq Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'nVal' @:: Lens' DtFetchReq (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.includeContext' @:: Lens' DtFetchReq Prelude.Bool@
         * 'Proto.Riak_Fields.maybe'includeContext' @:: Lens' DtFetchReq (Prelude.Maybe Prelude.Bool)@ -}
data DtFetchReq
  = DtFetchReq'_constructor {_DtFetchReq'bucket :: !Data.ByteString.ByteString,
                             _DtFetchReq'key :: !Data.ByteString.ByteString,
                             _DtFetchReq'type' :: !Data.ByteString.ByteString,
                             _DtFetchReq'r :: !(Prelude.Maybe Data.Word.Word32),
                             _DtFetchReq'pr :: !(Prelude.Maybe Data.Word.Word32),
                             _DtFetchReq'basicQuorum :: !(Prelude.Maybe Prelude.Bool),
                             _DtFetchReq'notfoundOk :: !(Prelude.Maybe Prelude.Bool),
                             _DtFetchReq'timeout :: !(Prelude.Maybe Data.Word.Word32),
                             _DtFetchReq'sloppyQuorum :: !(Prelude.Maybe Prelude.Bool),
                             _DtFetchReq'nVal :: !(Prelude.Maybe Data.Word.Word32),
                             _DtFetchReq'includeContext :: !(Prelude.Maybe Prelude.Bool),
                             _DtFetchReq'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show DtFetchReq where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField DtFetchReq "bucket" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtFetchReq'bucket (\ x__ y__ -> x__ {_DtFetchReq'bucket = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField DtFetchReq "key" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtFetchReq'key (\ x__ y__ -> x__ {_DtFetchReq'key = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField DtFetchReq "type'" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtFetchReq'type' (\ x__ y__ -> x__ {_DtFetchReq'type' = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField DtFetchReq "r" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtFetchReq'r (\ x__ y__ -> x__ {_DtFetchReq'r = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField DtFetchReq "maybe'r" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtFetchReq'r (\ x__ y__ -> x__ {_DtFetchReq'r = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField DtFetchReq "pr" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtFetchReq'pr (\ x__ y__ -> x__ {_DtFetchReq'pr = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField DtFetchReq "maybe'pr" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtFetchReq'pr (\ x__ y__ -> x__ {_DtFetchReq'pr = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField DtFetchReq "basicQuorum" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtFetchReq'basicQuorum
           (\ x__ y__ -> x__ {_DtFetchReq'basicQuorum = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField DtFetchReq "maybe'basicQuorum" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtFetchReq'basicQuorum
           (\ x__ y__ -> x__ {_DtFetchReq'basicQuorum = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField DtFetchReq "notfoundOk" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtFetchReq'notfoundOk
           (\ x__ y__ -> x__ {_DtFetchReq'notfoundOk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField DtFetchReq "maybe'notfoundOk" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtFetchReq'notfoundOk
           (\ x__ y__ -> x__ {_DtFetchReq'notfoundOk = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField DtFetchReq "timeout" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtFetchReq'timeout (\ x__ y__ -> x__ {_DtFetchReq'timeout = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField DtFetchReq "maybe'timeout" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtFetchReq'timeout (\ x__ y__ -> x__ {_DtFetchReq'timeout = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField DtFetchReq "sloppyQuorum" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtFetchReq'sloppyQuorum
           (\ x__ y__ -> x__ {_DtFetchReq'sloppyQuorum = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField DtFetchReq "maybe'sloppyQuorum" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtFetchReq'sloppyQuorum
           (\ x__ y__ -> x__ {_DtFetchReq'sloppyQuorum = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField DtFetchReq "nVal" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtFetchReq'nVal (\ x__ y__ -> x__ {_DtFetchReq'nVal = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField DtFetchReq "maybe'nVal" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtFetchReq'nVal (\ x__ y__ -> x__ {_DtFetchReq'nVal = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField DtFetchReq "includeContext" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtFetchReq'includeContext
           (\ x__ y__ -> x__ {_DtFetchReq'includeContext = y__}))
        (Data.ProtoLens.maybeLens Prelude.True)
instance Data.ProtoLens.Field.HasField DtFetchReq "maybe'includeContext" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtFetchReq'includeContext
           (\ x__ y__ -> x__ {_DtFetchReq'includeContext = y__}))
        Prelude.id
instance Data.ProtoLens.Message DtFetchReq where
  messageName _ = Data.Text.pack "DtFetchReq"
  packedMessageDescriptor _
    = "\n\
      \\n\
      \DtFetchReq\DC2\SYN\n\
      \\ACKbucket\CAN\SOH \STX(\fR\ACKbucket\DC2\DLE\n\
      \\ETXkey\CAN\STX \STX(\fR\ETXkey\DC2\DC2\n\
      \\EOTtype\CAN\ETX \STX(\fR\EOTtype\DC2\f\n\
      \\SOHr\CAN\EOT \SOH(\rR\SOHr\DC2\SO\n\
      \\STXpr\CAN\ENQ \SOH(\rR\STXpr\DC2!\n\
      \\fbasic_quorum\CAN\ACK \SOH(\bR\vbasicQuorum\DC2\US\n\
      \\vnotfound_ok\CAN\a \SOH(\bR\n\
      \notfoundOk\DC2\CAN\n\
      \\atimeout\CAN\b \SOH(\rR\atimeout\DC2#\n\
      \\rsloppy_quorum\CAN\t \SOH(\bR\fsloppyQuorum\DC2\DC3\n\
      \\ENQn_val\CAN\n\
      \ \SOH(\rR\EOTnVal\DC2-\n\
      \\SIinclude_context\CAN\v \SOH(\b:\EOTtrueR\SOincludeContext"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        bucket__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "bucket"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"bucket")) ::
              Data.ProtoLens.FieldDescriptor DtFetchReq
        key__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "key"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"key")) ::
              Data.ProtoLens.FieldDescriptor DtFetchReq
        type'__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "type"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"type'")) ::
              Data.ProtoLens.FieldDescriptor DtFetchReq
        r__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "r"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'r")) ::
              Data.ProtoLens.FieldDescriptor DtFetchReq
        pr__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pr"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'pr")) ::
              Data.ProtoLens.FieldDescriptor DtFetchReq
        basicQuorum__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "basic_quorum"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'basicQuorum")) ::
              Data.ProtoLens.FieldDescriptor DtFetchReq
        notfoundOk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "notfound_ok"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'notfoundOk")) ::
              Data.ProtoLens.FieldDescriptor DtFetchReq
        timeout__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "timeout"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'timeout")) ::
              Data.ProtoLens.FieldDescriptor DtFetchReq
        sloppyQuorum__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "sloppy_quorum"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'sloppyQuorum")) ::
              Data.ProtoLens.FieldDescriptor DtFetchReq
        nVal__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "n_val"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'nVal")) ::
              Data.ProtoLens.FieldDescriptor DtFetchReq
        includeContext__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "include_context"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'includeContext")) ::
              Data.ProtoLens.FieldDescriptor DtFetchReq
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, bucket__field_descriptor),
           (Data.ProtoLens.Tag 2, key__field_descriptor),
           (Data.ProtoLens.Tag 3, type'__field_descriptor),
           (Data.ProtoLens.Tag 4, r__field_descriptor),
           (Data.ProtoLens.Tag 5, pr__field_descriptor),
           (Data.ProtoLens.Tag 6, basicQuorum__field_descriptor),
           (Data.ProtoLens.Tag 7, notfoundOk__field_descriptor),
           (Data.ProtoLens.Tag 8, timeout__field_descriptor),
           (Data.ProtoLens.Tag 9, sloppyQuorum__field_descriptor),
           (Data.ProtoLens.Tag 10, nVal__field_descriptor),
           (Data.ProtoLens.Tag 11, includeContext__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _DtFetchReq'_unknownFields
        (\ x__ y__ -> x__ {_DtFetchReq'_unknownFields = y__})
  defMessage
    = DtFetchReq'_constructor
        {_DtFetchReq'bucket = Data.ProtoLens.fieldDefault,
         _DtFetchReq'key = Data.ProtoLens.fieldDefault,
         _DtFetchReq'type' = Data.ProtoLens.fieldDefault,
         _DtFetchReq'r = Prelude.Nothing, _DtFetchReq'pr = Prelude.Nothing,
         _DtFetchReq'basicQuorum = Prelude.Nothing,
         _DtFetchReq'notfoundOk = Prelude.Nothing,
         _DtFetchReq'timeout = Prelude.Nothing,
         _DtFetchReq'sloppyQuorum = Prelude.Nothing,
         _DtFetchReq'nVal = Prelude.Nothing,
         _DtFetchReq'includeContext = Prelude.Nothing,
         _DtFetchReq'_unknownFields = []}
  parseMessage
    = let
        loop ::
          DtFetchReq
          -> Prelude.Bool
             -> Prelude.Bool
                -> Prelude.Bool -> Data.ProtoLens.Encoding.Bytes.Parser DtFetchReq
        loop x required'bucket required'key required'type'
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'bucket then (:) "bucket" else Prelude.id)
                               ((if required'key then (:) "key" else Prelude.id)
                                  ((if required'type' then (:) "type" else Prelude.id) []))
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "bucket"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"bucket") y x)
                                  Prelude.False
                                  required'key
                                  required'type'
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "key"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"key") y x)
                                  required'bucket
                                  Prelude.False
                                  required'type'
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "type"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"type'") y x)
                                  required'bucket
                                  required'key
                                  Prelude.False
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "r"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"r") y x)
                                  required'bucket
                                  required'key
                                  required'type'
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "pr"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"pr") y x)
                                  required'bucket
                                  required'key
                                  required'type'
                        48
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "basic_quorum"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"basicQuorum") y x)
                                  required'bucket
                                  required'key
                                  required'type'
                        56
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "notfound_ok"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"notfoundOk") y x)
                                  required'bucket
                                  required'key
                                  required'type'
                        64
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "timeout"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"timeout") y x)
                                  required'bucket
                                  required'key
                                  required'type'
                        72
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "sloppy_quorum"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"sloppyQuorum") y x)
                                  required'bucket
                                  required'key
                                  required'type'
                        80
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "n_val"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"nVal") y x)
                                  required'bucket
                                  required'key
                                  required'type'
                        88
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "include_context"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"includeContext") y x)
                                  required'bucket
                                  required'key
                                  required'type'
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'bucket
                                  required'key
                                  required'type'
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop
                Data.ProtoLens.defMessage Prelude.True Prelude.True Prelude.True)
          "DtFetchReq"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((\ bs
                    -> (Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"bucket") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                   ((\ bs
                       -> (Data.Monoid.<>)
                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                               (Prelude.fromIntegral (Data.ByteString.length bs)))
                            (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"key") _x)))
                ((Data.Monoid.<>)
                   ((Data.Monoid.<>)
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                      ((\ bs
                          -> (Data.Monoid.<>)
                               (Data.ProtoLens.Encoding.Bytes.putVarInt
                                  (Prelude.fromIntegral (Data.ByteString.length bs)))
                               (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                         (Lens.Family2.view (Data.ProtoLens.Field.field @"type'") _x)))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'r") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'pr") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt
                                      Prelude.fromIntegral
                                      _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view
                                   (Data.ProtoLens.Field.field @"maybe'basicQuorum") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 48)
                                      ((Prelude..)
                                         Data.ProtoLens.Encoding.Bytes.putVarInt
                                         (\ b -> if b then 1 else 0)
                                         _v))
                            ((Data.Monoid.<>)
                               (case
                                    Lens.Family2.view
                                      (Data.ProtoLens.Field.field @"maybe'notfoundOk") _x
                                of
                                  Prelude.Nothing -> Data.Monoid.mempty
                                  (Prelude.Just _v)
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 56)
                                         ((Prelude..)
                                            Data.ProtoLens.Encoding.Bytes.putVarInt
                                            (\ b -> if b then 1 else 0)
                                            _v))
                               ((Data.Monoid.<>)
                                  (case
                                       Lens.Family2.view
                                         (Data.ProtoLens.Field.field @"maybe'timeout") _x
                                   of
                                     Prelude.Nothing -> Data.Monoid.mempty
                                     (Prelude.Just _v)
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt 64)
                                            ((Prelude..)
                                               Data.ProtoLens.Encoding.Bytes.putVarInt
                                               Prelude.fromIntegral
                                               _v))
                                  ((Data.Monoid.<>)
                                     (case
                                          Lens.Family2.view
                                            (Data.ProtoLens.Field.field @"maybe'sloppyQuorum") _x
                                      of
                                        Prelude.Nothing -> Data.Monoid.mempty
                                        (Prelude.Just _v)
                                          -> (Data.Monoid.<>)
                                               (Data.ProtoLens.Encoding.Bytes.putVarInt 72)
                                               ((Prelude..)
                                                  Data.ProtoLens.Encoding.Bytes.putVarInt
                                                  (\ b -> if b then 1 else 0)
                                                  _v))
                                     ((Data.Monoid.<>)
                                        (case
                                             Lens.Family2.view
                                               (Data.ProtoLens.Field.field @"maybe'nVal") _x
                                         of
                                           Prelude.Nothing -> Data.Monoid.mempty
                                           (Prelude.Just _v)
                                             -> (Data.Monoid.<>)
                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt 80)
                                                  ((Prelude..)
                                                     Data.ProtoLens.Encoding.Bytes.putVarInt
                                                     Prelude.fromIntegral
                                                     _v))
                                        ((Data.Monoid.<>)
                                           (case
                                                Lens.Family2.view
                                                  (Data.ProtoLens.Field.field
                                                     @"maybe'includeContext")
                                                  _x
                                            of
                                              Prelude.Nothing -> Data.Monoid.mempty
                                              (Prelude.Just _v)
                                                -> (Data.Monoid.<>)
                                                     (Data.ProtoLens.Encoding.Bytes.putVarInt 88)
                                                     ((Prelude..)
                                                        Data.ProtoLens.Encoding.Bytes.putVarInt
                                                        (\ b -> if b then 1 else 0)
                                                        _v))
                                           (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                              (Lens.Family2.view
                                                 Data.ProtoLens.unknownFields _x))))))))))))
instance Control.DeepSeq.NFData DtFetchReq where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_DtFetchReq'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_DtFetchReq'bucket x__)
                (Control.DeepSeq.deepseq
                   (_DtFetchReq'key x__)
                   (Control.DeepSeq.deepseq
                      (_DtFetchReq'type' x__)
                      (Control.DeepSeq.deepseq
                         (_DtFetchReq'r x__)
                         (Control.DeepSeq.deepseq
                            (_DtFetchReq'pr x__)
                            (Control.DeepSeq.deepseq
                               (_DtFetchReq'basicQuorum x__)
                               (Control.DeepSeq.deepseq
                                  (_DtFetchReq'notfoundOk x__)
                                  (Control.DeepSeq.deepseq
                                     (_DtFetchReq'timeout x__)
                                     (Control.DeepSeq.deepseq
                                        (_DtFetchReq'sloppyQuorum x__)
                                        (Control.DeepSeq.deepseq
                                           (_DtFetchReq'nVal x__)
                                           (Control.DeepSeq.deepseq
                                              (_DtFetchReq'includeContext x__) ())))))))))))
{- | Fields :
     
         * 'Proto.Riak_Fields.context' @:: Lens' DtFetchResp Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'context' @:: Lens' DtFetchResp (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.type'' @:: Lens' DtFetchResp DtFetchResp'DataType@
         * 'Proto.Riak_Fields.value' @:: Lens' DtFetchResp DtValue@
         * 'Proto.Riak_Fields.maybe'value' @:: Lens' DtFetchResp (Prelude.Maybe DtValue)@ -}
data DtFetchResp
  = DtFetchResp'_constructor {_DtFetchResp'context :: !(Prelude.Maybe Data.ByteString.ByteString),
                              _DtFetchResp'type' :: !DtFetchResp'DataType,
                              _DtFetchResp'value :: !(Prelude.Maybe DtValue),
                              _DtFetchResp'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show DtFetchResp where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField DtFetchResp "context" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtFetchResp'context
           (\ x__ y__ -> x__ {_DtFetchResp'context = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField DtFetchResp "maybe'context" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtFetchResp'context
           (\ x__ y__ -> x__ {_DtFetchResp'context = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField DtFetchResp "type'" DtFetchResp'DataType where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtFetchResp'type' (\ x__ y__ -> x__ {_DtFetchResp'type' = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField DtFetchResp "value" DtValue where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtFetchResp'value (\ x__ y__ -> x__ {_DtFetchResp'value = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField DtFetchResp "maybe'value" (Prelude.Maybe DtValue) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtFetchResp'value (\ x__ y__ -> x__ {_DtFetchResp'value = y__}))
        Prelude.id
instance Data.ProtoLens.Message DtFetchResp where
  messageName _ = Data.Text.pack "DtFetchResp"
  packedMessageDescriptor _
    = "\n\
      \\vDtFetchResp\DC2\CAN\n\
      \\acontext\CAN\SOH \SOH(\fR\acontext\DC2)\n\
      \\EOTtype\CAN\STX \STX(\SO2\NAK.DtFetchResp.DataTypeR\EOTtype\DC2\RS\n\
      \\ENQvalue\CAN\ETX \SOH(\v2\b.DtValueR\ENQvalue\"<\n\
      \\bDataType\DC2\v\n\
      \\aCOUNTER\DLE\SOH\DC2\a\n\
      \\ETXSET\DLE\STX\DC2\a\n\
      \\ETXMAP\DLE\ETX\DC2\a\n\
      \\ETXHLL\DLE\EOT\DC2\b\n\
      \\EOTGSET\DLE\ENQ"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        context__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "context"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'context")) ::
              Data.ProtoLens.FieldDescriptor DtFetchResp
        type'__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "type"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor DtFetchResp'DataType)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"type'")) ::
              Data.ProtoLens.FieldDescriptor DtFetchResp
        value__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "value"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor DtValue)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'value")) ::
              Data.ProtoLens.FieldDescriptor DtFetchResp
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, context__field_descriptor),
           (Data.ProtoLens.Tag 2, type'__field_descriptor),
           (Data.ProtoLens.Tag 3, value__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _DtFetchResp'_unknownFields
        (\ x__ y__ -> x__ {_DtFetchResp'_unknownFields = y__})
  defMessage
    = DtFetchResp'_constructor
        {_DtFetchResp'context = Prelude.Nothing,
         _DtFetchResp'type' = Data.ProtoLens.fieldDefault,
         _DtFetchResp'value = Prelude.Nothing,
         _DtFetchResp'_unknownFields = []}
  parseMessage
    = let
        loop ::
          DtFetchResp
          -> Prelude.Bool -> Data.ProtoLens.Encoding.Bytes.Parser DtFetchResp
        loop x required'type'
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing = (if required'type' then (:) "type" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "context"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"context") y x)
                                  required'type'
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "type"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"type'") y x)
                                  Prelude.False
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "value"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"value") y x)
                                  required'type'
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'type'
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True) "DtFetchResp"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'context") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((\ bs
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt
                                   (Prelude.fromIntegral (Data.ByteString.length bs)))
                                (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          _v))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                   ((Prelude..)
                      ((Prelude..)
                         Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                      Prelude.fromEnum
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"type'") _x)))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'value") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                             ((Prelude..)
                                (\ bs
                                   -> (Data.Monoid.<>)
                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                           (Prelude.fromIntegral (Data.ByteString.length bs)))
                                        (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                Data.ProtoLens.encodeMessage
                                _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData DtFetchResp where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_DtFetchResp'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_DtFetchResp'context x__)
                (Control.DeepSeq.deepseq
                   (_DtFetchResp'type' x__)
                   (Control.DeepSeq.deepseq (_DtFetchResp'value x__) ())))
data DtFetchResp'DataType
  = DtFetchResp'COUNTER |
    DtFetchResp'SET |
    DtFetchResp'MAP |
    DtFetchResp'HLL |
    DtFetchResp'GSET
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum DtFetchResp'DataType where
  maybeToEnum 1 = Prelude.Just DtFetchResp'COUNTER
  maybeToEnum 2 = Prelude.Just DtFetchResp'SET
  maybeToEnum 3 = Prelude.Just DtFetchResp'MAP
  maybeToEnum 4 = Prelude.Just DtFetchResp'HLL
  maybeToEnum 5 = Prelude.Just DtFetchResp'GSET
  maybeToEnum _ = Prelude.Nothing
  showEnum DtFetchResp'COUNTER = "COUNTER"
  showEnum DtFetchResp'SET = "SET"
  showEnum DtFetchResp'MAP = "MAP"
  showEnum DtFetchResp'HLL = "HLL"
  showEnum DtFetchResp'GSET = "GSET"
  readEnum k
    | (Prelude.==) k "COUNTER" = Prelude.Just DtFetchResp'COUNTER
    | (Prelude.==) k "SET" = Prelude.Just DtFetchResp'SET
    | (Prelude.==) k "MAP" = Prelude.Just DtFetchResp'MAP
    | (Prelude.==) k "HLL" = Prelude.Just DtFetchResp'HLL
    | (Prelude.==) k "GSET" = Prelude.Just DtFetchResp'GSET
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded DtFetchResp'DataType where
  minBound = DtFetchResp'COUNTER
  maxBound = DtFetchResp'GSET
instance Prelude.Enum DtFetchResp'DataType where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum DataType: " (Prelude.show k__)))
        Prelude.id
        (Data.ProtoLens.maybeToEnum k__)
  fromEnum DtFetchResp'COUNTER = 1
  fromEnum DtFetchResp'SET = 2
  fromEnum DtFetchResp'MAP = 3
  fromEnum DtFetchResp'HLL = 4
  fromEnum DtFetchResp'GSET = 5
  succ DtFetchResp'GSET
    = Prelude.error
        "DtFetchResp'DataType.succ: bad argument DtFetchResp'GSET. This value would be out of bounds."
  succ DtFetchResp'COUNTER = DtFetchResp'SET
  succ DtFetchResp'SET = DtFetchResp'MAP
  succ DtFetchResp'MAP = DtFetchResp'HLL
  succ DtFetchResp'HLL = DtFetchResp'GSET
  pred DtFetchResp'COUNTER
    = Prelude.error
        "DtFetchResp'DataType.pred: bad argument DtFetchResp'COUNTER. This value would be out of bounds."
  pred DtFetchResp'SET = DtFetchResp'COUNTER
  pred DtFetchResp'MAP = DtFetchResp'SET
  pred DtFetchResp'HLL = DtFetchResp'MAP
  pred DtFetchResp'GSET = DtFetchResp'HLL
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault DtFetchResp'DataType where
  fieldDefault = DtFetchResp'COUNTER
instance Control.DeepSeq.NFData DtFetchResp'DataType where
  rnf x__ = Prelude.seq x__ ()
{- | Fields :
     
         * 'Proto.Riak_Fields.counterOp' @:: Lens' DtOp CounterOp@
         * 'Proto.Riak_Fields.maybe'counterOp' @:: Lens' DtOp (Prelude.Maybe CounterOp)@
         * 'Proto.Riak_Fields.setOp' @:: Lens' DtOp SetOp@
         * 'Proto.Riak_Fields.maybe'setOp' @:: Lens' DtOp (Prelude.Maybe SetOp)@
         * 'Proto.Riak_Fields.mapOp' @:: Lens' DtOp MapOp@
         * 'Proto.Riak_Fields.maybe'mapOp' @:: Lens' DtOp (Prelude.Maybe MapOp)@
         * 'Proto.Riak_Fields.hllOp' @:: Lens' DtOp HllOp@
         * 'Proto.Riak_Fields.maybe'hllOp' @:: Lens' DtOp (Prelude.Maybe HllOp)@
         * 'Proto.Riak_Fields.gsetOp' @:: Lens' DtOp GSetOp@
         * 'Proto.Riak_Fields.maybe'gsetOp' @:: Lens' DtOp (Prelude.Maybe GSetOp)@ -}
data DtOp
  = DtOp'_constructor {_DtOp'counterOp :: !(Prelude.Maybe CounterOp),
                       _DtOp'setOp :: !(Prelude.Maybe SetOp),
                       _DtOp'mapOp :: !(Prelude.Maybe MapOp),
                       _DtOp'hllOp :: !(Prelude.Maybe HllOp),
                       _DtOp'gsetOp :: !(Prelude.Maybe GSetOp),
                       _DtOp'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show DtOp where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField DtOp "counterOp" CounterOp where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtOp'counterOp (\ x__ y__ -> x__ {_DtOp'counterOp = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField DtOp "maybe'counterOp" (Prelude.Maybe CounterOp) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtOp'counterOp (\ x__ y__ -> x__ {_DtOp'counterOp = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField DtOp "setOp" SetOp where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtOp'setOp (\ x__ y__ -> x__ {_DtOp'setOp = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField DtOp "maybe'setOp" (Prelude.Maybe SetOp) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtOp'setOp (\ x__ y__ -> x__ {_DtOp'setOp = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField DtOp "mapOp" MapOp where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtOp'mapOp (\ x__ y__ -> x__ {_DtOp'mapOp = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField DtOp "maybe'mapOp" (Prelude.Maybe MapOp) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtOp'mapOp (\ x__ y__ -> x__ {_DtOp'mapOp = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField DtOp "hllOp" HllOp where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtOp'hllOp (\ x__ y__ -> x__ {_DtOp'hllOp = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField DtOp "maybe'hllOp" (Prelude.Maybe HllOp) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtOp'hllOp (\ x__ y__ -> x__ {_DtOp'hllOp = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField DtOp "gsetOp" GSetOp where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtOp'gsetOp (\ x__ y__ -> x__ {_DtOp'gsetOp = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField DtOp "maybe'gsetOp" (Prelude.Maybe GSetOp) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtOp'gsetOp (\ x__ y__ -> x__ {_DtOp'gsetOp = y__}))
        Prelude.id
instance Data.ProtoLens.Message DtOp where
  messageName _ = Data.Text.pack "DtOp"
  packedMessageDescriptor _
    = "\n\
      \\EOTDtOp\DC2)\n\
      \\n\
      \counter_op\CAN\SOH \SOH(\v2\n\
      \.CounterOpR\tcounterOp\DC2\GS\n\
      \\ACKset_op\CAN\STX \SOH(\v2\ACK.SetOpR\ENQsetOp\DC2\GS\n\
      \\ACKmap_op\CAN\ETX \SOH(\v2\ACK.MapOpR\ENQmapOp\DC2\GS\n\
      \\ACKhll_op\CAN\EOT \SOH(\v2\ACK.HllOpR\ENQhllOp\DC2 \n\
      \\agset_op\CAN\ENQ \SOH(\v2\a.GSetOpR\ACKgsetOp"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        counterOp__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "counter_op"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CounterOp)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'counterOp")) ::
              Data.ProtoLens.FieldDescriptor DtOp
        setOp__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "set_op"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor SetOp)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'setOp")) ::
              Data.ProtoLens.FieldDescriptor DtOp
        mapOp__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "map_op"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor MapOp)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'mapOp")) ::
              Data.ProtoLens.FieldDescriptor DtOp
        hllOp__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "hll_op"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor HllOp)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'hllOp")) ::
              Data.ProtoLens.FieldDescriptor DtOp
        gsetOp__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "gset_op"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor GSetOp)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'gsetOp")) ::
              Data.ProtoLens.FieldDescriptor DtOp
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, counterOp__field_descriptor),
           (Data.ProtoLens.Tag 2, setOp__field_descriptor),
           (Data.ProtoLens.Tag 3, mapOp__field_descriptor),
           (Data.ProtoLens.Tag 4, hllOp__field_descriptor),
           (Data.ProtoLens.Tag 5, gsetOp__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _DtOp'_unknownFields
        (\ x__ y__ -> x__ {_DtOp'_unknownFields = y__})
  defMessage
    = DtOp'_constructor
        {_DtOp'counterOp = Prelude.Nothing, _DtOp'setOp = Prelude.Nothing,
         _DtOp'mapOp = Prelude.Nothing, _DtOp'hllOp = Prelude.Nothing,
         _DtOp'gsetOp = Prelude.Nothing, _DtOp'_unknownFields = []}
  parseMessage
    = let
        loop :: DtOp -> Data.ProtoLens.Encoding.Bytes.Parser DtOp
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "counter_op"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"counterOp") y x)
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "set_op"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"setOp") y x)
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "map_op"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"mapOp") y x)
                        34
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "hll_op"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"hllOp") y x)
                        42
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "gset_op"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"gsetOp") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "DtOp"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view
                    (Data.ProtoLens.Field.field @"maybe'counterOp") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.ProtoLens.encodeMessage
                          _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'setOp") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.ProtoLens.encodeMessage
                             _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'mapOp") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                             ((Prelude..)
                                (\ bs
                                   -> (Data.Monoid.<>)
                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                           (Prelude.fromIntegral (Data.ByteString.length bs)))
                                        (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                Data.ProtoLens.encodeMessage
                                _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'hllOp") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                                ((Prelude..)
                                   (\ bs
                                      -> (Data.Monoid.<>)
                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   Data.ProtoLens.encodeMessage
                                   _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'gsetOp") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 42)
                                   ((Prelude..)
                                      (\ bs
                                         -> (Data.Monoid.<>)
                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                                              (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                      Data.ProtoLens.encodeMessage
                                      _v))
                         (Data.ProtoLens.Encoding.Wire.buildFieldSet
                            (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))
instance Control.DeepSeq.NFData DtOp where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_DtOp'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_DtOp'counterOp x__)
                (Control.DeepSeq.deepseq
                   (_DtOp'setOp x__)
                   (Control.DeepSeq.deepseq
                      (_DtOp'mapOp x__)
                      (Control.DeepSeq.deepseq
                         (_DtOp'hllOp x__)
                         (Control.DeepSeq.deepseq (_DtOp'gsetOp x__) ())))))
{- | Fields :
     
         * 'Proto.Riak_Fields.bucket' @:: Lens' DtUpdateReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.key' @:: Lens' DtUpdateReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'key' @:: Lens' DtUpdateReq (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.type'' @:: Lens' DtUpdateReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.context' @:: Lens' DtUpdateReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'context' @:: Lens' DtUpdateReq (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.op' @:: Lens' DtUpdateReq DtOp@
         * 'Proto.Riak_Fields.w' @:: Lens' DtUpdateReq Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'w' @:: Lens' DtUpdateReq (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.dw' @:: Lens' DtUpdateReq Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'dw' @:: Lens' DtUpdateReq (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.pw' @:: Lens' DtUpdateReq Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'pw' @:: Lens' DtUpdateReq (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.returnBody' @:: Lens' DtUpdateReq Prelude.Bool@
         * 'Proto.Riak_Fields.maybe'returnBody' @:: Lens' DtUpdateReq (Prelude.Maybe Prelude.Bool)@
         * 'Proto.Riak_Fields.timeout' @:: Lens' DtUpdateReq Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'timeout' @:: Lens' DtUpdateReq (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.sloppyQuorum' @:: Lens' DtUpdateReq Prelude.Bool@
         * 'Proto.Riak_Fields.maybe'sloppyQuorum' @:: Lens' DtUpdateReq (Prelude.Maybe Prelude.Bool)@
         * 'Proto.Riak_Fields.nVal' @:: Lens' DtUpdateReq Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'nVal' @:: Lens' DtUpdateReq (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.includeContext' @:: Lens' DtUpdateReq Prelude.Bool@
         * 'Proto.Riak_Fields.maybe'includeContext' @:: Lens' DtUpdateReq (Prelude.Maybe Prelude.Bool)@ -}
data DtUpdateReq
  = DtUpdateReq'_constructor {_DtUpdateReq'bucket :: !Data.ByteString.ByteString,
                              _DtUpdateReq'key :: !(Prelude.Maybe Data.ByteString.ByteString),
                              _DtUpdateReq'type' :: !Data.ByteString.ByteString,
                              _DtUpdateReq'context :: !(Prelude.Maybe Data.ByteString.ByteString),
                              _DtUpdateReq'op :: !DtOp,
                              _DtUpdateReq'w :: !(Prelude.Maybe Data.Word.Word32),
                              _DtUpdateReq'dw :: !(Prelude.Maybe Data.Word.Word32),
                              _DtUpdateReq'pw :: !(Prelude.Maybe Data.Word.Word32),
                              _DtUpdateReq'returnBody :: !(Prelude.Maybe Prelude.Bool),
                              _DtUpdateReq'timeout :: !(Prelude.Maybe Data.Word.Word32),
                              _DtUpdateReq'sloppyQuorum :: !(Prelude.Maybe Prelude.Bool),
                              _DtUpdateReq'nVal :: !(Prelude.Maybe Data.Word.Word32),
                              _DtUpdateReq'includeContext :: !(Prelude.Maybe Prelude.Bool),
                              _DtUpdateReq'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show DtUpdateReq where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField DtUpdateReq "bucket" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtUpdateReq'bucket (\ x__ y__ -> x__ {_DtUpdateReq'bucket = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField DtUpdateReq "key" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtUpdateReq'key (\ x__ y__ -> x__ {_DtUpdateReq'key = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField DtUpdateReq "maybe'key" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtUpdateReq'key (\ x__ y__ -> x__ {_DtUpdateReq'key = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField DtUpdateReq "type'" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtUpdateReq'type' (\ x__ y__ -> x__ {_DtUpdateReq'type' = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField DtUpdateReq "context" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtUpdateReq'context
           (\ x__ y__ -> x__ {_DtUpdateReq'context = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField DtUpdateReq "maybe'context" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtUpdateReq'context
           (\ x__ y__ -> x__ {_DtUpdateReq'context = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField DtUpdateReq "op" DtOp where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtUpdateReq'op (\ x__ y__ -> x__ {_DtUpdateReq'op = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField DtUpdateReq "w" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtUpdateReq'w (\ x__ y__ -> x__ {_DtUpdateReq'w = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField DtUpdateReq "maybe'w" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtUpdateReq'w (\ x__ y__ -> x__ {_DtUpdateReq'w = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField DtUpdateReq "dw" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtUpdateReq'dw (\ x__ y__ -> x__ {_DtUpdateReq'dw = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField DtUpdateReq "maybe'dw" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtUpdateReq'dw (\ x__ y__ -> x__ {_DtUpdateReq'dw = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField DtUpdateReq "pw" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtUpdateReq'pw (\ x__ y__ -> x__ {_DtUpdateReq'pw = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField DtUpdateReq "maybe'pw" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtUpdateReq'pw (\ x__ y__ -> x__ {_DtUpdateReq'pw = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField DtUpdateReq "returnBody" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtUpdateReq'returnBody
           (\ x__ y__ -> x__ {_DtUpdateReq'returnBody = y__}))
        (Data.ProtoLens.maybeLens Prelude.False)
instance Data.ProtoLens.Field.HasField DtUpdateReq "maybe'returnBody" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtUpdateReq'returnBody
           (\ x__ y__ -> x__ {_DtUpdateReq'returnBody = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField DtUpdateReq "timeout" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtUpdateReq'timeout
           (\ x__ y__ -> x__ {_DtUpdateReq'timeout = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField DtUpdateReq "maybe'timeout" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtUpdateReq'timeout
           (\ x__ y__ -> x__ {_DtUpdateReq'timeout = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField DtUpdateReq "sloppyQuorum" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtUpdateReq'sloppyQuorum
           (\ x__ y__ -> x__ {_DtUpdateReq'sloppyQuorum = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField DtUpdateReq "maybe'sloppyQuorum" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtUpdateReq'sloppyQuorum
           (\ x__ y__ -> x__ {_DtUpdateReq'sloppyQuorum = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField DtUpdateReq "nVal" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtUpdateReq'nVal (\ x__ y__ -> x__ {_DtUpdateReq'nVal = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField DtUpdateReq "maybe'nVal" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtUpdateReq'nVal (\ x__ y__ -> x__ {_DtUpdateReq'nVal = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField DtUpdateReq "includeContext" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtUpdateReq'includeContext
           (\ x__ y__ -> x__ {_DtUpdateReq'includeContext = y__}))
        (Data.ProtoLens.maybeLens Prelude.True)
instance Data.ProtoLens.Field.HasField DtUpdateReq "maybe'includeContext" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtUpdateReq'includeContext
           (\ x__ y__ -> x__ {_DtUpdateReq'includeContext = y__}))
        Prelude.id
instance Data.ProtoLens.Message DtUpdateReq where
  messageName _ = Data.Text.pack "DtUpdateReq"
  packedMessageDescriptor _
    = "\n\
      \\vDtUpdateReq\DC2\SYN\n\
      \\ACKbucket\CAN\SOH \STX(\fR\ACKbucket\DC2\DLE\n\
      \\ETXkey\CAN\STX \SOH(\fR\ETXkey\DC2\DC2\n\
      \\EOTtype\CAN\ETX \STX(\fR\EOTtype\DC2\CAN\n\
      \\acontext\CAN\EOT \SOH(\fR\acontext\DC2\NAK\n\
      \\STXop\CAN\ENQ \STX(\v2\ENQ.DtOpR\STXop\DC2\f\n\
      \\SOHw\CAN\ACK \SOH(\rR\SOHw\DC2\SO\n\
      \\STXdw\CAN\a \SOH(\rR\STXdw\DC2\SO\n\
      \\STXpw\CAN\b \SOH(\rR\STXpw\DC2&\n\
      \\vreturn_body\CAN\t \SOH(\b:\ENQfalseR\n\
      \returnBody\DC2\CAN\n\
      \\atimeout\CAN\n\
      \ \SOH(\rR\atimeout\DC2#\n\
      \\rsloppy_quorum\CAN\v \SOH(\bR\fsloppyQuorum\DC2\DC3\n\
      \\ENQn_val\CAN\f \SOH(\rR\EOTnVal\DC2-\n\
      \\SIinclude_context\CAN\r \SOH(\b:\EOTtrueR\SOincludeContext"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        bucket__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "bucket"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"bucket")) ::
              Data.ProtoLens.FieldDescriptor DtUpdateReq
        key__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "key"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'key")) ::
              Data.ProtoLens.FieldDescriptor DtUpdateReq
        type'__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "type"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"type'")) ::
              Data.ProtoLens.FieldDescriptor DtUpdateReq
        context__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "context"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'context")) ::
              Data.ProtoLens.FieldDescriptor DtUpdateReq
        op__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "op"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor DtOp)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"op")) ::
              Data.ProtoLens.FieldDescriptor DtUpdateReq
        w__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "w"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'w")) ::
              Data.ProtoLens.FieldDescriptor DtUpdateReq
        dw__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dw"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dw")) ::
              Data.ProtoLens.FieldDescriptor DtUpdateReq
        pw__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pw"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'pw")) ::
              Data.ProtoLens.FieldDescriptor DtUpdateReq
        returnBody__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "return_body"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'returnBody")) ::
              Data.ProtoLens.FieldDescriptor DtUpdateReq
        timeout__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "timeout"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'timeout")) ::
              Data.ProtoLens.FieldDescriptor DtUpdateReq
        sloppyQuorum__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "sloppy_quorum"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'sloppyQuorum")) ::
              Data.ProtoLens.FieldDescriptor DtUpdateReq
        nVal__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "n_val"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'nVal")) ::
              Data.ProtoLens.FieldDescriptor DtUpdateReq
        includeContext__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "include_context"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'includeContext")) ::
              Data.ProtoLens.FieldDescriptor DtUpdateReq
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, bucket__field_descriptor),
           (Data.ProtoLens.Tag 2, key__field_descriptor),
           (Data.ProtoLens.Tag 3, type'__field_descriptor),
           (Data.ProtoLens.Tag 4, context__field_descriptor),
           (Data.ProtoLens.Tag 5, op__field_descriptor),
           (Data.ProtoLens.Tag 6, w__field_descriptor),
           (Data.ProtoLens.Tag 7, dw__field_descriptor),
           (Data.ProtoLens.Tag 8, pw__field_descriptor),
           (Data.ProtoLens.Tag 9, returnBody__field_descriptor),
           (Data.ProtoLens.Tag 10, timeout__field_descriptor),
           (Data.ProtoLens.Tag 11, sloppyQuorum__field_descriptor),
           (Data.ProtoLens.Tag 12, nVal__field_descriptor),
           (Data.ProtoLens.Tag 13, includeContext__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _DtUpdateReq'_unknownFields
        (\ x__ y__ -> x__ {_DtUpdateReq'_unknownFields = y__})
  defMessage
    = DtUpdateReq'_constructor
        {_DtUpdateReq'bucket = Data.ProtoLens.fieldDefault,
         _DtUpdateReq'key = Prelude.Nothing,
         _DtUpdateReq'type' = Data.ProtoLens.fieldDefault,
         _DtUpdateReq'context = Prelude.Nothing,
         _DtUpdateReq'op = Data.ProtoLens.defMessage,
         _DtUpdateReq'w = Prelude.Nothing,
         _DtUpdateReq'dw = Prelude.Nothing,
         _DtUpdateReq'pw = Prelude.Nothing,
         _DtUpdateReq'returnBody = Prelude.Nothing,
         _DtUpdateReq'timeout = Prelude.Nothing,
         _DtUpdateReq'sloppyQuorum = Prelude.Nothing,
         _DtUpdateReq'nVal = Prelude.Nothing,
         _DtUpdateReq'includeContext = Prelude.Nothing,
         _DtUpdateReq'_unknownFields = []}
  parseMessage
    = let
        loop ::
          DtUpdateReq
          -> Prelude.Bool
             -> Prelude.Bool
                -> Prelude.Bool -> Data.ProtoLens.Encoding.Bytes.Parser DtUpdateReq
        loop x required'bucket required'op required'type'
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'bucket then (:) "bucket" else Prelude.id)
                               ((if required'op then (:) "op" else Prelude.id)
                                  ((if required'type' then (:) "type" else Prelude.id) []))
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "bucket"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"bucket") y x)
                                  Prelude.False
                                  required'op
                                  required'type'
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "key"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"key") y x)
                                  required'bucket
                                  required'op
                                  required'type'
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "type"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"type'") y x)
                                  required'bucket
                                  required'op
                                  Prelude.False
                        34
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "context"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"context") y x)
                                  required'bucket
                                  required'op
                                  required'type'
                        42
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "op"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"op") y x)
                                  required'bucket
                                  Prelude.False
                                  required'type'
                        48
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "w"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"w") y x)
                                  required'bucket
                                  required'op
                                  required'type'
                        56
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "dw"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"dw") y x)
                                  required'bucket
                                  required'op
                                  required'type'
                        64
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "pw"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"pw") y x)
                                  required'bucket
                                  required'op
                                  required'type'
                        72
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "return_body"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"returnBody") y x)
                                  required'bucket
                                  required'op
                                  required'type'
                        80
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "timeout"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"timeout") y x)
                                  required'bucket
                                  required'op
                                  required'type'
                        88
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "sloppy_quorum"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"sloppyQuorum") y x)
                                  required'bucket
                                  required'op
                                  required'type'
                        96
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "n_val"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"nVal") y x)
                                  required'bucket
                                  required'op
                                  required'type'
                        104
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "include_context"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"includeContext") y x)
                                  required'bucket
                                  required'op
                                  required'type'
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'bucket
                                  required'op
                                  required'type'
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop
                Data.ProtoLens.defMessage Prelude.True Prelude.True Prelude.True)
          "DtUpdateReq"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((\ bs
                    -> (Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"bucket") _x)))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'key") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             _v))
                ((Data.Monoid.<>)
                   ((Data.Monoid.<>)
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                      ((\ bs
                          -> (Data.Monoid.<>)
                               (Data.ProtoLens.Encoding.Bytes.putVarInt
                                  (Prelude.fromIntegral (Data.ByteString.length bs)))
                               (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                         (Lens.Family2.view (Data.ProtoLens.Field.field @"type'") _x)))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'context") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                                ((\ bs
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   _v))
                      ((Data.Monoid.<>)
                         ((Data.Monoid.<>)
                            (Data.ProtoLens.Encoding.Bytes.putVarInt 42)
                            ((Prelude..)
                               (\ bs
                                  -> (Data.Monoid.<>)
                                       (Data.ProtoLens.Encoding.Bytes.putVarInt
                                          (Prelude.fromIntegral (Data.ByteString.length bs)))
                                       (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                               Data.ProtoLens.encodeMessage
                               (Lens.Family2.view (Data.ProtoLens.Field.field @"op") _x)))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'w") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 48)
                                      ((Prelude..)
                                         Data.ProtoLens.Encoding.Bytes.putVarInt
                                         Prelude.fromIntegral
                                         _v))
                            ((Data.Monoid.<>)
                               (case
                                    Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dw") _x
                                of
                                  Prelude.Nothing -> Data.Monoid.mempty
                                  (Prelude.Just _v)
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 56)
                                         ((Prelude..)
                                            Data.ProtoLens.Encoding.Bytes.putVarInt
                                            Prelude.fromIntegral
                                            _v))
                               ((Data.Monoid.<>)
                                  (case
                                       Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'pw") _x
                                   of
                                     Prelude.Nothing -> Data.Monoid.mempty
                                     (Prelude.Just _v)
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt 64)
                                            ((Prelude..)
                                               Data.ProtoLens.Encoding.Bytes.putVarInt
                                               Prelude.fromIntegral
                                               _v))
                                  ((Data.Monoid.<>)
                                     (case
                                          Lens.Family2.view
                                            (Data.ProtoLens.Field.field @"maybe'returnBody") _x
                                      of
                                        Prelude.Nothing -> Data.Monoid.mempty
                                        (Prelude.Just _v)
                                          -> (Data.Monoid.<>)
                                               (Data.ProtoLens.Encoding.Bytes.putVarInt 72)
                                               ((Prelude..)
                                                  Data.ProtoLens.Encoding.Bytes.putVarInt
                                                  (\ b -> if b then 1 else 0)
                                                  _v))
                                     ((Data.Monoid.<>)
                                        (case
                                             Lens.Family2.view
                                               (Data.ProtoLens.Field.field @"maybe'timeout") _x
                                         of
                                           Prelude.Nothing -> Data.Monoid.mempty
                                           (Prelude.Just _v)
                                             -> (Data.Monoid.<>)
                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt 80)
                                                  ((Prelude..)
                                                     Data.ProtoLens.Encoding.Bytes.putVarInt
                                                     Prelude.fromIntegral
                                                     _v))
                                        ((Data.Monoid.<>)
                                           (case
                                                Lens.Family2.view
                                                  (Data.ProtoLens.Field.field @"maybe'sloppyQuorum")
                                                  _x
                                            of
                                              Prelude.Nothing -> Data.Monoid.mempty
                                              (Prelude.Just _v)
                                                -> (Data.Monoid.<>)
                                                     (Data.ProtoLens.Encoding.Bytes.putVarInt 88)
                                                     ((Prelude..)
                                                        Data.ProtoLens.Encoding.Bytes.putVarInt
                                                        (\ b -> if b then 1 else 0)
                                                        _v))
                                           ((Data.Monoid.<>)
                                              (case
                                                   Lens.Family2.view
                                                     (Data.ProtoLens.Field.field @"maybe'nVal") _x
                                               of
                                                 Prelude.Nothing -> Data.Monoid.mempty
                                                 (Prelude.Just _v)
                                                   -> (Data.Monoid.<>)
                                                        (Data.ProtoLens.Encoding.Bytes.putVarInt 96)
                                                        ((Prelude..)
                                                           Data.ProtoLens.Encoding.Bytes.putVarInt
                                                           Prelude.fromIntegral
                                                           _v))
                                              ((Data.Monoid.<>)
                                                 (case
                                                      Lens.Family2.view
                                                        (Data.ProtoLens.Field.field
                                                           @"maybe'includeContext")
                                                        _x
                                                  of
                                                    Prelude.Nothing -> Data.Monoid.mempty
                                                    (Prelude.Just _v)
                                                      -> (Data.Monoid.<>)
                                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                              104)
                                                           ((Prelude..)
                                                              Data.ProtoLens.Encoding.Bytes.putVarInt
                                                              (\ b -> if b then 1 else 0)
                                                              _v))
                                                 (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                                    (Lens.Family2.view
                                                       Data.ProtoLens.unknownFields _x))))))))))))))
instance Control.DeepSeq.NFData DtUpdateReq where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_DtUpdateReq'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_DtUpdateReq'bucket x__)
                (Control.DeepSeq.deepseq
                   (_DtUpdateReq'key x__)
                   (Control.DeepSeq.deepseq
                      (_DtUpdateReq'type' x__)
                      (Control.DeepSeq.deepseq
                         (_DtUpdateReq'context x__)
                         (Control.DeepSeq.deepseq
                            (_DtUpdateReq'op x__)
                            (Control.DeepSeq.deepseq
                               (_DtUpdateReq'w x__)
                               (Control.DeepSeq.deepseq
                                  (_DtUpdateReq'dw x__)
                                  (Control.DeepSeq.deepseq
                                     (_DtUpdateReq'pw x__)
                                     (Control.DeepSeq.deepseq
                                        (_DtUpdateReq'returnBody x__)
                                        (Control.DeepSeq.deepseq
                                           (_DtUpdateReq'timeout x__)
                                           (Control.DeepSeq.deepseq
                                              (_DtUpdateReq'sloppyQuorum x__)
                                              (Control.DeepSeq.deepseq
                                                 (_DtUpdateReq'nVal x__)
                                                 (Control.DeepSeq.deepseq
                                                    (_DtUpdateReq'includeContext x__)
                                                    ())))))))))))))
{- | Fields :
     
         * 'Proto.Riak_Fields.key' @:: Lens' DtUpdateResp Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'key' @:: Lens' DtUpdateResp (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.context' @:: Lens' DtUpdateResp Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'context' @:: Lens' DtUpdateResp (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.counterValue' @:: Lens' DtUpdateResp Data.Int.Int64@
         * 'Proto.Riak_Fields.maybe'counterValue' @:: Lens' DtUpdateResp (Prelude.Maybe Data.Int.Int64)@
         * 'Proto.Riak_Fields.setValue' @:: Lens' DtUpdateResp [Data.ByteString.ByteString]@
         * 'Proto.Riak_Fields.vec'setValue' @:: Lens' DtUpdateResp (Data.Vector.Vector Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.mapValue' @:: Lens' DtUpdateResp [MapEntry]@
         * 'Proto.Riak_Fields.vec'mapValue' @:: Lens' DtUpdateResp (Data.Vector.Vector MapEntry)@
         * 'Proto.Riak_Fields.hllValue' @:: Lens' DtUpdateResp Data.Word.Word64@
         * 'Proto.Riak_Fields.maybe'hllValue' @:: Lens' DtUpdateResp (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Riak_Fields.gsetValue' @:: Lens' DtUpdateResp [Data.ByteString.ByteString]@
         * 'Proto.Riak_Fields.vec'gsetValue' @:: Lens' DtUpdateResp (Data.Vector.Vector Data.ByteString.ByteString)@ -}
data DtUpdateResp
  = DtUpdateResp'_constructor {_DtUpdateResp'key :: !(Prelude.Maybe Data.ByteString.ByteString),
                               _DtUpdateResp'context :: !(Prelude.Maybe Data.ByteString.ByteString),
                               _DtUpdateResp'counterValue :: !(Prelude.Maybe Data.Int.Int64),
                               _DtUpdateResp'setValue :: !(Data.Vector.Vector Data.ByteString.ByteString),
                               _DtUpdateResp'mapValue :: !(Data.Vector.Vector MapEntry),
                               _DtUpdateResp'hllValue :: !(Prelude.Maybe Data.Word.Word64),
                               _DtUpdateResp'gsetValue :: !(Data.Vector.Vector Data.ByteString.ByteString),
                               _DtUpdateResp'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show DtUpdateResp where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField DtUpdateResp "key" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtUpdateResp'key (\ x__ y__ -> x__ {_DtUpdateResp'key = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField DtUpdateResp "maybe'key" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtUpdateResp'key (\ x__ y__ -> x__ {_DtUpdateResp'key = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField DtUpdateResp "context" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtUpdateResp'context
           (\ x__ y__ -> x__ {_DtUpdateResp'context = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField DtUpdateResp "maybe'context" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtUpdateResp'context
           (\ x__ y__ -> x__ {_DtUpdateResp'context = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField DtUpdateResp "counterValue" Data.Int.Int64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtUpdateResp'counterValue
           (\ x__ y__ -> x__ {_DtUpdateResp'counterValue = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField DtUpdateResp "maybe'counterValue" (Prelude.Maybe Data.Int.Int64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtUpdateResp'counterValue
           (\ x__ y__ -> x__ {_DtUpdateResp'counterValue = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField DtUpdateResp "setValue" [Data.ByteString.ByteString] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtUpdateResp'setValue
           (\ x__ y__ -> x__ {_DtUpdateResp'setValue = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField DtUpdateResp "vec'setValue" (Data.Vector.Vector Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtUpdateResp'setValue
           (\ x__ y__ -> x__ {_DtUpdateResp'setValue = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField DtUpdateResp "mapValue" [MapEntry] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtUpdateResp'mapValue
           (\ x__ y__ -> x__ {_DtUpdateResp'mapValue = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField DtUpdateResp "vec'mapValue" (Data.Vector.Vector MapEntry) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtUpdateResp'mapValue
           (\ x__ y__ -> x__ {_DtUpdateResp'mapValue = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField DtUpdateResp "hllValue" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtUpdateResp'hllValue
           (\ x__ y__ -> x__ {_DtUpdateResp'hllValue = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField DtUpdateResp "maybe'hllValue" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtUpdateResp'hllValue
           (\ x__ y__ -> x__ {_DtUpdateResp'hllValue = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField DtUpdateResp "gsetValue" [Data.ByteString.ByteString] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtUpdateResp'gsetValue
           (\ x__ y__ -> x__ {_DtUpdateResp'gsetValue = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField DtUpdateResp "vec'gsetValue" (Data.Vector.Vector Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtUpdateResp'gsetValue
           (\ x__ y__ -> x__ {_DtUpdateResp'gsetValue = y__}))
        Prelude.id
instance Data.ProtoLens.Message DtUpdateResp where
  messageName _ = Data.Text.pack "DtUpdateResp"
  packedMessageDescriptor _
    = "\n\
      \\fDtUpdateResp\DC2\DLE\n\
      \\ETXkey\CAN\SOH \SOH(\fR\ETXkey\DC2\CAN\n\
      \\acontext\CAN\STX \SOH(\fR\acontext\DC2#\n\
      \\rcounter_value\CAN\ETX \SOH(\DC2R\fcounterValue\DC2\ESC\n\
      \\tset_value\CAN\EOT \ETX(\fR\bsetValue\DC2&\n\
      \\tmap_value\CAN\ENQ \ETX(\v2\t.MapEntryR\bmapValue\DC2\ESC\n\
      \\thll_value\CAN\ACK \SOH(\EOTR\bhllValue\DC2\GS\n\
      \\n\
      \gset_value\CAN\a \ETX(\fR\tgsetValue"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        key__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "key"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'key")) ::
              Data.ProtoLens.FieldDescriptor DtUpdateResp
        context__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "context"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'context")) ::
              Data.ProtoLens.FieldDescriptor DtUpdateResp
        counterValue__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "counter_value"
              (Data.ProtoLens.ScalarField Data.ProtoLens.SInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'counterValue")) ::
              Data.ProtoLens.FieldDescriptor DtUpdateResp
        setValue__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "set_value"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"setValue")) ::
              Data.ProtoLens.FieldDescriptor DtUpdateResp
        mapValue__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "map_value"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor MapEntry)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"mapValue")) ::
              Data.ProtoLens.FieldDescriptor DtUpdateResp
        hllValue__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "hll_value"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'hllValue")) ::
              Data.ProtoLens.FieldDescriptor DtUpdateResp
        gsetValue__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "gset_value"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"gsetValue")) ::
              Data.ProtoLens.FieldDescriptor DtUpdateResp
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, key__field_descriptor),
           (Data.ProtoLens.Tag 2, context__field_descriptor),
           (Data.ProtoLens.Tag 3, counterValue__field_descriptor),
           (Data.ProtoLens.Tag 4, setValue__field_descriptor),
           (Data.ProtoLens.Tag 5, mapValue__field_descriptor),
           (Data.ProtoLens.Tag 6, hllValue__field_descriptor),
           (Data.ProtoLens.Tag 7, gsetValue__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _DtUpdateResp'_unknownFields
        (\ x__ y__ -> x__ {_DtUpdateResp'_unknownFields = y__})
  defMessage
    = DtUpdateResp'_constructor
        {_DtUpdateResp'key = Prelude.Nothing,
         _DtUpdateResp'context = Prelude.Nothing,
         _DtUpdateResp'counterValue = Prelude.Nothing,
         _DtUpdateResp'setValue = Data.Vector.Generic.empty,
         _DtUpdateResp'mapValue = Data.Vector.Generic.empty,
         _DtUpdateResp'hllValue = Prelude.Nothing,
         _DtUpdateResp'gsetValue = Data.Vector.Generic.empty,
         _DtUpdateResp'_unknownFields = []}
  parseMessage
    = let
        loop ::
          DtUpdateResp
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld Data.ByteString.ByteString
             -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld MapEntry
                -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld Data.ByteString.ByteString
                   -> Data.ProtoLens.Encoding.Bytes.Parser DtUpdateResp
        loop x mutable'gsetValue mutable'mapValue mutable'setValue
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'gsetValue <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                            (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                               mutable'gsetValue)
                      frozen'mapValue <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                           (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                              mutable'mapValue)
                      frozen'setValue <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                           (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                              mutable'setValue)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields
                           (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'gsetValue")
                              frozen'gsetValue
                              (Lens.Family2.set
                                 (Data.ProtoLens.Field.field @"vec'mapValue")
                                 frozen'mapValue
                                 (Lens.Family2.set
                                    (Data.ProtoLens.Field.field @"vec'setValue")
                                    frozen'setValue
                                    x))))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "key"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"key") y x)
                                  mutable'gsetValue
                                  mutable'mapValue
                                  mutable'setValue
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "context"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"context") y x)
                                  mutable'gsetValue
                                  mutable'mapValue
                                  mutable'setValue
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Data.ProtoLens.Encoding.Bytes.wordToSignedInt64
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "counter_value"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"counterValue") y x)
                                  mutable'gsetValue
                                  mutable'mapValue
                                  mutable'setValue
                        34
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.getBytes
                                              (Prelude.fromIntegral len))
                                        "set_value"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'setValue y)
                                loop x mutable'gsetValue mutable'mapValue v
                        42
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "map_value"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'mapValue y)
                                loop x mutable'gsetValue v mutable'setValue
                        48
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "hll_value"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"hllValue") y x)
                                  mutable'gsetValue
                                  mutable'mapValue
                                  mutable'setValue
                        58
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.getBytes
                                              (Prelude.fromIntegral len))
                                        "gset_value"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'gsetValue y)
                                loop x v mutable'mapValue mutable'setValue
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'gsetValue
                                  mutable'mapValue
                                  mutable'setValue
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'gsetValue <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                     Data.ProtoLens.Encoding.Growing.new
              mutable'mapValue <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                    Data.ProtoLens.Encoding.Growing.new
              mutable'setValue <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                    Data.ProtoLens.Encoding.Growing.new
              loop
                Data.ProtoLens.defMessage
                mutable'gsetValue
                mutable'mapValue
                mutable'setValue)
          "DtUpdateResp"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'key") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((\ bs
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt
                                   (Prelude.fromIntegral (Data.ByteString.length bs)))
                                (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'context") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'counterValue") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                                Data.ProtoLens.Encoding.Bytes.signedInt64ToWord
                                _v))
                   ((Data.Monoid.<>)
                      (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                         (\ _v
                            -> (Data.Monoid.<>)
                                 (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                                 ((\ bs
                                     -> (Data.Monoid.<>)
                                          (Data.ProtoLens.Encoding.Bytes.putVarInt
                                             (Prelude.fromIntegral (Data.ByteString.length bs)))
                                          (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                    _v))
                         (Lens.Family2.view
                            (Data.ProtoLens.Field.field @"vec'setValue") _x))
                      ((Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                            (\ _v
                               -> (Data.Monoid.<>)
                                    (Data.ProtoLens.Encoding.Bytes.putVarInt 42)
                                    ((Prelude..)
                                       (\ bs
                                          -> (Data.Monoid.<>)
                                               (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                  (Prelude.fromIntegral
                                                     (Data.ByteString.length bs)))
                                               (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                       Data.ProtoLens.encodeMessage
                                       _v))
                            (Lens.Family2.view
                               (Data.ProtoLens.Field.field @"vec'mapValue") _x))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'hllValue") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 48)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                            ((Data.Monoid.<>)
                               (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                                  (\ _v
                                     -> (Data.Monoid.<>)
                                          (Data.ProtoLens.Encoding.Bytes.putVarInt 58)
                                          ((\ bs
                                              -> (Data.Monoid.<>)
                                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                      (Prelude.fromIntegral
                                                         (Data.ByteString.length bs)))
                                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                             _v))
                                  (Lens.Family2.view
                                     (Data.ProtoLens.Field.field @"vec'gsetValue") _x))
                               (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                  (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))))
instance Control.DeepSeq.NFData DtUpdateResp where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_DtUpdateResp'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_DtUpdateResp'key x__)
                (Control.DeepSeq.deepseq
                   (_DtUpdateResp'context x__)
                   (Control.DeepSeq.deepseq
                      (_DtUpdateResp'counterValue x__)
                      (Control.DeepSeq.deepseq
                         (_DtUpdateResp'setValue x__)
                         (Control.DeepSeq.deepseq
                            (_DtUpdateResp'mapValue x__)
                            (Control.DeepSeq.deepseq
                               (_DtUpdateResp'hllValue x__)
                               (Control.DeepSeq.deepseq (_DtUpdateResp'gsetValue x__) ())))))))
{- | Fields :
     
         * 'Proto.Riak_Fields.counterValue' @:: Lens' DtValue Data.Int.Int64@
         * 'Proto.Riak_Fields.maybe'counterValue' @:: Lens' DtValue (Prelude.Maybe Data.Int.Int64)@
         * 'Proto.Riak_Fields.setValue' @:: Lens' DtValue [Data.ByteString.ByteString]@
         * 'Proto.Riak_Fields.vec'setValue' @:: Lens' DtValue (Data.Vector.Vector Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.mapValue' @:: Lens' DtValue [MapEntry]@
         * 'Proto.Riak_Fields.vec'mapValue' @:: Lens' DtValue (Data.Vector.Vector MapEntry)@
         * 'Proto.Riak_Fields.hllValue' @:: Lens' DtValue Data.Word.Word64@
         * 'Proto.Riak_Fields.maybe'hllValue' @:: Lens' DtValue (Prelude.Maybe Data.Word.Word64)@
         * 'Proto.Riak_Fields.gsetValue' @:: Lens' DtValue [Data.ByteString.ByteString]@
         * 'Proto.Riak_Fields.vec'gsetValue' @:: Lens' DtValue (Data.Vector.Vector Data.ByteString.ByteString)@ -}
data DtValue
  = DtValue'_constructor {_DtValue'counterValue :: !(Prelude.Maybe Data.Int.Int64),
                          _DtValue'setValue :: !(Data.Vector.Vector Data.ByteString.ByteString),
                          _DtValue'mapValue :: !(Data.Vector.Vector MapEntry),
                          _DtValue'hllValue :: !(Prelude.Maybe Data.Word.Word64),
                          _DtValue'gsetValue :: !(Data.Vector.Vector Data.ByteString.ByteString),
                          _DtValue'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show DtValue where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField DtValue "counterValue" Data.Int.Int64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtValue'counterValue
           (\ x__ y__ -> x__ {_DtValue'counterValue = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField DtValue "maybe'counterValue" (Prelude.Maybe Data.Int.Int64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtValue'counterValue
           (\ x__ y__ -> x__ {_DtValue'counterValue = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField DtValue "setValue" [Data.ByteString.ByteString] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtValue'setValue (\ x__ y__ -> x__ {_DtValue'setValue = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField DtValue "vec'setValue" (Data.Vector.Vector Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtValue'setValue (\ x__ y__ -> x__ {_DtValue'setValue = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField DtValue "mapValue" [MapEntry] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtValue'mapValue (\ x__ y__ -> x__ {_DtValue'mapValue = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField DtValue "vec'mapValue" (Data.Vector.Vector MapEntry) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtValue'mapValue (\ x__ y__ -> x__ {_DtValue'mapValue = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField DtValue "hllValue" Data.Word.Word64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtValue'hllValue (\ x__ y__ -> x__ {_DtValue'hllValue = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField DtValue "maybe'hllValue" (Prelude.Maybe Data.Word.Word64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtValue'hllValue (\ x__ y__ -> x__ {_DtValue'hllValue = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField DtValue "gsetValue" [Data.ByteString.ByteString] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtValue'gsetValue (\ x__ y__ -> x__ {_DtValue'gsetValue = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField DtValue "vec'gsetValue" (Data.Vector.Vector Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _DtValue'gsetValue (\ x__ y__ -> x__ {_DtValue'gsetValue = y__}))
        Prelude.id
instance Data.ProtoLens.Message DtValue where
  messageName _ = Data.Text.pack "DtValue"
  packedMessageDescriptor _
    = "\n\
      \\aDtValue\DC2#\n\
      \\rcounter_value\CAN\SOH \SOH(\DC2R\fcounterValue\DC2\ESC\n\
      \\tset_value\CAN\STX \ETX(\fR\bsetValue\DC2&\n\
      \\tmap_value\CAN\ETX \ETX(\v2\t.MapEntryR\bmapValue\DC2\ESC\n\
      \\thll_value\CAN\EOT \SOH(\EOTR\bhllValue\DC2\GS\n\
      \\n\
      \gset_value\CAN\ENQ \ETX(\fR\tgsetValue"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        counterValue__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "counter_value"
              (Data.ProtoLens.ScalarField Data.ProtoLens.SInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'counterValue")) ::
              Data.ProtoLens.FieldDescriptor DtValue
        setValue__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "set_value"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"setValue")) ::
              Data.ProtoLens.FieldDescriptor DtValue
        mapValue__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "map_value"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor MapEntry)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"mapValue")) ::
              Data.ProtoLens.FieldDescriptor DtValue
        hllValue__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "hll_value"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'hllValue")) ::
              Data.ProtoLens.FieldDescriptor DtValue
        gsetValue__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "gset_value"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"gsetValue")) ::
              Data.ProtoLens.FieldDescriptor DtValue
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, counterValue__field_descriptor),
           (Data.ProtoLens.Tag 2, setValue__field_descriptor),
           (Data.ProtoLens.Tag 3, mapValue__field_descriptor),
           (Data.ProtoLens.Tag 4, hllValue__field_descriptor),
           (Data.ProtoLens.Tag 5, gsetValue__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _DtValue'_unknownFields
        (\ x__ y__ -> x__ {_DtValue'_unknownFields = y__})
  defMessage
    = DtValue'_constructor
        {_DtValue'counterValue = Prelude.Nothing,
         _DtValue'setValue = Data.Vector.Generic.empty,
         _DtValue'mapValue = Data.Vector.Generic.empty,
         _DtValue'hllValue = Prelude.Nothing,
         _DtValue'gsetValue = Data.Vector.Generic.empty,
         _DtValue'_unknownFields = []}
  parseMessage
    = let
        loop ::
          DtValue
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld Data.ByteString.ByteString
             -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld MapEntry
                -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld Data.ByteString.ByteString
                   -> Data.ProtoLens.Encoding.Bytes.Parser DtValue
        loop x mutable'gsetValue mutable'mapValue mutable'setValue
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'gsetValue <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                            (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                               mutable'gsetValue)
                      frozen'mapValue <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                           (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                              mutable'mapValue)
                      frozen'setValue <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                           (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                              mutable'setValue)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields
                           (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'gsetValue")
                              frozen'gsetValue
                              (Lens.Family2.set
                                 (Data.ProtoLens.Field.field @"vec'mapValue")
                                 frozen'mapValue
                                 (Lens.Family2.set
                                    (Data.ProtoLens.Field.field @"vec'setValue")
                                    frozen'setValue
                                    x))))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Data.ProtoLens.Encoding.Bytes.wordToSignedInt64
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "counter_value"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"counterValue") y x)
                                  mutable'gsetValue
                                  mutable'mapValue
                                  mutable'setValue
                        18
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.getBytes
                                              (Prelude.fromIntegral len))
                                        "set_value"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'setValue y)
                                loop x mutable'gsetValue mutable'mapValue v
                        26
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "map_value"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'mapValue y)
                                loop x mutable'gsetValue v mutable'setValue
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       Data.ProtoLens.Encoding.Bytes.getVarInt "hll_value"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"hllValue") y x)
                                  mutable'gsetValue
                                  mutable'mapValue
                                  mutable'setValue
                        42
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.getBytes
                                              (Prelude.fromIntegral len))
                                        "gset_value"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'gsetValue y)
                                loop x v mutable'mapValue mutable'setValue
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'gsetValue
                                  mutable'mapValue
                                  mutable'setValue
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'gsetValue <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                     Data.ProtoLens.Encoding.Growing.new
              mutable'mapValue <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                    Data.ProtoLens.Encoding.Growing.new
              mutable'setValue <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                    Data.ProtoLens.Encoding.Growing.new
              loop
                Data.ProtoLens.defMessage
                mutable'gsetValue
                mutable'mapValue
                mutable'setValue)
          "DtValue"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view
                    (Data.ProtoLens.Field.field @"maybe'counterValue") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       ((Prelude..)
                          ((Prelude..)
                             Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                          Data.ProtoLens.Encoding.Bytes.signedInt64ToWord
                          _v))
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                   (\ _v
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                           ((\ bs
                               -> (Data.Monoid.<>)
                                    (Data.ProtoLens.Encoding.Bytes.putVarInt
                                       (Prelude.fromIntegral (Data.ByteString.length bs)))
                                    (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                              _v))
                   (Lens.Family2.view
                      (Data.ProtoLens.Field.field @"vec'setValue") _x))
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                      (\ _v
                         -> (Data.Monoid.<>)
                              (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                              ((Prelude..)
                                 (\ bs
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                 Data.ProtoLens.encodeMessage
                                 _v))
                      (Lens.Family2.view
                         (Data.ProtoLens.Field.field @"vec'mapValue") _x))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'hllValue") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt _v))
                      ((Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                            (\ _v
                               -> (Data.Monoid.<>)
                                    (Data.ProtoLens.Encoding.Bytes.putVarInt 42)
                                    ((\ bs
                                        -> (Data.Monoid.<>)
                                             (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                (Prelude.fromIntegral (Data.ByteString.length bs)))
                                             (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                       _v))
                            (Lens.Family2.view
                               (Data.ProtoLens.Field.field @"vec'gsetValue") _x))
                         (Data.ProtoLens.Encoding.Wire.buildFieldSet
                            (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))
instance Control.DeepSeq.NFData DtValue where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_DtValue'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_DtValue'counterValue x__)
                (Control.DeepSeq.deepseq
                   (_DtValue'setValue x__)
                   (Control.DeepSeq.deepseq
                      (_DtValue'mapValue x__)
                      (Control.DeepSeq.deepseq
                         (_DtValue'hllValue x__)
                         (Control.DeepSeq.deepseq (_DtValue'gsetValue x__) ())))))
{- | Fields :
     
         * 'Proto.Riak_Fields.adds' @:: Lens' GSetOp [Data.ByteString.ByteString]@
         * 'Proto.Riak_Fields.vec'adds' @:: Lens' GSetOp (Data.Vector.Vector Data.ByteString.ByteString)@ -}
data GSetOp
  = GSetOp'_constructor {_GSetOp'adds :: !(Data.Vector.Vector Data.ByteString.ByteString),
                         _GSetOp'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show GSetOp where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField GSetOp "adds" [Data.ByteString.ByteString] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _GSetOp'adds (\ x__ y__ -> x__ {_GSetOp'adds = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField GSetOp "vec'adds" (Data.Vector.Vector Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _GSetOp'adds (\ x__ y__ -> x__ {_GSetOp'adds = y__}))
        Prelude.id
instance Data.ProtoLens.Message GSetOp where
  messageName _ = Data.Text.pack "GSetOp"
  packedMessageDescriptor _
    = "\n\
      \\ACKGSetOp\DC2\DC2\n\
      \\EOTadds\CAN\SOH \ETX(\fR\EOTadds"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        adds__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "adds"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"adds")) ::
              Data.ProtoLens.FieldDescriptor GSetOp
      in
        Data.Map.fromList [(Data.ProtoLens.Tag 1, adds__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _GSetOp'_unknownFields
        (\ x__ y__ -> x__ {_GSetOp'_unknownFields = y__})
  defMessage
    = GSetOp'_constructor
        {_GSetOp'adds = Data.Vector.Generic.empty,
         _GSetOp'_unknownFields = []}
  parseMessage
    = let
        loop ::
          GSetOp
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld Data.ByteString.ByteString
             -> Data.ProtoLens.Encoding.Bytes.Parser GSetOp
        loop x mutable'adds
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'adds <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.unsafeFreeze mutable'adds)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields
                           (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'adds") frozen'adds x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.getBytes
                                              (Prelude.fromIntegral len))
                                        "adds"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'adds y)
                                loop x v
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'adds
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'adds <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage mutable'adds)
          "GSetOp"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                (\ _v
                   -> (Data.Monoid.<>)
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                        ((\ bs
                            -> (Data.Monoid.<>)
                                 (Data.ProtoLens.Encoding.Bytes.putVarInt
                                    (Prelude.fromIntegral (Data.ByteString.length bs)))
                                 (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           _v))
                (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'adds") _x))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData GSetOp where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_GSetOp'_unknownFields x__)
             (Control.DeepSeq.deepseq (_GSetOp'adds x__) ())
{- | Fields :
     
         * 'Proto.Riak_Fields.adds' @:: Lens' HllOp [Data.ByteString.ByteString]@
         * 'Proto.Riak_Fields.vec'adds' @:: Lens' HllOp (Data.Vector.Vector Data.ByteString.ByteString)@ -}
data HllOp
  = HllOp'_constructor {_HllOp'adds :: !(Data.Vector.Vector Data.ByteString.ByteString),
                        _HllOp'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show HllOp where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField HllOp "adds" [Data.ByteString.ByteString] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _HllOp'adds (\ x__ y__ -> x__ {_HllOp'adds = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField HllOp "vec'adds" (Data.Vector.Vector Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _HllOp'adds (\ x__ y__ -> x__ {_HllOp'adds = y__}))
        Prelude.id
instance Data.ProtoLens.Message HllOp where
  messageName _ = Data.Text.pack "HllOp"
  packedMessageDescriptor _
    = "\n\
      \\ENQHllOp\DC2\DC2\n\
      \\EOTadds\CAN\SOH \ETX(\fR\EOTadds"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        adds__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "adds"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"adds")) ::
              Data.ProtoLens.FieldDescriptor HllOp
      in
        Data.Map.fromList [(Data.ProtoLens.Tag 1, adds__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _HllOp'_unknownFields
        (\ x__ y__ -> x__ {_HllOp'_unknownFields = y__})
  defMessage
    = HllOp'_constructor
        {_HllOp'adds = Data.Vector.Generic.empty,
         _HllOp'_unknownFields = []}
  parseMessage
    = let
        loop ::
          HllOp
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld Data.ByteString.ByteString
             -> Data.ProtoLens.Encoding.Bytes.Parser HllOp
        loop x mutable'adds
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'adds <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.unsafeFreeze mutable'adds)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields
                           (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'adds") frozen'adds x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.getBytes
                                              (Prelude.fromIntegral len))
                                        "adds"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'adds y)
                                loop x v
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'adds
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'adds <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage mutable'adds)
          "HllOp"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                (\ _v
                   -> (Data.Monoid.<>)
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                        ((\ bs
                            -> (Data.Monoid.<>)
                                 (Data.ProtoLens.Encoding.Bytes.putVarInt
                                    (Prelude.fromIntegral (Data.ByteString.length bs)))
                                 (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           _v))
                (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'adds") _x))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData HllOp where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_HllOp'_unknownFields x__)
             (Control.DeepSeq.deepseq (_HllOp'adds x__) ())
{- | Fields :
     
         * 'Proto.Riak_Fields.field' @:: Lens' MapEntry MapField@
         * 'Proto.Riak_Fields.counterValue' @:: Lens' MapEntry Data.Int.Int64@
         * 'Proto.Riak_Fields.maybe'counterValue' @:: Lens' MapEntry (Prelude.Maybe Data.Int.Int64)@
         * 'Proto.Riak_Fields.setValue' @:: Lens' MapEntry [Data.ByteString.ByteString]@
         * 'Proto.Riak_Fields.vec'setValue' @:: Lens' MapEntry (Data.Vector.Vector Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.registerValue' @:: Lens' MapEntry Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'registerValue' @:: Lens' MapEntry (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.flagValue' @:: Lens' MapEntry Prelude.Bool@
         * 'Proto.Riak_Fields.maybe'flagValue' @:: Lens' MapEntry (Prelude.Maybe Prelude.Bool)@
         * 'Proto.Riak_Fields.mapValue' @:: Lens' MapEntry [MapEntry]@
         * 'Proto.Riak_Fields.vec'mapValue' @:: Lens' MapEntry (Data.Vector.Vector MapEntry)@ -}
data MapEntry
  = MapEntry'_constructor {_MapEntry'field :: !MapField,
                           _MapEntry'counterValue :: !(Prelude.Maybe Data.Int.Int64),
                           _MapEntry'setValue :: !(Data.Vector.Vector Data.ByteString.ByteString),
                           _MapEntry'registerValue :: !(Prelude.Maybe Data.ByteString.ByteString),
                           _MapEntry'flagValue :: !(Prelude.Maybe Prelude.Bool),
                           _MapEntry'mapValue :: !(Data.Vector.Vector MapEntry),
                           _MapEntry'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show MapEntry where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField MapEntry "field" MapField where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MapEntry'field (\ x__ y__ -> x__ {_MapEntry'field = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField MapEntry "counterValue" Data.Int.Int64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MapEntry'counterValue
           (\ x__ y__ -> x__ {_MapEntry'counterValue = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField MapEntry "maybe'counterValue" (Prelude.Maybe Data.Int.Int64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MapEntry'counterValue
           (\ x__ y__ -> x__ {_MapEntry'counterValue = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField MapEntry "setValue" [Data.ByteString.ByteString] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MapEntry'setValue (\ x__ y__ -> x__ {_MapEntry'setValue = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField MapEntry "vec'setValue" (Data.Vector.Vector Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MapEntry'setValue (\ x__ y__ -> x__ {_MapEntry'setValue = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField MapEntry "registerValue" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MapEntry'registerValue
           (\ x__ y__ -> x__ {_MapEntry'registerValue = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField MapEntry "maybe'registerValue" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MapEntry'registerValue
           (\ x__ y__ -> x__ {_MapEntry'registerValue = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField MapEntry "flagValue" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MapEntry'flagValue (\ x__ y__ -> x__ {_MapEntry'flagValue = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField MapEntry "maybe'flagValue" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MapEntry'flagValue (\ x__ y__ -> x__ {_MapEntry'flagValue = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField MapEntry "mapValue" [MapEntry] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MapEntry'mapValue (\ x__ y__ -> x__ {_MapEntry'mapValue = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField MapEntry "vec'mapValue" (Data.Vector.Vector MapEntry) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MapEntry'mapValue (\ x__ y__ -> x__ {_MapEntry'mapValue = y__}))
        Prelude.id
instance Data.ProtoLens.Message MapEntry where
  messageName _ = Data.Text.pack "MapEntry"
  packedMessageDescriptor _
    = "\n\
      \\bMapEntry\DC2\US\n\
      \\ENQfield\CAN\SOH \STX(\v2\t.MapFieldR\ENQfield\DC2#\n\
      \\rcounter_value\CAN\STX \SOH(\DC2R\fcounterValue\DC2\ESC\n\
      \\tset_value\CAN\ETX \ETX(\fR\bsetValue\DC2%\n\
      \\SOregister_value\CAN\EOT \SOH(\fR\rregisterValue\DC2\GS\n\
      \\n\
      \flag_value\CAN\ENQ \SOH(\bR\tflagValue\DC2&\n\
      \\tmap_value\CAN\ACK \ETX(\v2\t.MapEntryR\bmapValue"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        field__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "field"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor MapField)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"field")) ::
              Data.ProtoLens.FieldDescriptor MapEntry
        counterValue__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "counter_value"
              (Data.ProtoLens.ScalarField Data.ProtoLens.SInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'counterValue")) ::
              Data.ProtoLens.FieldDescriptor MapEntry
        setValue__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "set_value"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"setValue")) ::
              Data.ProtoLens.FieldDescriptor MapEntry
        registerValue__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "register_value"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'registerValue")) ::
              Data.ProtoLens.FieldDescriptor MapEntry
        flagValue__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "flag_value"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'flagValue")) ::
              Data.ProtoLens.FieldDescriptor MapEntry
        mapValue__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "map_value"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor MapEntry)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"mapValue")) ::
              Data.ProtoLens.FieldDescriptor MapEntry
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, field__field_descriptor),
           (Data.ProtoLens.Tag 2, counterValue__field_descriptor),
           (Data.ProtoLens.Tag 3, setValue__field_descriptor),
           (Data.ProtoLens.Tag 4, registerValue__field_descriptor),
           (Data.ProtoLens.Tag 5, flagValue__field_descriptor),
           (Data.ProtoLens.Tag 6, mapValue__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _MapEntry'_unknownFields
        (\ x__ y__ -> x__ {_MapEntry'_unknownFields = y__})
  defMessage
    = MapEntry'_constructor
        {_MapEntry'field = Data.ProtoLens.defMessage,
         _MapEntry'counterValue = Prelude.Nothing,
         _MapEntry'setValue = Data.Vector.Generic.empty,
         _MapEntry'registerValue = Prelude.Nothing,
         _MapEntry'flagValue = Prelude.Nothing,
         _MapEntry'mapValue = Data.Vector.Generic.empty,
         _MapEntry'_unknownFields = []}
  parseMessage
    = let
        loop ::
          MapEntry
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld MapEntry
                -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld Data.ByteString.ByteString
                   -> Data.ProtoLens.Encoding.Bytes.Parser MapEntry
        loop x required'field mutable'mapValue mutable'setValue
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'mapValue <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                           (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                              mutable'mapValue)
                      frozen'setValue <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                           (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                              mutable'setValue)
                      (let
                         missing = (if required'field then (:) "field" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields
                           (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'mapValue")
                              frozen'mapValue
                              (Lens.Family2.set
                                 (Data.ProtoLens.Field.field @"vec'setValue") frozen'setValue x)))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "field"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"field") y x)
                                  Prelude.False
                                  mutable'mapValue
                                  mutable'setValue
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Data.ProtoLens.Encoding.Bytes.wordToSignedInt64
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "counter_value"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"counterValue") y x)
                                  required'field
                                  mutable'mapValue
                                  mutable'setValue
                        26
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.getBytes
                                              (Prelude.fromIntegral len))
                                        "set_value"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'setValue y)
                                loop x required'field mutable'mapValue v
                        34
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "register_value"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"registerValue") y x)
                                  required'field
                                  mutable'mapValue
                                  mutable'setValue
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "flag_value"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"flagValue") y x)
                                  required'field
                                  mutable'mapValue
                                  mutable'setValue
                        50
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "map_value"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'mapValue y)
                                loop x required'field v mutable'setValue
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'field
                                  mutable'mapValue
                                  mutable'setValue
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'mapValue <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                    Data.ProtoLens.Encoding.Growing.new
              mutable'setValue <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                    Data.ProtoLens.Encoding.Growing.new
              loop
                Data.ProtoLens.defMessage
                Prelude.True
                mutable'mapValue
                mutable'setValue)
          "MapEntry"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((Prelude..)
                   (\ bs
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   Data.ProtoLens.encodeMessage
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"field") _x)))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'counterValue") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          ((Prelude..)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                             Data.ProtoLens.Encoding.Bytes.signedInt64ToWord
                             _v))
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                      (\ _v
                         -> (Data.Monoid.<>)
                              (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                              ((\ bs
                                  -> (Data.Monoid.<>)
                                       (Data.ProtoLens.Encoding.Bytes.putVarInt
                                          (Prelude.fromIntegral (Data.ByteString.length bs)))
                                       (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                 _v))
                      (Lens.Family2.view
                         (Data.ProtoLens.Field.field @"vec'setValue") _x))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'registerValue") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                                ((\ bs
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view
                                (Data.ProtoLens.Field.field @"maybe'flagValue") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (\ b -> if b then 1 else 0)
                                      _v))
                         ((Data.Monoid.<>)
                            (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                               (\ _v
                                  -> (Data.Monoid.<>)
                                       (Data.ProtoLens.Encoding.Bytes.putVarInt 50)
                                       ((Prelude..)
                                          (\ bs
                                             -> (Data.Monoid.<>)
                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                     (Prelude.fromIntegral
                                                        (Data.ByteString.length bs)))
                                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                          Data.ProtoLens.encodeMessage
                                          _v))
                               (Lens.Family2.view
                                  (Data.ProtoLens.Field.field @"vec'mapValue") _x))
                            (Data.ProtoLens.Encoding.Wire.buildFieldSet
                               (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))))
instance Control.DeepSeq.NFData MapEntry where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_MapEntry'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_MapEntry'field x__)
                (Control.DeepSeq.deepseq
                   (_MapEntry'counterValue x__)
                   (Control.DeepSeq.deepseq
                      (_MapEntry'setValue x__)
                      (Control.DeepSeq.deepseq
                         (_MapEntry'registerValue x__)
                         (Control.DeepSeq.deepseq
                            (_MapEntry'flagValue x__)
                            (Control.DeepSeq.deepseq (_MapEntry'mapValue x__) ()))))))
{- | Fields :
     
         * 'Proto.Riak_Fields.name' @:: Lens' MapField Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.type'' @:: Lens' MapField MapField'MapFieldType@ -}
data MapField
  = MapField'_constructor {_MapField'name :: !Data.ByteString.ByteString,
                           _MapField'type' :: !MapField'MapFieldType,
                           _MapField'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show MapField where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField MapField "name" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MapField'name (\ x__ y__ -> x__ {_MapField'name = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField MapField "type'" MapField'MapFieldType where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MapField'type' (\ x__ y__ -> x__ {_MapField'type' = y__}))
        Prelude.id
instance Data.ProtoLens.Message MapField where
  messageName _ = Data.Text.pack "MapField"
  packedMessageDescriptor _
    = "\n\
      \\bMapField\DC2\DC2\n\
      \\EOTname\CAN\SOH \STX(\fR\EOTname\DC2*\n\
      \\EOTtype\CAN\STX \STX(\SO2\SYN.MapField.MapFieldTypeR\EOTtype\"E\n\
      \\fMapFieldType\DC2\v\n\
      \\aCOUNTER\DLE\SOH\DC2\a\n\
      \\ETXSET\DLE\STX\DC2\f\n\
      \\bREGISTER\DLE\ETX\DC2\b\n\
      \\EOTFLAG\DLE\EOT\DC2\a\n\
      \\ETXMAP\DLE\ENQ"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        name__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "name"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"name")) ::
              Data.ProtoLens.FieldDescriptor MapField
        type'__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "type"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor MapField'MapFieldType)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"type'")) ::
              Data.ProtoLens.FieldDescriptor MapField
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, name__field_descriptor),
           (Data.ProtoLens.Tag 2, type'__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _MapField'_unknownFields
        (\ x__ y__ -> x__ {_MapField'_unknownFields = y__})
  defMessage
    = MapField'_constructor
        {_MapField'name = Data.ProtoLens.fieldDefault,
         _MapField'type' = Data.ProtoLens.fieldDefault,
         _MapField'_unknownFields = []}
  parseMessage
    = let
        loop ::
          MapField
          -> Prelude.Bool
             -> Prelude.Bool -> Data.ProtoLens.Encoding.Bytes.Parser MapField
        loop x required'name required'type'
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'name then (:) "name" else Prelude.id)
                               ((if required'type' then (:) "type" else Prelude.id) [])
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "name"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"name") y x)
                                  Prelude.False
                                  required'type'
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "type"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"type'") y x)
                                  required'name
                                  Prelude.False
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'name
                                  required'type'
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True Prelude.True)
          "MapField"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((\ bs
                    -> (Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"name") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                   ((Prelude..)
                      ((Prelude..)
                         Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                      Prelude.fromEnum
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"type'") _x)))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData MapField where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_MapField'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_MapField'name x__)
                (Control.DeepSeq.deepseq (_MapField'type' x__) ()))
data MapField'MapFieldType
  = MapField'COUNTER |
    MapField'SET |
    MapField'REGISTER |
    MapField'FLAG |
    MapField'MAP
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum MapField'MapFieldType where
  maybeToEnum 1 = Prelude.Just MapField'COUNTER
  maybeToEnum 2 = Prelude.Just MapField'SET
  maybeToEnum 3 = Prelude.Just MapField'REGISTER
  maybeToEnum 4 = Prelude.Just MapField'FLAG
  maybeToEnum 5 = Prelude.Just MapField'MAP
  maybeToEnum _ = Prelude.Nothing
  showEnum MapField'COUNTER = "COUNTER"
  showEnum MapField'SET = "SET"
  showEnum MapField'REGISTER = "REGISTER"
  showEnum MapField'FLAG = "FLAG"
  showEnum MapField'MAP = "MAP"
  readEnum k
    | (Prelude.==) k "COUNTER" = Prelude.Just MapField'COUNTER
    | (Prelude.==) k "SET" = Prelude.Just MapField'SET
    | (Prelude.==) k "REGISTER" = Prelude.Just MapField'REGISTER
    | (Prelude.==) k "FLAG" = Prelude.Just MapField'FLAG
    | (Prelude.==) k "MAP" = Prelude.Just MapField'MAP
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded MapField'MapFieldType where
  minBound = MapField'COUNTER
  maxBound = MapField'MAP
instance Prelude.Enum MapField'MapFieldType where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum MapFieldType: "
              (Prelude.show k__)))
        Prelude.id
        (Data.ProtoLens.maybeToEnum k__)
  fromEnum MapField'COUNTER = 1
  fromEnum MapField'SET = 2
  fromEnum MapField'REGISTER = 3
  fromEnum MapField'FLAG = 4
  fromEnum MapField'MAP = 5
  succ MapField'MAP
    = Prelude.error
        "MapField'MapFieldType.succ: bad argument MapField'MAP. This value would be out of bounds."
  succ MapField'COUNTER = MapField'SET
  succ MapField'SET = MapField'REGISTER
  succ MapField'REGISTER = MapField'FLAG
  succ MapField'FLAG = MapField'MAP
  pred MapField'COUNTER
    = Prelude.error
        "MapField'MapFieldType.pred: bad argument MapField'COUNTER. This value would be out of bounds."
  pred MapField'SET = MapField'COUNTER
  pred MapField'REGISTER = MapField'SET
  pred MapField'FLAG = MapField'REGISTER
  pred MapField'MAP = MapField'FLAG
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault MapField'MapFieldType where
  fieldDefault = MapField'COUNTER
instance Control.DeepSeq.NFData MapField'MapFieldType where
  rnf x__ = Prelude.seq x__ ()
{- | Fields :
     
         * 'Proto.Riak_Fields.removes' @:: Lens' MapOp [MapField]@
         * 'Proto.Riak_Fields.vec'removes' @:: Lens' MapOp (Data.Vector.Vector MapField)@
         * 'Proto.Riak_Fields.updates' @:: Lens' MapOp [MapUpdate]@
         * 'Proto.Riak_Fields.vec'updates' @:: Lens' MapOp (Data.Vector.Vector MapUpdate)@ -}
data MapOp
  = MapOp'_constructor {_MapOp'removes :: !(Data.Vector.Vector MapField),
                        _MapOp'updates :: !(Data.Vector.Vector MapUpdate),
                        _MapOp'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show MapOp where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField MapOp "removes" [MapField] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MapOp'removes (\ x__ y__ -> x__ {_MapOp'removes = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField MapOp "vec'removes" (Data.Vector.Vector MapField) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MapOp'removes (\ x__ y__ -> x__ {_MapOp'removes = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField MapOp "updates" [MapUpdate] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MapOp'updates (\ x__ y__ -> x__ {_MapOp'updates = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField MapOp "vec'updates" (Data.Vector.Vector MapUpdate) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MapOp'updates (\ x__ y__ -> x__ {_MapOp'updates = y__}))
        Prelude.id
instance Data.ProtoLens.Message MapOp where
  messageName _ = Data.Text.pack "MapOp"
  packedMessageDescriptor _
    = "\n\
      \\ENQMapOp\DC2#\n\
      \\aremoves\CAN\SOH \ETX(\v2\t.MapFieldR\aremoves\DC2$\n\
      \\aupdates\CAN\STX \ETX(\v2\n\
      \.MapUpdateR\aupdates"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        removes__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "removes"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor MapField)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"removes")) ::
              Data.ProtoLens.FieldDescriptor MapOp
        updates__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "updates"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor MapUpdate)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"updates")) ::
              Data.ProtoLens.FieldDescriptor MapOp
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, removes__field_descriptor),
           (Data.ProtoLens.Tag 2, updates__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _MapOp'_unknownFields
        (\ x__ y__ -> x__ {_MapOp'_unknownFields = y__})
  defMessage
    = MapOp'_constructor
        {_MapOp'removes = Data.Vector.Generic.empty,
         _MapOp'updates = Data.Vector.Generic.empty,
         _MapOp'_unknownFields = []}
  parseMessage
    = let
        loop ::
          MapOp
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld MapField
             -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld MapUpdate
                -> Data.ProtoLens.Encoding.Bytes.Parser MapOp
        loop x mutable'removes mutable'updates
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'removes <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                          (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                             mutable'removes)
                      frozen'updates <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                          (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                             mutable'updates)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields
                           (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'removes")
                              frozen'removes
                              (Lens.Family2.set
                                 (Data.ProtoLens.Field.field @"vec'updates") frozen'updates x)))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "removes"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'removes y)
                                loop x v mutable'updates
                        18
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "updates"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'updates y)
                                loop x mutable'removes v
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'removes
                                  mutable'updates
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'removes <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                   Data.ProtoLens.Encoding.Growing.new
              mutable'updates <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                   Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage mutable'removes mutable'updates)
          "MapOp"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                (\ _v
                   -> (Data.Monoid.<>)
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                        ((Prelude..)
                           (\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Data.ProtoLens.encodeMessage
                           _v))
                (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'removes") _x))
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                   (\ _v
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                           ((Prelude..)
                              (\ bs
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                         (Prelude.fromIntegral (Data.ByteString.length bs)))
                                      (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                              Data.ProtoLens.encodeMessage
                              _v))
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'updates") _x))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData MapOp where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_MapOp'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_MapOp'removes x__)
                (Control.DeepSeq.deepseq (_MapOp'updates x__) ()))
{- | Fields :
     
         * 'Proto.Riak_Fields.field' @:: Lens' MapUpdate MapField@
         * 'Proto.Riak_Fields.counterOp' @:: Lens' MapUpdate CounterOp@
         * 'Proto.Riak_Fields.maybe'counterOp' @:: Lens' MapUpdate (Prelude.Maybe CounterOp)@
         * 'Proto.Riak_Fields.setOp' @:: Lens' MapUpdate SetOp@
         * 'Proto.Riak_Fields.maybe'setOp' @:: Lens' MapUpdate (Prelude.Maybe SetOp)@
         * 'Proto.Riak_Fields.registerOp' @:: Lens' MapUpdate Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'registerOp' @:: Lens' MapUpdate (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.flagOp' @:: Lens' MapUpdate MapUpdate'FlagOp@
         * 'Proto.Riak_Fields.maybe'flagOp' @:: Lens' MapUpdate (Prelude.Maybe MapUpdate'FlagOp)@
         * 'Proto.Riak_Fields.mapOp' @:: Lens' MapUpdate MapOp@
         * 'Proto.Riak_Fields.maybe'mapOp' @:: Lens' MapUpdate (Prelude.Maybe MapOp)@ -}
data MapUpdate
  = MapUpdate'_constructor {_MapUpdate'field :: !MapField,
                            _MapUpdate'counterOp :: !(Prelude.Maybe CounterOp),
                            _MapUpdate'setOp :: !(Prelude.Maybe SetOp),
                            _MapUpdate'registerOp :: !(Prelude.Maybe Data.ByteString.ByteString),
                            _MapUpdate'flagOp :: !(Prelude.Maybe MapUpdate'FlagOp),
                            _MapUpdate'mapOp :: !(Prelude.Maybe MapOp),
                            _MapUpdate'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show MapUpdate where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField MapUpdate "field" MapField where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MapUpdate'field (\ x__ y__ -> x__ {_MapUpdate'field = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField MapUpdate "counterOp" CounterOp where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MapUpdate'counterOp
           (\ x__ y__ -> x__ {_MapUpdate'counterOp = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField MapUpdate "maybe'counterOp" (Prelude.Maybe CounterOp) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MapUpdate'counterOp
           (\ x__ y__ -> x__ {_MapUpdate'counterOp = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField MapUpdate "setOp" SetOp where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MapUpdate'setOp (\ x__ y__ -> x__ {_MapUpdate'setOp = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField MapUpdate "maybe'setOp" (Prelude.Maybe SetOp) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MapUpdate'setOp (\ x__ y__ -> x__ {_MapUpdate'setOp = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField MapUpdate "registerOp" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MapUpdate'registerOp
           (\ x__ y__ -> x__ {_MapUpdate'registerOp = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField MapUpdate "maybe'registerOp" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MapUpdate'registerOp
           (\ x__ y__ -> x__ {_MapUpdate'registerOp = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField MapUpdate "flagOp" MapUpdate'FlagOp where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MapUpdate'flagOp (\ x__ y__ -> x__ {_MapUpdate'flagOp = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField MapUpdate "maybe'flagOp" (Prelude.Maybe MapUpdate'FlagOp) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MapUpdate'flagOp (\ x__ y__ -> x__ {_MapUpdate'flagOp = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField MapUpdate "mapOp" MapOp where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MapUpdate'mapOp (\ x__ y__ -> x__ {_MapUpdate'mapOp = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField MapUpdate "maybe'mapOp" (Prelude.Maybe MapOp) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _MapUpdate'mapOp (\ x__ y__ -> x__ {_MapUpdate'mapOp = y__}))
        Prelude.id
instance Data.ProtoLens.Message MapUpdate where
  messageName _ = Data.Text.pack "MapUpdate"
  packedMessageDescriptor _
    = "\n\
      \\tMapUpdate\DC2\US\n\
      \\ENQfield\CAN\SOH \STX(\v2\t.MapFieldR\ENQfield\DC2)\n\
      \\n\
      \counter_op\CAN\STX \SOH(\v2\n\
      \.CounterOpR\tcounterOp\DC2\GS\n\
      \\ACKset_op\CAN\ETX \SOH(\v2\ACK.SetOpR\ENQsetOp\DC2\US\n\
      \\vregister_op\CAN\EOT \SOH(\fR\n\
      \registerOp\DC2*\n\
      \\aflag_op\CAN\ENQ \SOH(\SO2\DC1.MapUpdate.FlagOpR\ACKflagOp\DC2\GS\n\
      \\ACKmap_op\CAN\ACK \SOH(\v2\ACK.MapOpR\ENQmapOp\"!\n\
      \\ACKFlagOp\DC2\n\
      \\n\
      \\ACKENABLE\DLE\SOH\DC2\v\n\
      \\aDISABLE\DLE\STX"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        field__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "field"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor MapField)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"field")) ::
              Data.ProtoLens.FieldDescriptor MapUpdate
        counterOp__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "counter_op"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor CounterOp)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'counterOp")) ::
              Data.ProtoLens.FieldDescriptor MapUpdate
        setOp__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "set_op"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor SetOp)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'setOp")) ::
              Data.ProtoLens.FieldDescriptor MapUpdate
        registerOp__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "register_op"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'registerOp")) ::
              Data.ProtoLens.FieldDescriptor MapUpdate
        flagOp__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "flag_op"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor MapUpdate'FlagOp)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'flagOp")) ::
              Data.ProtoLens.FieldDescriptor MapUpdate
        mapOp__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "map_op"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor MapOp)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'mapOp")) ::
              Data.ProtoLens.FieldDescriptor MapUpdate
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, field__field_descriptor),
           (Data.ProtoLens.Tag 2, counterOp__field_descriptor),
           (Data.ProtoLens.Tag 3, setOp__field_descriptor),
           (Data.ProtoLens.Tag 4, registerOp__field_descriptor),
           (Data.ProtoLens.Tag 5, flagOp__field_descriptor),
           (Data.ProtoLens.Tag 6, mapOp__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _MapUpdate'_unknownFields
        (\ x__ y__ -> x__ {_MapUpdate'_unknownFields = y__})
  defMessage
    = MapUpdate'_constructor
        {_MapUpdate'field = Data.ProtoLens.defMessage,
         _MapUpdate'counterOp = Prelude.Nothing,
         _MapUpdate'setOp = Prelude.Nothing,
         _MapUpdate'registerOp = Prelude.Nothing,
         _MapUpdate'flagOp = Prelude.Nothing,
         _MapUpdate'mapOp = Prelude.Nothing, _MapUpdate'_unknownFields = []}
  parseMessage
    = let
        loop ::
          MapUpdate
          -> Prelude.Bool -> Data.ProtoLens.Encoding.Bytes.Parser MapUpdate
        loop x required'field
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing = (if required'field then (:) "field" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "field"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"field") y x)
                                  Prelude.False
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "counter_op"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"counterOp") y x)
                                  required'field
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "set_op"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"setOp") y x)
                                  required'field
                        34
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "register_op"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"registerOp") y x)
                                  required'field
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "flag_op"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"flagOp") y x)
                                  required'field
                        50
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "map_op"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"mapOp") y x)
                                  required'field
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'field
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True) "MapUpdate"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((Prelude..)
                   (\ bs
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   Data.ProtoLens.encodeMessage
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"field") _x)))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'counterOp") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((Prelude..)
                             (\ bs
                                -> (Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                        (Prelude.fromIntegral (Data.ByteString.length bs)))
                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             Data.ProtoLens.encodeMessage
                             _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'setOp") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                             ((Prelude..)
                                (\ bs
                                   -> (Data.Monoid.<>)
                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                           (Prelude.fromIntegral (Data.ByteString.length bs)))
                                        (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                Data.ProtoLens.encodeMessage
                                _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'registerOp") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                                ((\ bs
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'flagOp") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      ((Prelude..)
                                         Data.ProtoLens.Encoding.Bytes.putVarInt
                                         Prelude.fromIntegral)
                                      Prelude.fromEnum
                                      _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'mapOp") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 50)
                                      ((Prelude..)
                                         (\ bs
                                            -> (Data.Monoid.<>)
                                                 (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                    (Prelude.fromIntegral
                                                       (Data.ByteString.length bs)))
                                                 (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                         Data.ProtoLens.encodeMessage
                                         _v))
                            (Data.ProtoLens.Encoding.Wire.buildFieldSet
                               (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))))
instance Control.DeepSeq.NFData MapUpdate where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_MapUpdate'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_MapUpdate'field x__)
                (Control.DeepSeq.deepseq
                   (_MapUpdate'counterOp x__)
                   (Control.DeepSeq.deepseq
                      (_MapUpdate'setOp x__)
                      (Control.DeepSeq.deepseq
                         (_MapUpdate'registerOp x__)
                         (Control.DeepSeq.deepseq
                            (_MapUpdate'flagOp x__)
                            (Control.DeepSeq.deepseq (_MapUpdate'mapOp x__) ()))))))
data MapUpdate'FlagOp
  = MapUpdate'ENABLE | MapUpdate'DISABLE
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum MapUpdate'FlagOp where
  maybeToEnum 1 = Prelude.Just MapUpdate'ENABLE
  maybeToEnum 2 = Prelude.Just MapUpdate'DISABLE
  maybeToEnum _ = Prelude.Nothing
  showEnum MapUpdate'ENABLE = "ENABLE"
  showEnum MapUpdate'DISABLE = "DISABLE"
  readEnum k
    | (Prelude.==) k "ENABLE" = Prelude.Just MapUpdate'ENABLE
    | (Prelude.==) k "DISABLE" = Prelude.Just MapUpdate'DISABLE
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded MapUpdate'FlagOp where
  minBound = MapUpdate'ENABLE
  maxBound = MapUpdate'DISABLE
instance Prelude.Enum MapUpdate'FlagOp where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum FlagOp: " (Prelude.show k__)))
        Prelude.id
        (Data.ProtoLens.maybeToEnum k__)
  fromEnum MapUpdate'ENABLE = 1
  fromEnum MapUpdate'DISABLE = 2
  succ MapUpdate'DISABLE
    = Prelude.error
        "MapUpdate'FlagOp.succ: bad argument MapUpdate'DISABLE. This value would be out of bounds."
  succ MapUpdate'ENABLE = MapUpdate'DISABLE
  pred MapUpdate'ENABLE
    = Prelude.error
        "MapUpdate'FlagOp.pred: bad argument MapUpdate'ENABLE. This value would be out of bounds."
  pred MapUpdate'DISABLE = MapUpdate'ENABLE
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault MapUpdate'FlagOp where
  fieldDefault = MapUpdate'ENABLE
instance Control.DeepSeq.NFData MapUpdate'FlagOp where
  rnf x__ = Prelude.seq x__ ()
{- | Fields :
     
         * 'Proto.Riak_Fields.user' @:: Lens' RpbAuthReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.password' @:: Lens' RpbAuthReq Data.ByteString.ByteString@ -}
data RpbAuthReq
  = RpbAuthReq'_constructor {_RpbAuthReq'user :: !Data.ByteString.ByteString,
                             _RpbAuthReq'password :: !Data.ByteString.ByteString,
                             _RpbAuthReq'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbAuthReq where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbAuthReq "user" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbAuthReq'user (\ x__ y__ -> x__ {_RpbAuthReq'user = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbAuthReq "password" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbAuthReq'password
           (\ x__ y__ -> x__ {_RpbAuthReq'password = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbAuthReq where
  messageName _ = Data.Text.pack "RpbAuthReq"
  packedMessageDescriptor _
    = "\n\
      \\n\
      \RpbAuthReq\DC2\DC2\n\
      \\EOTuser\CAN\SOH \STX(\fR\EOTuser\DC2\SUB\n\
      \\bpassword\CAN\STX \STX(\fR\bpassword"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        user__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "user"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"user")) ::
              Data.ProtoLens.FieldDescriptor RpbAuthReq
        password__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "password"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"password")) ::
              Data.ProtoLens.FieldDescriptor RpbAuthReq
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, user__field_descriptor),
           (Data.ProtoLens.Tag 2, password__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbAuthReq'_unknownFields
        (\ x__ y__ -> x__ {_RpbAuthReq'_unknownFields = y__})
  defMessage
    = RpbAuthReq'_constructor
        {_RpbAuthReq'user = Data.ProtoLens.fieldDefault,
         _RpbAuthReq'password = Data.ProtoLens.fieldDefault,
         _RpbAuthReq'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbAuthReq
          -> Prelude.Bool
             -> Prelude.Bool -> Data.ProtoLens.Encoding.Bytes.Parser RpbAuthReq
        loop x required'password required'user
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'password then (:) "password" else Prelude.id)
                               ((if required'user then (:) "user" else Prelude.id) [])
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "user"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"user") y x)
                                  required'password
                                  Prelude.False
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "password"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"password") y x)
                                  Prelude.False
                                  required'user
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'password
                                  required'user
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True Prelude.True)
          "RpbAuthReq"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((\ bs
                    -> (Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"user") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                   ((\ bs
                       -> (Data.Monoid.<>)
                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                               (Prelude.fromIntegral (Data.ByteString.length bs)))
                            (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"password") _x)))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData RpbAuthReq where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbAuthReq'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_RpbAuthReq'user x__)
                (Control.DeepSeq.deepseq (_RpbAuthReq'password x__) ()))
{- | Fields :
      -}
data RpbAuthResp
  = RpbAuthResp'_constructor {_RpbAuthResp'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbAuthResp where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message RpbAuthResp where
  messageName _ = Data.Text.pack "RpbAuthResp"
  packedMessageDescriptor _
    = "\n\
      \\vRpbAuthResp"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag = let in Data.Map.fromList []
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbAuthResp'_unknownFields
        (\ x__ y__ -> x__ {_RpbAuthResp'_unknownFields = y__})
  defMessage
    = RpbAuthResp'_constructor {_RpbAuthResp'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbAuthResp -> Data.ProtoLens.Encoding.Bytes.Parser RpbAuthResp
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of {
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x) }
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "RpbAuthResp"
  buildMessage
    = \ _x
        -> Data.ProtoLens.Encoding.Wire.buildFieldSet
             (Lens.Family2.view Data.ProtoLens.unknownFields _x)
instance Control.DeepSeq.NFData RpbAuthResp where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq (_RpbAuthResp'_unknownFields x__) ()
{- | Fields :
     
         * 'Proto.Riak_Fields.partition' @:: Lens' RpbBucketKeyPreflistItem Data.Int.Int64@
         * 'Proto.Riak_Fields.node' @:: Lens' RpbBucketKeyPreflistItem Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.primary' @:: Lens' RpbBucketKeyPreflistItem Prelude.Bool@ -}
data RpbBucketKeyPreflistItem
  = RpbBucketKeyPreflistItem'_constructor {_RpbBucketKeyPreflistItem'partition :: !Data.Int.Int64,
                                           _RpbBucketKeyPreflistItem'node :: !Data.ByteString.ByteString,
                                           _RpbBucketKeyPreflistItem'primary :: !Prelude.Bool,
                                           _RpbBucketKeyPreflistItem'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbBucketKeyPreflistItem where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbBucketKeyPreflistItem "partition" Data.Int.Int64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketKeyPreflistItem'partition
           (\ x__ y__ -> x__ {_RpbBucketKeyPreflistItem'partition = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbBucketKeyPreflistItem "node" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketKeyPreflistItem'node
           (\ x__ y__ -> x__ {_RpbBucketKeyPreflistItem'node = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbBucketKeyPreflistItem "primary" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketKeyPreflistItem'primary
           (\ x__ y__ -> x__ {_RpbBucketKeyPreflistItem'primary = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbBucketKeyPreflistItem where
  messageName _ = Data.Text.pack "RpbBucketKeyPreflistItem"
  packedMessageDescriptor _
    = "\n\
      \\CANRpbBucketKeyPreflistItem\DC2\FS\n\
      \\tpartition\CAN\SOH \STX(\ETXR\tpartition\DC2\DC2\n\
      \\EOTnode\CAN\STX \STX(\fR\EOTnode\DC2\CAN\n\
      \\aprimary\CAN\ETX \STX(\bR\aprimary"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        partition__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "partition"
              (Data.ProtoLens.ScalarField Data.ProtoLens.Int64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"partition")) ::
              Data.ProtoLens.FieldDescriptor RpbBucketKeyPreflistItem
        node__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "node"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"node")) ::
              Data.ProtoLens.FieldDescriptor RpbBucketKeyPreflistItem
        primary__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "primary"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"primary")) ::
              Data.ProtoLens.FieldDescriptor RpbBucketKeyPreflistItem
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, partition__field_descriptor),
           (Data.ProtoLens.Tag 2, node__field_descriptor),
           (Data.ProtoLens.Tag 3, primary__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbBucketKeyPreflistItem'_unknownFields
        (\ x__ y__ -> x__ {_RpbBucketKeyPreflistItem'_unknownFields = y__})
  defMessage
    = RpbBucketKeyPreflistItem'_constructor
        {_RpbBucketKeyPreflistItem'partition = Data.ProtoLens.fieldDefault,
         _RpbBucketKeyPreflistItem'node = Data.ProtoLens.fieldDefault,
         _RpbBucketKeyPreflistItem'primary = Data.ProtoLens.fieldDefault,
         _RpbBucketKeyPreflistItem'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbBucketKeyPreflistItem
          -> Prelude.Bool
             -> Prelude.Bool
                -> Prelude.Bool
                   -> Data.ProtoLens.Encoding.Bytes.Parser RpbBucketKeyPreflistItem
        loop x required'node required'partition required'primary
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'node then (:) "node" else Prelude.id)
                               ((if required'partition then (:) "partition" else Prelude.id)
                                  ((if required'primary then (:) "primary" else Prelude.id) []))
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "partition"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"partition") y x)
                                  required'node
                                  Prelude.False
                                  required'primary
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "node"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"node") y x)
                                  Prelude.False
                                  required'partition
                                  required'primary
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "primary"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"primary") y x)
                                  required'node
                                  required'partition
                                  Prelude.False
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'node
                                  required'partition
                                  required'primary
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop
                Data.ProtoLens.defMessage Prelude.True Prelude.True Prelude.True)
          "RpbBucketKeyPreflistItem"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                ((Prelude..)
                   Data.ProtoLens.Encoding.Bytes.putVarInt
                   Prelude.fromIntegral
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"partition") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                   ((\ bs
                       -> (Data.Monoid.<>)
                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                               (Prelude.fromIntegral (Data.ByteString.length bs)))
                            (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"node") _x)))
                ((Data.Monoid.<>)
                   ((Data.Monoid.<>)
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                      ((Prelude..)
                         Data.ProtoLens.Encoding.Bytes.putVarInt
                         (\ b -> if b then 1 else 0)
                         (Lens.Family2.view (Data.ProtoLens.Field.field @"primary") _x)))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData RpbBucketKeyPreflistItem where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbBucketKeyPreflistItem'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_RpbBucketKeyPreflistItem'partition x__)
                (Control.DeepSeq.deepseq
                   (_RpbBucketKeyPreflistItem'node x__)
                   (Control.DeepSeq.deepseq
                      (_RpbBucketKeyPreflistItem'primary x__) ())))
{- | Fields :
     
         * 'Proto.Riak_Fields.nVal' @:: Lens' RpbBucketProps Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'nVal' @:: Lens' RpbBucketProps (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.allowMult' @:: Lens' RpbBucketProps Prelude.Bool@
         * 'Proto.Riak_Fields.maybe'allowMult' @:: Lens' RpbBucketProps (Prelude.Maybe Prelude.Bool)@
         * 'Proto.Riak_Fields.lastWriteWins' @:: Lens' RpbBucketProps Prelude.Bool@
         * 'Proto.Riak_Fields.maybe'lastWriteWins' @:: Lens' RpbBucketProps (Prelude.Maybe Prelude.Bool)@
         * 'Proto.Riak_Fields.precommit' @:: Lens' RpbBucketProps [RpbCommitHook]@
         * 'Proto.Riak_Fields.vec'precommit' @:: Lens' RpbBucketProps (Data.Vector.Vector RpbCommitHook)@
         * 'Proto.Riak_Fields.hasPrecommit' @:: Lens' RpbBucketProps Prelude.Bool@
         * 'Proto.Riak_Fields.maybe'hasPrecommit' @:: Lens' RpbBucketProps (Prelude.Maybe Prelude.Bool)@
         * 'Proto.Riak_Fields.postcommit' @:: Lens' RpbBucketProps [RpbCommitHook]@
         * 'Proto.Riak_Fields.vec'postcommit' @:: Lens' RpbBucketProps (Data.Vector.Vector RpbCommitHook)@
         * 'Proto.Riak_Fields.hasPostcommit' @:: Lens' RpbBucketProps Prelude.Bool@
         * 'Proto.Riak_Fields.maybe'hasPostcommit' @:: Lens' RpbBucketProps (Prelude.Maybe Prelude.Bool)@
         * 'Proto.Riak_Fields.chashKeyfun' @:: Lens' RpbBucketProps RpbModFun@
         * 'Proto.Riak_Fields.maybe'chashKeyfun' @:: Lens' RpbBucketProps (Prelude.Maybe RpbModFun)@
         * 'Proto.Riak_Fields.linkfun' @:: Lens' RpbBucketProps RpbModFun@
         * 'Proto.Riak_Fields.maybe'linkfun' @:: Lens' RpbBucketProps (Prelude.Maybe RpbModFun)@
         * 'Proto.Riak_Fields.oldVclock' @:: Lens' RpbBucketProps Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'oldVclock' @:: Lens' RpbBucketProps (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.youngVclock' @:: Lens' RpbBucketProps Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'youngVclock' @:: Lens' RpbBucketProps (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.bigVclock' @:: Lens' RpbBucketProps Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'bigVclock' @:: Lens' RpbBucketProps (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.smallVclock' @:: Lens' RpbBucketProps Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'smallVclock' @:: Lens' RpbBucketProps (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.pr' @:: Lens' RpbBucketProps Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'pr' @:: Lens' RpbBucketProps (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.r' @:: Lens' RpbBucketProps Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'r' @:: Lens' RpbBucketProps (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.w' @:: Lens' RpbBucketProps Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'w' @:: Lens' RpbBucketProps (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.pw' @:: Lens' RpbBucketProps Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'pw' @:: Lens' RpbBucketProps (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.dw' @:: Lens' RpbBucketProps Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'dw' @:: Lens' RpbBucketProps (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.rw' @:: Lens' RpbBucketProps Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'rw' @:: Lens' RpbBucketProps (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.basicQuorum' @:: Lens' RpbBucketProps Prelude.Bool@
         * 'Proto.Riak_Fields.maybe'basicQuorum' @:: Lens' RpbBucketProps (Prelude.Maybe Prelude.Bool)@
         * 'Proto.Riak_Fields.notfoundOk' @:: Lens' RpbBucketProps Prelude.Bool@
         * 'Proto.Riak_Fields.maybe'notfoundOk' @:: Lens' RpbBucketProps (Prelude.Maybe Prelude.Bool)@
         * 'Proto.Riak_Fields.backend' @:: Lens' RpbBucketProps Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'backend' @:: Lens' RpbBucketProps (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.search' @:: Lens' RpbBucketProps Prelude.Bool@
         * 'Proto.Riak_Fields.maybe'search' @:: Lens' RpbBucketProps (Prelude.Maybe Prelude.Bool)@
         * 'Proto.Riak_Fields.repl' @:: Lens' RpbBucketProps RpbBucketProps'RpbReplMode@
         * 'Proto.Riak_Fields.maybe'repl' @:: Lens' RpbBucketProps (Prelude.Maybe RpbBucketProps'RpbReplMode)@
         * 'Proto.Riak_Fields.searchIndex' @:: Lens' RpbBucketProps Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'searchIndex' @:: Lens' RpbBucketProps (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.datatype' @:: Lens' RpbBucketProps Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'datatype' @:: Lens' RpbBucketProps (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.consistent' @:: Lens' RpbBucketProps Prelude.Bool@
         * 'Proto.Riak_Fields.maybe'consistent' @:: Lens' RpbBucketProps (Prelude.Maybe Prelude.Bool)@
         * 'Proto.Riak_Fields.writeOnce' @:: Lens' RpbBucketProps Prelude.Bool@
         * 'Proto.Riak_Fields.maybe'writeOnce' @:: Lens' RpbBucketProps (Prelude.Maybe Prelude.Bool)@
         * 'Proto.Riak_Fields.hllPrecision' @:: Lens' RpbBucketProps Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'hllPrecision' @:: Lens' RpbBucketProps (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.ttl' @:: Lens' RpbBucketProps Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'ttl' @:: Lens' RpbBucketProps (Prelude.Maybe Data.Word.Word32)@ -}
data RpbBucketProps
  = RpbBucketProps'_constructor {_RpbBucketProps'nVal :: !(Prelude.Maybe Data.Word.Word32),
                                 _RpbBucketProps'allowMult :: !(Prelude.Maybe Prelude.Bool),
                                 _RpbBucketProps'lastWriteWins :: !(Prelude.Maybe Prelude.Bool),
                                 _RpbBucketProps'precommit :: !(Data.Vector.Vector RpbCommitHook),
                                 _RpbBucketProps'hasPrecommit :: !(Prelude.Maybe Prelude.Bool),
                                 _RpbBucketProps'postcommit :: !(Data.Vector.Vector RpbCommitHook),
                                 _RpbBucketProps'hasPostcommit :: !(Prelude.Maybe Prelude.Bool),
                                 _RpbBucketProps'chashKeyfun :: !(Prelude.Maybe RpbModFun),
                                 _RpbBucketProps'linkfun :: !(Prelude.Maybe RpbModFun),
                                 _RpbBucketProps'oldVclock :: !(Prelude.Maybe Data.Word.Word32),
                                 _RpbBucketProps'youngVclock :: !(Prelude.Maybe Data.Word.Word32),
                                 _RpbBucketProps'bigVclock :: !(Prelude.Maybe Data.Word.Word32),
                                 _RpbBucketProps'smallVclock :: !(Prelude.Maybe Data.Word.Word32),
                                 _RpbBucketProps'pr :: !(Prelude.Maybe Data.Word.Word32),
                                 _RpbBucketProps'r :: !(Prelude.Maybe Data.Word.Word32),
                                 _RpbBucketProps'w :: !(Prelude.Maybe Data.Word.Word32),
                                 _RpbBucketProps'pw :: !(Prelude.Maybe Data.Word.Word32),
                                 _RpbBucketProps'dw :: !(Prelude.Maybe Data.Word.Word32),
                                 _RpbBucketProps'rw :: !(Prelude.Maybe Data.Word.Word32),
                                 _RpbBucketProps'basicQuorum :: !(Prelude.Maybe Prelude.Bool),
                                 _RpbBucketProps'notfoundOk :: !(Prelude.Maybe Prelude.Bool),
                                 _RpbBucketProps'backend :: !(Prelude.Maybe Data.ByteString.ByteString),
                                 _RpbBucketProps'search :: !(Prelude.Maybe Prelude.Bool),
                                 _RpbBucketProps'repl :: !(Prelude.Maybe RpbBucketProps'RpbReplMode),
                                 _RpbBucketProps'searchIndex :: !(Prelude.Maybe Data.ByteString.ByteString),
                                 _RpbBucketProps'datatype :: !(Prelude.Maybe Data.ByteString.ByteString),
                                 _RpbBucketProps'consistent :: !(Prelude.Maybe Prelude.Bool),
                                 _RpbBucketProps'writeOnce :: !(Prelude.Maybe Prelude.Bool),
                                 _RpbBucketProps'hllPrecision :: !(Prelude.Maybe Data.Word.Word32),
                                 _RpbBucketProps'ttl :: !(Prelude.Maybe Data.Word.Word32),
                                 _RpbBucketProps'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbBucketProps where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbBucketProps "nVal" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'nVal
           (\ x__ y__ -> x__ {_RpbBucketProps'nVal = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbBucketProps "maybe'nVal" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'nVal
           (\ x__ y__ -> x__ {_RpbBucketProps'nVal = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbBucketProps "allowMult" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'allowMult
           (\ x__ y__ -> x__ {_RpbBucketProps'allowMult = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbBucketProps "maybe'allowMult" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'allowMult
           (\ x__ y__ -> x__ {_RpbBucketProps'allowMult = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbBucketProps "lastWriteWins" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'lastWriteWins
           (\ x__ y__ -> x__ {_RpbBucketProps'lastWriteWins = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbBucketProps "maybe'lastWriteWins" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'lastWriteWins
           (\ x__ y__ -> x__ {_RpbBucketProps'lastWriteWins = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbBucketProps "precommit" [RpbCommitHook] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'precommit
           (\ x__ y__ -> x__ {_RpbBucketProps'precommit = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField RpbBucketProps "vec'precommit" (Data.Vector.Vector RpbCommitHook) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'precommit
           (\ x__ y__ -> x__ {_RpbBucketProps'precommit = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbBucketProps "hasPrecommit" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'hasPrecommit
           (\ x__ y__ -> x__ {_RpbBucketProps'hasPrecommit = y__}))
        (Data.ProtoLens.maybeLens Prelude.False)
instance Data.ProtoLens.Field.HasField RpbBucketProps "maybe'hasPrecommit" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'hasPrecommit
           (\ x__ y__ -> x__ {_RpbBucketProps'hasPrecommit = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbBucketProps "postcommit" [RpbCommitHook] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'postcommit
           (\ x__ y__ -> x__ {_RpbBucketProps'postcommit = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField RpbBucketProps "vec'postcommit" (Data.Vector.Vector RpbCommitHook) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'postcommit
           (\ x__ y__ -> x__ {_RpbBucketProps'postcommit = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbBucketProps "hasPostcommit" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'hasPostcommit
           (\ x__ y__ -> x__ {_RpbBucketProps'hasPostcommit = y__}))
        (Data.ProtoLens.maybeLens Prelude.False)
instance Data.ProtoLens.Field.HasField RpbBucketProps "maybe'hasPostcommit" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'hasPostcommit
           (\ x__ y__ -> x__ {_RpbBucketProps'hasPostcommit = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbBucketProps "chashKeyfun" RpbModFun where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'chashKeyfun
           (\ x__ y__ -> x__ {_RpbBucketProps'chashKeyfun = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField RpbBucketProps "maybe'chashKeyfun" (Prelude.Maybe RpbModFun) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'chashKeyfun
           (\ x__ y__ -> x__ {_RpbBucketProps'chashKeyfun = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbBucketProps "linkfun" RpbModFun where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'linkfun
           (\ x__ y__ -> x__ {_RpbBucketProps'linkfun = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField RpbBucketProps "maybe'linkfun" (Prelude.Maybe RpbModFun) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'linkfun
           (\ x__ y__ -> x__ {_RpbBucketProps'linkfun = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbBucketProps "oldVclock" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'oldVclock
           (\ x__ y__ -> x__ {_RpbBucketProps'oldVclock = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbBucketProps "maybe'oldVclock" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'oldVclock
           (\ x__ y__ -> x__ {_RpbBucketProps'oldVclock = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbBucketProps "youngVclock" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'youngVclock
           (\ x__ y__ -> x__ {_RpbBucketProps'youngVclock = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbBucketProps "maybe'youngVclock" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'youngVclock
           (\ x__ y__ -> x__ {_RpbBucketProps'youngVclock = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbBucketProps "bigVclock" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'bigVclock
           (\ x__ y__ -> x__ {_RpbBucketProps'bigVclock = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbBucketProps "maybe'bigVclock" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'bigVclock
           (\ x__ y__ -> x__ {_RpbBucketProps'bigVclock = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbBucketProps "smallVclock" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'smallVclock
           (\ x__ y__ -> x__ {_RpbBucketProps'smallVclock = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbBucketProps "maybe'smallVclock" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'smallVclock
           (\ x__ y__ -> x__ {_RpbBucketProps'smallVclock = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbBucketProps "pr" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'pr (\ x__ y__ -> x__ {_RpbBucketProps'pr = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbBucketProps "maybe'pr" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'pr (\ x__ y__ -> x__ {_RpbBucketProps'pr = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbBucketProps "r" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'r (\ x__ y__ -> x__ {_RpbBucketProps'r = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbBucketProps "maybe'r" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'r (\ x__ y__ -> x__ {_RpbBucketProps'r = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbBucketProps "w" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'w (\ x__ y__ -> x__ {_RpbBucketProps'w = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbBucketProps "maybe'w" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'w (\ x__ y__ -> x__ {_RpbBucketProps'w = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbBucketProps "pw" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'pw (\ x__ y__ -> x__ {_RpbBucketProps'pw = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbBucketProps "maybe'pw" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'pw (\ x__ y__ -> x__ {_RpbBucketProps'pw = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbBucketProps "dw" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'dw (\ x__ y__ -> x__ {_RpbBucketProps'dw = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbBucketProps "maybe'dw" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'dw (\ x__ y__ -> x__ {_RpbBucketProps'dw = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbBucketProps "rw" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'rw (\ x__ y__ -> x__ {_RpbBucketProps'rw = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbBucketProps "maybe'rw" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'rw (\ x__ y__ -> x__ {_RpbBucketProps'rw = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbBucketProps "basicQuorum" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'basicQuorum
           (\ x__ y__ -> x__ {_RpbBucketProps'basicQuorum = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbBucketProps "maybe'basicQuorum" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'basicQuorum
           (\ x__ y__ -> x__ {_RpbBucketProps'basicQuorum = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbBucketProps "notfoundOk" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'notfoundOk
           (\ x__ y__ -> x__ {_RpbBucketProps'notfoundOk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbBucketProps "maybe'notfoundOk" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'notfoundOk
           (\ x__ y__ -> x__ {_RpbBucketProps'notfoundOk = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbBucketProps "backend" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'backend
           (\ x__ y__ -> x__ {_RpbBucketProps'backend = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbBucketProps "maybe'backend" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'backend
           (\ x__ y__ -> x__ {_RpbBucketProps'backend = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbBucketProps "search" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'search
           (\ x__ y__ -> x__ {_RpbBucketProps'search = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbBucketProps "maybe'search" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'search
           (\ x__ y__ -> x__ {_RpbBucketProps'search = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbBucketProps "repl" RpbBucketProps'RpbReplMode where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'repl
           (\ x__ y__ -> x__ {_RpbBucketProps'repl = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbBucketProps "maybe'repl" (Prelude.Maybe RpbBucketProps'RpbReplMode) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'repl
           (\ x__ y__ -> x__ {_RpbBucketProps'repl = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbBucketProps "searchIndex" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'searchIndex
           (\ x__ y__ -> x__ {_RpbBucketProps'searchIndex = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbBucketProps "maybe'searchIndex" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'searchIndex
           (\ x__ y__ -> x__ {_RpbBucketProps'searchIndex = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbBucketProps "datatype" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'datatype
           (\ x__ y__ -> x__ {_RpbBucketProps'datatype = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbBucketProps "maybe'datatype" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'datatype
           (\ x__ y__ -> x__ {_RpbBucketProps'datatype = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbBucketProps "consistent" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'consistent
           (\ x__ y__ -> x__ {_RpbBucketProps'consistent = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbBucketProps "maybe'consistent" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'consistent
           (\ x__ y__ -> x__ {_RpbBucketProps'consistent = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbBucketProps "writeOnce" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'writeOnce
           (\ x__ y__ -> x__ {_RpbBucketProps'writeOnce = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbBucketProps "maybe'writeOnce" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'writeOnce
           (\ x__ y__ -> x__ {_RpbBucketProps'writeOnce = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbBucketProps "hllPrecision" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'hllPrecision
           (\ x__ y__ -> x__ {_RpbBucketProps'hllPrecision = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbBucketProps "maybe'hllPrecision" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'hllPrecision
           (\ x__ y__ -> x__ {_RpbBucketProps'hllPrecision = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbBucketProps "ttl" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'ttl (\ x__ y__ -> x__ {_RpbBucketProps'ttl = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbBucketProps "maybe'ttl" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbBucketProps'ttl (\ x__ y__ -> x__ {_RpbBucketProps'ttl = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbBucketProps where
  messageName _ = Data.Text.pack "RpbBucketProps"
  packedMessageDescriptor _
    = "\n\
      \\SORpbBucketProps\DC2\DC3\n\
      \\ENQn_val\CAN\SOH \SOH(\rR\EOTnVal\DC2\GS\n\
      \\n\
      \allow_mult\CAN\STX \SOH(\bR\tallowMult\DC2&\n\
      \\SIlast_write_wins\CAN\ETX \SOH(\bR\rlastWriteWins\DC2,\n\
      \\tprecommit\CAN\EOT \ETX(\v2\SO.RpbCommitHookR\tprecommit\DC2*\n\
      \\rhas_precommit\CAN\ENQ \SOH(\b:\ENQfalseR\fhasPrecommit\DC2.\n\
      \\n\
      \postcommit\CAN\ACK \ETX(\v2\SO.RpbCommitHookR\n\
      \postcommit\DC2,\n\
      \\SOhas_postcommit\CAN\a \SOH(\b:\ENQfalseR\rhasPostcommit\DC2-\n\
      \\fchash_keyfun\CAN\b \SOH(\v2\n\
      \.RpbModFunR\vchashKeyfun\DC2$\n\
      \\alinkfun\CAN\t \SOH(\v2\n\
      \.RpbModFunR\alinkfun\DC2\GS\n\
      \\n\
      \old_vclock\CAN\n\
      \ \SOH(\rR\toldVclock\DC2!\n\
      \\fyoung_vclock\CAN\v \SOH(\rR\vyoungVclock\DC2\GS\n\
      \\n\
      \big_vclock\CAN\f \SOH(\rR\tbigVclock\DC2!\n\
      \\fsmall_vclock\CAN\r \SOH(\rR\vsmallVclock\DC2\SO\n\
      \\STXpr\CAN\SO \SOH(\rR\STXpr\DC2\f\n\
      \\SOHr\CAN\SI \SOH(\rR\SOHr\DC2\f\n\
      \\SOHw\CAN\DLE \SOH(\rR\SOHw\DC2\SO\n\
      \\STXpw\CAN\DC1 \SOH(\rR\STXpw\DC2\SO\n\
      \\STXdw\CAN\DC2 \SOH(\rR\STXdw\DC2\SO\n\
      \\STXrw\CAN\DC3 \SOH(\rR\STXrw\DC2!\n\
      \\fbasic_quorum\CAN\DC4 \SOH(\bR\vbasicQuorum\DC2\US\n\
      \\vnotfound_ok\CAN\NAK \SOH(\bR\n\
      \notfoundOk\DC2\CAN\n\
      \\abackend\CAN\SYN \SOH(\fR\abackend\DC2\SYN\n\
      \\ACKsearch\CAN\ETB \SOH(\bR\ACKsearch\DC2/\n\
      \\EOTrepl\CAN\CAN \SOH(\SO2\ESC.RpbBucketProps.RpbReplModeR\EOTrepl\DC2!\n\
      \\fsearch_index\CAN\EM \SOH(\fR\vsearchIndex\DC2\SUB\n\
      \\bdatatype\CAN\SUB \SOH(\fR\bdatatype\DC2\RS\n\
      \\n\
      \consistent\CAN\ESC \SOH(\bR\n\
      \consistent\DC2\GS\n\
      \\n\
      \write_once\CAN\FS \SOH(\bR\twriteOnce\DC2#\n\
      \\rhll_precision\CAN\GS \SOH(\rR\fhllPrecision\DC2\DLE\n\
      \\ETXttl\CAN\RS \SOH(\rR\ETXttl\">\n\
      \\vRpbReplMode\DC2\t\n\
      \\ENQFALSE\DLE\NUL\DC2\f\n\
      \\bREALTIME\DLE\SOH\DC2\f\n\
      \\bFULLSYNC\DLE\STX\DC2\b\n\
      \\EOTTRUE\DLE\ETX"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        nVal__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "n_val"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'nVal")) ::
              Data.ProtoLens.FieldDescriptor RpbBucketProps
        allowMult__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "allow_mult"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'allowMult")) ::
              Data.ProtoLens.FieldDescriptor RpbBucketProps
        lastWriteWins__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "last_write_wins"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'lastWriteWins")) ::
              Data.ProtoLens.FieldDescriptor RpbBucketProps
        precommit__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "precommit"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor RpbCommitHook)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"precommit")) ::
              Data.ProtoLens.FieldDescriptor RpbBucketProps
        hasPrecommit__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "has_precommit"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'hasPrecommit")) ::
              Data.ProtoLens.FieldDescriptor RpbBucketProps
        postcommit__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "postcommit"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor RpbCommitHook)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"postcommit")) ::
              Data.ProtoLens.FieldDescriptor RpbBucketProps
        hasPostcommit__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "has_postcommit"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'hasPostcommit")) ::
              Data.ProtoLens.FieldDescriptor RpbBucketProps
        chashKeyfun__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "chash_keyfun"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor RpbModFun)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'chashKeyfun")) ::
              Data.ProtoLens.FieldDescriptor RpbBucketProps
        linkfun__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "linkfun"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor RpbModFun)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'linkfun")) ::
              Data.ProtoLens.FieldDescriptor RpbBucketProps
        oldVclock__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "old_vclock"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'oldVclock")) ::
              Data.ProtoLens.FieldDescriptor RpbBucketProps
        youngVclock__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "young_vclock"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'youngVclock")) ::
              Data.ProtoLens.FieldDescriptor RpbBucketProps
        bigVclock__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "big_vclock"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'bigVclock")) ::
              Data.ProtoLens.FieldDescriptor RpbBucketProps
        smallVclock__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "small_vclock"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'smallVclock")) ::
              Data.ProtoLens.FieldDescriptor RpbBucketProps
        pr__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pr"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'pr")) ::
              Data.ProtoLens.FieldDescriptor RpbBucketProps
        r__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "r"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'r")) ::
              Data.ProtoLens.FieldDescriptor RpbBucketProps
        w__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "w"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'w")) ::
              Data.ProtoLens.FieldDescriptor RpbBucketProps
        pw__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pw"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'pw")) ::
              Data.ProtoLens.FieldDescriptor RpbBucketProps
        dw__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dw"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dw")) ::
              Data.ProtoLens.FieldDescriptor RpbBucketProps
        rw__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "rw"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'rw")) ::
              Data.ProtoLens.FieldDescriptor RpbBucketProps
        basicQuorum__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "basic_quorum"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'basicQuorum")) ::
              Data.ProtoLens.FieldDescriptor RpbBucketProps
        notfoundOk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "notfound_ok"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'notfoundOk")) ::
              Data.ProtoLens.FieldDescriptor RpbBucketProps
        backend__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "backend"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'backend")) ::
              Data.ProtoLens.FieldDescriptor RpbBucketProps
        search__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "search"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'search")) ::
              Data.ProtoLens.FieldDescriptor RpbBucketProps
        repl__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "repl"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor RpbBucketProps'RpbReplMode)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'repl")) ::
              Data.ProtoLens.FieldDescriptor RpbBucketProps
        searchIndex__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "search_index"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'searchIndex")) ::
              Data.ProtoLens.FieldDescriptor RpbBucketProps
        datatype__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "datatype"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'datatype")) ::
              Data.ProtoLens.FieldDescriptor RpbBucketProps
        consistent__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "consistent"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'consistent")) ::
              Data.ProtoLens.FieldDescriptor RpbBucketProps
        writeOnce__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "write_once"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'writeOnce")) ::
              Data.ProtoLens.FieldDescriptor RpbBucketProps
        hllPrecision__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "hll_precision"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'hllPrecision")) ::
              Data.ProtoLens.FieldDescriptor RpbBucketProps
        ttl__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ttl"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ttl")) ::
              Data.ProtoLens.FieldDescriptor RpbBucketProps
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, nVal__field_descriptor),
           (Data.ProtoLens.Tag 2, allowMult__field_descriptor),
           (Data.ProtoLens.Tag 3, lastWriteWins__field_descriptor),
           (Data.ProtoLens.Tag 4, precommit__field_descriptor),
           (Data.ProtoLens.Tag 5, hasPrecommit__field_descriptor),
           (Data.ProtoLens.Tag 6, postcommit__field_descriptor),
           (Data.ProtoLens.Tag 7, hasPostcommit__field_descriptor),
           (Data.ProtoLens.Tag 8, chashKeyfun__field_descriptor),
           (Data.ProtoLens.Tag 9, linkfun__field_descriptor),
           (Data.ProtoLens.Tag 10, oldVclock__field_descriptor),
           (Data.ProtoLens.Tag 11, youngVclock__field_descriptor),
           (Data.ProtoLens.Tag 12, bigVclock__field_descriptor),
           (Data.ProtoLens.Tag 13, smallVclock__field_descriptor),
           (Data.ProtoLens.Tag 14, pr__field_descriptor),
           (Data.ProtoLens.Tag 15, r__field_descriptor),
           (Data.ProtoLens.Tag 16, w__field_descriptor),
           (Data.ProtoLens.Tag 17, pw__field_descriptor),
           (Data.ProtoLens.Tag 18, dw__field_descriptor),
           (Data.ProtoLens.Tag 19, rw__field_descriptor),
           (Data.ProtoLens.Tag 20, basicQuorum__field_descriptor),
           (Data.ProtoLens.Tag 21, notfoundOk__field_descriptor),
           (Data.ProtoLens.Tag 22, backend__field_descriptor),
           (Data.ProtoLens.Tag 23, search__field_descriptor),
           (Data.ProtoLens.Tag 24, repl__field_descriptor),
           (Data.ProtoLens.Tag 25, searchIndex__field_descriptor),
           (Data.ProtoLens.Tag 26, datatype__field_descriptor),
           (Data.ProtoLens.Tag 27, consistent__field_descriptor),
           (Data.ProtoLens.Tag 28, writeOnce__field_descriptor),
           (Data.ProtoLens.Tag 29, hllPrecision__field_descriptor),
           (Data.ProtoLens.Tag 30, ttl__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbBucketProps'_unknownFields
        (\ x__ y__ -> x__ {_RpbBucketProps'_unknownFields = y__})
  defMessage
    = RpbBucketProps'_constructor
        {_RpbBucketProps'nVal = Prelude.Nothing,
         _RpbBucketProps'allowMult = Prelude.Nothing,
         _RpbBucketProps'lastWriteWins = Prelude.Nothing,
         _RpbBucketProps'precommit = Data.Vector.Generic.empty,
         _RpbBucketProps'hasPrecommit = Prelude.Nothing,
         _RpbBucketProps'postcommit = Data.Vector.Generic.empty,
         _RpbBucketProps'hasPostcommit = Prelude.Nothing,
         _RpbBucketProps'chashKeyfun = Prelude.Nothing,
         _RpbBucketProps'linkfun = Prelude.Nothing,
         _RpbBucketProps'oldVclock = Prelude.Nothing,
         _RpbBucketProps'youngVclock = Prelude.Nothing,
         _RpbBucketProps'bigVclock = Prelude.Nothing,
         _RpbBucketProps'smallVclock = Prelude.Nothing,
         _RpbBucketProps'pr = Prelude.Nothing,
         _RpbBucketProps'r = Prelude.Nothing,
         _RpbBucketProps'w = Prelude.Nothing,
         _RpbBucketProps'pw = Prelude.Nothing,
         _RpbBucketProps'dw = Prelude.Nothing,
         _RpbBucketProps'rw = Prelude.Nothing,
         _RpbBucketProps'basicQuorum = Prelude.Nothing,
         _RpbBucketProps'notfoundOk = Prelude.Nothing,
         _RpbBucketProps'backend = Prelude.Nothing,
         _RpbBucketProps'search = Prelude.Nothing,
         _RpbBucketProps'repl = Prelude.Nothing,
         _RpbBucketProps'searchIndex = Prelude.Nothing,
         _RpbBucketProps'datatype = Prelude.Nothing,
         _RpbBucketProps'consistent = Prelude.Nothing,
         _RpbBucketProps'writeOnce = Prelude.Nothing,
         _RpbBucketProps'hllPrecision = Prelude.Nothing,
         _RpbBucketProps'ttl = Prelude.Nothing,
         _RpbBucketProps'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbBucketProps
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld RpbCommitHook
             -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld RpbCommitHook
                -> Data.ProtoLens.Encoding.Bytes.Parser RpbBucketProps
        loop x mutable'postcommit mutable'precommit
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'postcommit <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                             (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                mutable'postcommit)
                      frozen'precommit <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                            (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                               mutable'precommit)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields
                           (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'postcommit")
                              frozen'postcommit
                              (Lens.Family2.set
                                 (Data.ProtoLens.Field.field @"vec'precommit") frozen'precommit x)))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "n_val"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"nVal") y x)
                                  mutable'postcommit
                                  mutable'precommit
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "allow_mult"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"allowMult") y x)
                                  mutable'postcommit
                                  mutable'precommit
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "last_write_wins"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"lastWriteWins") y x)
                                  mutable'postcommit
                                  mutable'precommit
                        34
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "precommit"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'precommit y)
                                loop x mutable'postcommit v
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "has_precommit"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"hasPrecommit") y x)
                                  mutable'postcommit
                                  mutable'precommit
                        50
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "postcommit"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'postcommit y)
                                loop x v mutable'precommit
                        56
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "has_postcommit"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"hasPostcommit") y x)
                                  mutable'postcommit
                                  mutable'precommit
                        66
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "chash_keyfun"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"chashKeyfun") y x)
                                  mutable'postcommit
                                  mutable'precommit
                        74
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "linkfun"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"linkfun") y x)
                                  mutable'postcommit
                                  mutable'precommit
                        80
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "old_vclock"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"oldVclock") y x)
                                  mutable'postcommit
                                  mutable'precommit
                        88
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "young_vclock"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"youngVclock") y x)
                                  mutable'postcommit
                                  mutable'precommit
                        96
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "big_vclock"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"bigVclock") y x)
                                  mutable'postcommit
                                  mutable'precommit
                        104
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "small_vclock"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"smallVclock") y x)
                                  mutable'postcommit
                                  mutable'precommit
                        112
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "pr"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"pr") y x)
                                  mutable'postcommit
                                  mutable'precommit
                        120
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "r"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"r") y x)
                                  mutable'postcommit
                                  mutable'precommit
                        128
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "w"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"w") y x)
                                  mutable'postcommit
                                  mutable'precommit
                        136
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "pw"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"pw") y x)
                                  mutable'postcommit
                                  mutable'precommit
                        144
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "dw"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"dw") y x)
                                  mutable'postcommit
                                  mutable'precommit
                        152
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "rw"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"rw") y x)
                                  mutable'postcommit
                                  mutable'precommit
                        160
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "basic_quorum"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"basicQuorum") y x)
                                  mutable'postcommit
                                  mutable'precommit
                        168
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "notfound_ok"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"notfoundOk") y x)
                                  mutable'postcommit
                                  mutable'precommit
                        178
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "backend"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"backend") y x)
                                  mutable'postcommit
                                  mutable'precommit
                        184
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "search"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"search") y x)
                                  mutable'postcommit
                                  mutable'precommit
                        192
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "repl"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"repl") y x)
                                  mutable'postcommit
                                  mutable'precommit
                        202
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "search_index"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"searchIndex") y x)
                                  mutable'postcommit
                                  mutable'precommit
                        210
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "datatype"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"datatype") y x)
                                  mutable'postcommit
                                  mutable'precommit
                        216
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "consistent"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"consistent") y x)
                                  mutable'postcommit
                                  mutable'precommit
                        224
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "write_once"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"writeOnce") y x)
                                  mutable'postcommit
                                  mutable'precommit
                        232
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "hll_precision"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"hllPrecision") y x)
                                  mutable'postcommit
                                  mutable'precommit
                        240
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "ttl"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"ttl") y x)
                                  mutable'postcommit
                                  mutable'precommit
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'postcommit
                                  mutable'precommit
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'postcommit <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                      Data.ProtoLens.Encoding.Growing.new
              mutable'precommit <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                     Data.ProtoLens.Encoding.Growing.new
              loop
                Data.ProtoLens.defMessage mutable'postcommit mutable'precommit)
          "RpbBucketProps"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'nVal") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       ((Prelude..)
                          Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'allowMult") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          ((Prelude..)
                             Data.ProtoLens.Encoding.Bytes.putVarInt
                             (\ b -> if b then 1 else 0)
                             _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'lastWriteWins") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt
                                (\ b -> if b then 1 else 0)
                                _v))
                   ((Data.Monoid.<>)
                      (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                         (\ _v
                            -> (Data.Monoid.<>)
                                 (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                                 ((Prelude..)
                                    (\ bs
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                                               (Prelude.fromIntegral (Data.ByteString.length bs)))
                                            (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                    Data.ProtoLens.encodeMessage
                                    _v))
                         (Lens.Family2.view
                            (Data.ProtoLens.Field.field @"vec'precommit") _x))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view
                                (Data.ProtoLens.Field.field @"maybe'hasPrecommit") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (\ b -> if b then 1 else 0)
                                      _v))
                         ((Data.Monoid.<>)
                            (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                               (\ _v
                                  -> (Data.Monoid.<>)
                                       (Data.ProtoLens.Encoding.Bytes.putVarInt 50)
                                       ((Prelude..)
                                          (\ bs
                                             -> (Data.Monoid.<>)
                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                     (Prelude.fromIntegral
                                                        (Data.ByteString.length bs)))
                                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                          Data.ProtoLens.encodeMessage
                                          _v))
                               (Lens.Family2.view
                                  (Data.ProtoLens.Field.field @"vec'postcommit") _x))
                            ((Data.Monoid.<>)
                               (case
                                    Lens.Family2.view
                                      (Data.ProtoLens.Field.field @"maybe'hasPostcommit") _x
                                of
                                  Prelude.Nothing -> Data.Monoid.mempty
                                  (Prelude.Just _v)
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 56)
                                         ((Prelude..)
                                            Data.ProtoLens.Encoding.Bytes.putVarInt
                                            (\ b -> if b then 1 else 0)
                                            _v))
                               ((Data.Monoid.<>)
                                  (case
                                       Lens.Family2.view
                                         (Data.ProtoLens.Field.field @"maybe'chashKeyfun") _x
                                   of
                                     Prelude.Nothing -> Data.Monoid.mempty
                                     (Prelude.Just _v)
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt 66)
                                            ((Prelude..)
                                               (\ bs
                                                  -> (Data.Monoid.<>)
                                                       (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                          (Prelude.fromIntegral
                                                             (Data.ByteString.length bs)))
                                                       (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                               Data.ProtoLens.encodeMessage
                                               _v))
                                  ((Data.Monoid.<>)
                                     (case
                                          Lens.Family2.view
                                            (Data.ProtoLens.Field.field @"maybe'linkfun") _x
                                      of
                                        Prelude.Nothing -> Data.Monoid.mempty
                                        (Prelude.Just _v)
                                          -> (Data.Monoid.<>)
                                               (Data.ProtoLens.Encoding.Bytes.putVarInt 74)
                                               ((Prelude..)
                                                  (\ bs
                                                     -> (Data.Monoid.<>)
                                                          (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                             (Prelude.fromIntegral
                                                                (Data.ByteString.length bs)))
                                                          (Data.ProtoLens.Encoding.Bytes.putBytes
                                                             bs))
                                                  Data.ProtoLens.encodeMessage
                                                  _v))
                                     ((Data.Monoid.<>)
                                        (case
                                             Lens.Family2.view
                                               (Data.ProtoLens.Field.field @"maybe'oldVclock") _x
                                         of
                                           Prelude.Nothing -> Data.Monoid.mempty
                                           (Prelude.Just _v)
                                             -> (Data.Monoid.<>)
                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt 80)
                                                  ((Prelude..)
                                                     Data.ProtoLens.Encoding.Bytes.putVarInt
                                                     Prelude.fromIntegral
                                                     _v))
                                        ((Data.Monoid.<>)
                                           (case
                                                Lens.Family2.view
                                                  (Data.ProtoLens.Field.field @"maybe'youngVclock")
                                                  _x
                                            of
                                              Prelude.Nothing -> Data.Monoid.mempty
                                              (Prelude.Just _v)
                                                -> (Data.Monoid.<>)
                                                     (Data.ProtoLens.Encoding.Bytes.putVarInt 88)
                                                     ((Prelude..)
                                                        Data.ProtoLens.Encoding.Bytes.putVarInt
                                                        Prelude.fromIntegral
                                                        _v))
                                           ((Data.Monoid.<>)
                                              (case
                                                   Lens.Family2.view
                                                     (Data.ProtoLens.Field.field @"maybe'bigVclock")
                                                     _x
                                               of
                                                 Prelude.Nothing -> Data.Monoid.mempty
                                                 (Prelude.Just _v)
                                                   -> (Data.Monoid.<>)
                                                        (Data.ProtoLens.Encoding.Bytes.putVarInt 96)
                                                        ((Prelude..)
                                                           Data.ProtoLens.Encoding.Bytes.putVarInt
                                                           Prelude.fromIntegral
                                                           _v))
                                              ((Data.Monoid.<>)
                                                 (case
                                                      Lens.Family2.view
                                                        (Data.ProtoLens.Field.field
                                                           @"maybe'smallVclock")
                                                        _x
                                                  of
                                                    Prelude.Nothing -> Data.Monoid.mempty
                                                    (Prelude.Just _v)
                                                      -> (Data.Monoid.<>)
                                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                              104)
                                                           ((Prelude..)
                                                              Data.ProtoLens.Encoding.Bytes.putVarInt
                                                              Prelude.fromIntegral
                                                              _v))
                                                 ((Data.Monoid.<>)
                                                    (case
                                                         Lens.Family2.view
                                                           (Data.ProtoLens.Field.field @"maybe'pr")
                                                           _x
                                                     of
                                                       Prelude.Nothing -> Data.Monoid.mempty
                                                       (Prelude.Just _v)
                                                         -> (Data.Monoid.<>)
                                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                 112)
                                                              ((Prelude..)
                                                                 Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                 Prelude.fromIntegral
                                                                 _v))
                                                    ((Data.Monoid.<>)
                                                       (case
                                                            Lens.Family2.view
                                                              (Data.ProtoLens.Field.field
                                                                 @"maybe'r")
                                                              _x
                                                        of
                                                          Prelude.Nothing -> Data.Monoid.mempty
                                                          (Prelude.Just _v)
                                                            -> (Data.Monoid.<>)
                                                                 (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                    120)
                                                                 ((Prelude..)
                                                                    Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                    Prelude.fromIntegral
                                                                    _v))
                                                       ((Data.Monoid.<>)
                                                          (case
                                                               Lens.Family2.view
                                                                 (Data.ProtoLens.Field.field
                                                                    @"maybe'w")
                                                                 _x
                                                           of
                                                             Prelude.Nothing -> Data.Monoid.mempty
                                                             (Prelude.Just _v)
                                                               -> (Data.Monoid.<>)
                                                                    (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                       128)
                                                                    ((Prelude..)
                                                                       Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                       Prelude.fromIntegral
                                                                       _v))
                                                          ((Data.Monoid.<>)
                                                             (case
                                                                  Lens.Family2.view
                                                                    (Data.ProtoLens.Field.field
                                                                       @"maybe'pw")
                                                                    _x
                                                              of
                                                                Prelude.Nothing
                                                                  -> Data.Monoid.mempty
                                                                (Prelude.Just _v)
                                                                  -> (Data.Monoid.<>)
                                                                       (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                          136)
                                                                       ((Prelude..)
                                                                          Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                          Prelude.fromIntegral
                                                                          _v))
                                                             ((Data.Monoid.<>)
                                                                (case
                                                                     Lens.Family2.view
                                                                       (Data.ProtoLens.Field.field
                                                                          @"maybe'dw")
                                                                       _x
                                                                 of
                                                                   Prelude.Nothing
                                                                     -> Data.Monoid.mempty
                                                                   (Prelude.Just _v)
                                                                     -> (Data.Monoid.<>)
                                                                          (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                             144)
                                                                          ((Prelude..)
                                                                             Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                             Prelude.fromIntegral
                                                                             _v))
                                                                ((Data.Monoid.<>)
                                                                   (case
                                                                        Lens.Family2.view
                                                                          (Data.ProtoLens.Field.field
                                                                             @"maybe'rw")
                                                                          _x
                                                                    of
                                                                      Prelude.Nothing
                                                                        -> Data.Monoid.mempty
                                                                      (Prelude.Just _v)
                                                                        -> (Data.Monoid.<>)
                                                                             (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                152)
                                                                             ((Prelude..)
                                                                                Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                Prelude.fromIntegral
                                                                                _v))
                                                                   ((Data.Monoid.<>)
                                                                      (case
                                                                           Lens.Family2.view
                                                                             (Data.ProtoLens.Field.field
                                                                                @"maybe'basicQuorum")
                                                                             _x
                                                                       of
                                                                         Prelude.Nothing
                                                                           -> Data.Monoid.mempty
                                                                         (Prelude.Just _v)
                                                                           -> (Data.Monoid.<>)
                                                                                (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                   160)
                                                                                ((Prelude..)
                                                                                   Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                   (\ b
                                                                                      -> if b then
                                                                                             1
                                                                                         else
                                                                                             0)
                                                                                   _v))
                                                                      ((Data.Monoid.<>)
                                                                         (case
                                                                              Lens.Family2.view
                                                                                (Data.ProtoLens.Field.field
                                                                                   @"maybe'notfoundOk")
                                                                                _x
                                                                          of
                                                                            Prelude.Nothing
                                                                              -> Data.Monoid.mempty
                                                                            (Prelude.Just _v)
                                                                              -> (Data.Monoid.<>)
                                                                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                      168)
                                                                                   ((Prelude..)
                                                                                      Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                      (\ b
                                                                                         -> if b then
                                                                                                1
                                                                                            else
                                                                                                0)
                                                                                      _v))
                                                                         ((Data.Monoid.<>)
                                                                            (case
                                                                                 Lens.Family2.view
                                                                                   (Data.ProtoLens.Field.field
                                                                                      @"maybe'backend")
                                                                                   _x
                                                                             of
                                                                               Prelude.Nothing
                                                                                 -> Data.Monoid.mempty
                                                                               (Prelude.Just _v)
                                                                                 -> (Data.Monoid.<>)
                                                                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                         178)
                                                                                      ((\ bs
                                                                                          -> (Data.Monoid.<>)
                                                                                               (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                  (Prelude.fromIntegral
                                                                                                     (Data.ByteString.length
                                                                                                        bs)))
                                                                                               (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                                                  bs))
                                                                                         _v))
                                                                            ((Data.Monoid.<>)
                                                                               (case
                                                                                    Lens.Family2.view
                                                                                      (Data.ProtoLens.Field.field
                                                                                         @"maybe'search")
                                                                                      _x
                                                                                of
                                                                                  Prelude.Nothing
                                                                                    -> Data.Monoid.mempty
                                                                                  (Prelude.Just _v)
                                                                                    -> (Data.Monoid.<>)
                                                                                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                            184)
                                                                                         ((Prelude..)
                                                                                            Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                            (\ b
                                                                                               -> if b then
                                                                                                      1
                                                                                                  else
                                                                                                      0)
                                                                                            _v))
                                                                               ((Data.Monoid.<>)
                                                                                  (case
                                                                                       Lens.Family2.view
                                                                                         (Data.ProtoLens.Field.field
                                                                                            @"maybe'repl")
                                                                                         _x
                                                                                   of
                                                                                     Prelude.Nothing
                                                                                       -> Data.Monoid.mempty
                                                                                     (Prelude.Just _v)
                                                                                       -> (Data.Monoid.<>)
                                                                                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                               192)
                                                                                            ((Prelude..)
                                                                                               ((Prelude..)
                                                                                                  Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                  Prelude.fromIntegral)
                                                                                               Prelude.fromEnum
                                                                                               _v))
                                                                                  ((Data.Monoid.<>)
                                                                                     (case
                                                                                          Lens.Family2.view
                                                                                            (Data.ProtoLens.Field.field
                                                                                               @"maybe'searchIndex")
                                                                                            _x
                                                                                      of
                                                                                        Prelude.Nothing
                                                                                          -> Data.Monoid.mempty
                                                                                        (Prelude.Just _v)
                                                                                          -> (Data.Monoid.<>)
                                                                                               (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                  202)
                                                                                               ((\ bs
                                                                                                   -> (Data.Monoid.<>)
                                                                                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                           (Prelude.fromIntegral
                                                                                                              (Data.ByteString.length
                                                                                                                 bs)))
                                                                                                        (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                                                           bs))
                                                                                                  _v))
                                                                                     ((Data.Monoid.<>)
                                                                                        (case
                                                                                             Lens.Family2.view
                                                                                               (Data.ProtoLens.Field.field
                                                                                                  @"maybe'datatype")
                                                                                               _x
                                                                                         of
                                                                                           Prelude.Nothing
                                                                                             -> Data.Monoid.mempty
                                                                                           (Prelude.Just _v)
                                                                                             -> (Data.Monoid.<>)
                                                                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                     210)
                                                                                                  ((\ bs
                                                                                                      -> (Data.Monoid.<>)
                                                                                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                              (Prelude.fromIntegral
                                                                                                                 (Data.ByteString.length
                                                                                                                    bs)))
                                                                                                           (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                                                              bs))
                                                                                                     _v))
                                                                                        ((Data.Monoid.<>)
                                                                                           (case
                                                                                                Lens.Family2.view
                                                                                                  (Data.ProtoLens.Field.field
                                                                                                     @"maybe'consistent")
                                                                                                  _x
                                                                                            of
                                                                                              Prelude.Nothing
                                                                                                -> Data.Monoid.mempty
                                                                                              (Prelude.Just _v)
                                                                                                -> (Data.Monoid.<>)
                                                                                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                        216)
                                                                                                     ((Prelude..)
                                                                                                        Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                        (\ b
                                                                                                           -> if b then
                                                                                                                  1
                                                                                                              else
                                                                                                                  0)
                                                                                                        _v))
                                                                                           ((Data.Monoid.<>)
                                                                                              (case
                                                                                                   Lens.Family2.view
                                                                                                     (Data.ProtoLens.Field.field
                                                                                                        @"maybe'writeOnce")
                                                                                                     _x
                                                                                               of
                                                                                                 Prelude.Nothing
                                                                                                   -> Data.Monoid.mempty
                                                                                                 (Prelude.Just _v)
                                                                                                   -> (Data.Monoid.<>)
                                                                                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                           224)
                                                                                                        ((Prelude..)
                                                                                                           Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                           (\ b
                                                                                                              -> if b then
                                                                                                                     1
                                                                                                                 else
                                                                                                                     0)
                                                                                                           _v))
                                                                                              ((Data.Monoid.<>)
                                                                                                 (case
                                                                                                      Lens.Family2.view
                                                                                                        (Data.ProtoLens.Field.field
                                                                                                           @"maybe'hllPrecision")
                                                                                                        _x
                                                                                                  of
                                                                                                    Prelude.Nothing
                                                                                                      -> Data.Monoid.mempty
                                                                                                    (Prelude.Just _v)
                                                                                                      -> (Data.Monoid.<>)
                                                                                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                              232)
                                                                                                           ((Prelude..)
                                                                                                              Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                              Prelude.fromIntegral
                                                                                                              _v))
                                                                                                 ((Data.Monoid.<>)
                                                                                                    (case
                                                                                                         Lens.Family2.view
                                                                                                           (Data.ProtoLens.Field.field
                                                                                                              @"maybe'ttl")
                                                                                                           _x
                                                                                                     of
                                                                                                       Prelude.Nothing
                                                                                                         -> Data.Monoid.mempty
                                                                                                       (Prelude.Just _v)
                                                                                                         -> (Data.Monoid.<>)
                                                                                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                                 240)
                                                                                                              ((Prelude..)
                                                                                                                 Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                                                 Prelude.fromIntegral
                                                                                                                 _v))
                                                                                                    (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                                                                                       (Lens.Family2.view
                                                                                                          Data.ProtoLens.unknownFields
                                                                                                          _x)))))))))))))))))))))))))))))))
instance Control.DeepSeq.NFData RpbBucketProps where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbBucketProps'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_RpbBucketProps'nVal x__)
                (Control.DeepSeq.deepseq
                   (_RpbBucketProps'allowMult x__)
                   (Control.DeepSeq.deepseq
                      (_RpbBucketProps'lastWriteWins x__)
                      (Control.DeepSeq.deepseq
                         (_RpbBucketProps'precommit x__)
                         (Control.DeepSeq.deepseq
                            (_RpbBucketProps'hasPrecommit x__)
                            (Control.DeepSeq.deepseq
                               (_RpbBucketProps'postcommit x__)
                               (Control.DeepSeq.deepseq
                                  (_RpbBucketProps'hasPostcommit x__)
                                  (Control.DeepSeq.deepseq
                                     (_RpbBucketProps'chashKeyfun x__)
                                     (Control.DeepSeq.deepseq
                                        (_RpbBucketProps'linkfun x__)
                                        (Control.DeepSeq.deepseq
                                           (_RpbBucketProps'oldVclock x__)
                                           (Control.DeepSeq.deepseq
                                              (_RpbBucketProps'youngVclock x__)
                                              (Control.DeepSeq.deepseq
                                                 (_RpbBucketProps'bigVclock x__)
                                                 (Control.DeepSeq.deepseq
                                                    (_RpbBucketProps'smallVclock x__)
                                                    (Control.DeepSeq.deepseq
                                                       (_RpbBucketProps'pr x__)
                                                       (Control.DeepSeq.deepseq
                                                          (_RpbBucketProps'r x__)
                                                          (Control.DeepSeq.deepseq
                                                             (_RpbBucketProps'w x__)
                                                             (Control.DeepSeq.deepseq
                                                                (_RpbBucketProps'pw x__)
                                                                (Control.DeepSeq.deepseq
                                                                   (_RpbBucketProps'dw x__)
                                                                   (Control.DeepSeq.deepseq
                                                                      (_RpbBucketProps'rw x__)
                                                                      (Control.DeepSeq.deepseq
                                                                         (_RpbBucketProps'basicQuorum
                                                                            x__)
                                                                         (Control.DeepSeq.deepseq
                                                                            (_RpbBucketProps'notfoundOk
                                                                               x__)
                                                                            (Control.DeepSeq.deepseq
                                                                               (_RpbBucketProps'backend
                                                                                  x__)
                                                                               (Control.DeepSeq.deepseq
                                                                                  (_RpbBucketProps'search
                                                                                     x__)
                                                                                  (Control.DeepSeq.deepseq
                                                                                     (_RpbBucketProps'repl
                                                                                        x__)
                                                                                     (Control.DeepSeq.deepseq
                                                                                        (_RpbBucketProps'searchIndex
                                                                                           x__)
                                                                                        (Control.DeepSeq.deepseq
                                                                                           (_RpbBucketProps'datatype
                                                                                              x__)
                                                                                           (Control.DeepSeq.deepseq
                                                                                              (_RpbBucketProps'consistent
                                                                                                 x__)
                                                                                              (Control.DeepSeq.deepseq
                                                                                                 (_RpbBucketProps'writeOnce
                                                                                                    x__)
                                                                                                 (Control.DeepSeq.deepseq
                                                                                                    (_RpbBucketProps'hllPrecision
                                                                                                       x__)
                                                                                                    (Control.DeepSeq.deepseq
                                                                                                       (_RpbBucketProps'ttl
                                                                                                          x__)
                                                                                                       ()))))))))))))))))))))))))))))))
data RpbBucketProps'RpbReplMode
  = RpbBucketProps'FALSE |
    RpbBucketProps'REALTIME |
    RpbBucketProps'FULLSYNC |
    RpbBucketProps'TRUE
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum RpbBucketProps'RpbReplMode where
  maybeToEnum 0 = Prelude.Just RpbBucketProps'FALSE
  maybeToEnum 1 = Prelude.Just RpbBucketProps'REALTIME
  maybeToEnum 2 = Prelude.Just RpbBucketProps'FULLSYNC
  maybeToEnum 3 = Prelude.Just RpbBucketProps'TRUE
  maybeToEnum _ = Prelude.Nothing
  showEnum RpbBucketProps'FALSE = "FALSE"
  showEnum RpbBucketProps'REALTIME = "REALTIME"
  showEnum RpbBucketProps'FULLSYNC = "FULLSYNC"
  showEnum RpbBucketProps'TRUE = "TRUE"
  readEnum k
    | (Prelude.==) k "FALSE" = Prelude.Just RpbBucketProps'FALSE
    | (Prelude.==) k "REALTIME" = Prelude.Just RpbBucketProps'REALTIME
    | (Prelude.==) k "FULLSYNC" = Prelude.Just RpbBucketProps'FULLSYNC
    | (Prelude.==) k "TRUE" = Prelude.Just RpbBucketProps'TRUE
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded RpbBucketProps'RpbReplMode where
  minBound = RpbBucketProps'FALSE
  maxBound = RpbBucketProps'TRUE
instance Prelude.Enum RpbBucketProps'RpbReplMode where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum RpbReplMode: " (Prelude.show k__)))
        Prelude.id
        (Data.ProtoLens.maybeToEnum k__)
  fromEnum RpbBucketProps'FALSE = 0
  fromEnum RpbBucketProps'REALTIME = 1
  fromEnum RpbBucketProps'FULLSYNC = 2
  fromEnum RpbBucketProps'TRUE = 3
  succ RpbBucketProps'TRUE
    = Prelude.error
        "RpbBucketProps'RpbReplMode.succ: bad argument RpbBucketProps'TRUE. This value would be out of bounds."
  succ RpbBucketProps'FALSE = RpbBucketProps'REALTIME
  succ RpbBucketProps'REALTIME = RpbBucketProps'FULLSYNC
  succ RpbBucketProps'FULLSYNC = RpbBucketProps'TRUE
  pred RpbBucketProps'FALSE
    = Prelude.error
        "RpbBucketProps'RpbReplMode.pred: bad argument RpbBucketProps'FALSE. This value would be out of bounds."
  pred RpbBucketProps'REALTIME = RpbBucketProps'FALSE
  pred RpbBucketProps'FULLSYNC = RpbBucketProps'REALTIME
  pred RpbBucketProps'TRUE = RpbBucketProps'FULLSYNC
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault RpbBucketProps'RpbReplMode where
  fieldDefault = RpbBucketProps'FALSE
instance Control.DeepSeq.NFData RpbBucketProps'RpbReplMode where
  rnf x__ = Prelude.seq x__ ()
{- | Fields :
     
         * 'Proto.Riak_Fields.bucket' @:: Lens' RpbCSBucketReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.startKey' @:: Lens' RpbCSBucketReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.endKey' @:: Lens' RpbCSBucketReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'endKey' @:: Lens' RpbCSBucketReq (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.startIncl' @:: Lens' RpbCSBucketReq Prelude.Bool@
         * 'Proto.Riak_Fields.maybe'startIncl' @:: Lens' RpbCSBucketReq (Prelude.Maybe Prelude.Bool)@
         * 'Proto.Riak_Fields.endIncl' @:: Lens' RpbCSBucketReq Prelude.Bool@
         * 'Proto.Riak_Fields.maybe'endIncl' @:: Lens' RpbCSBucketReq (Prelude.Maybe Prelude.Bool)@
         * 'Proto.Riak_Fields.continuation' @:: Lens' RpbCSBucketReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'continuation' @:: Lens' RpbCSBucketReq (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.maxResults' @:: Lens' RpbCSBucketReq Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'maxResults' @:: Lens' RpbCSBucketReq (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.timeout' @:: Lens' RpbCSBucketReq Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'timeout' @:: Lens' RpbCSBucketReq (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.type'' @:: Lens' RpbCSBucketReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'type'' @:: Lens' RpbCSBucketReq (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.coverContext' @:: Lens' RpbCSBucketReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'coverContext' @:: Lens' RpbCSBucketReq (Prelude.Maybe Data.ByteString.ByteString)@ -}
data RpbCSBucketReq
  = RpbCSBucketReq'_constructor {_RpbCSBucketReq'bucket :: !Data.ByteString.ByteString,
                                 _RpbCSBucketReq'startKey :: !Data.ByteString.ByteString,
                                 _RpbCSBucketReq'endKey :: !(Prelude.Maybe Data.ByteString.ByteString),
                                 _RpbCSBucketReq'startIncl :: !(Prelude.Maybe Prelude.Bool),
                                 _RpbCSBucketReq'endIncl :: !(Prelude.Maybe Prelude.Bool),
                                 _RpbCSBucketReq'continuation :: !(Prelude.Maybe Data.ByteString.ByteString),
                                 _RpbCSBucketReq'maxResults :: !(Prelude.Maybe Data.Word.Word32),
                                 _RpbCSBucketReq'timeout :: !(Prelude.Maybe Data.Word.Word32),
                                 _RpbCSBucketReq'type' :: !(Prelude.Maybe Data.ByteString.ByteString),
                                 _RpbCSBucketReq'coverContext :: !(Prelude.Maybe Data.ByteString.ByteString),
                                 _RpbCSBucketReq'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbCSBucketReq where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbCSBucketReq "bucket" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCSBucketReq'bucket
           (\ x__ y__ -> x__ {_RpbCSBucketReq'bucket = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbCSBucketReq "startKey" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCSBucketReq'startKey
           (\ x__ y__ -> x__ {_RpbCSBucketReq'startKey = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbCSBucketReq "endKey" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCSBucketReq'endKey
           (\ x__ y__ -> x__ {_RpbCSBucketReq'endKey = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbCSBucketReq "maybe'endKey" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCSBucketReq'endKey
           (\ x__ y__ -> x__ {_RpbCSBucketReq'endKey = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbCSBucketReq "startIncl" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCSBucketReq'startIncl
           (\ x__ y__ -> x__ {_RpbCSBucketReq'startIncl = y__}))
        (Data.ProtoLens.maybeLens Prelude.True)
instance Data.ProtoLens.Field.HasField RpbCSBucketReq "maybe'startIncl" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCSBucketReq'startIncl
           (\ x__ y__ -> x__ {_RpbCSBucketReq'startIncl = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbCSBucketReq "endIncl" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCSBucketReq'endIncl
           (\ x__ y__ -> x__ {_RpbCSBucketReq'endIncl = y__}))
        (Data.ProtoLens.maybeLens Prelude.False)
instance Data.ProtoLens.Field.HasField RpbCSBucketReq "maybe'endIncl" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCSBucketReq'endIncl
           (\ x__ y__ -> x__ {_RpbCSBucketReq'endIncl = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbCSBucketReq "continuation" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCSBucketReq'continuation
           (\ x__ y__ -> x__ {_RpbCSBucketReq'continuation = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbCSBucketReq "maybe'continuation" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCSBucketReq'continuation
           (\ x__ y__ -> x__ {_RpbCSBucketReq'continuation = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbCSBucketReq "maxResults" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCSBucketReq'maxResults
           (\ x__ y__ -> x__ {_RpbCSBucketReq'maxResults = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbCSBucketReq "maybe'maxResults" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCSBucketReq'maxResults
           (\ x__ y__ -> x__ {_RpbCSBucketReq'maxResults = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbCSBucketReq "timeout" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCSBucketReq'timeout
           (\ x__ y__ -> x__ {_RpbCSBucketReq'timeout = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbCSBucketReq "maybe'timeout" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCSBucketReq'timeout
           (\ x__ y__ -> x__ {_RpbCSBucketReq'timeout = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbCSBucketReq "type'" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCSBucketReq'type'
           (\ x__ y__ -> x__ {_RpbCSBucketReq'type' = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbCSBucketReq "maybe'type'" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCSBucketReq'type'
           (\ x__ y__ -> x__ {_RpbCSBucketReq'type' = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbCSBucketReq "coverContext" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCSBucketReq'coverContext
           (\ x__ y__ -> x__ {_RpbCSBucketReq'coverContext = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbCSBucketReq "maybe'coverContext" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCSBucketReq'coverContext
           (\ x__ y__ -> x__ {_RpbCSBucketReq'coverContext = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbCSBucketReq where
  messageName _ = Data.Text.pack "RpbCSBucketReq"
  packedMessageDescriptor _
    = "\n\
      \\SORpbCSBucketReq\DC2\SYN\n\
      \\ACKbucket\CAN\SOH \STX(\fR\ACKbucket\DC2\ESC\n\
      \\tstart_key\CAN\STX \STX(\fR\bstartKey\DC2\ETB\n\
      \\aend_key\CAN\ETX \SOH(\fR\ACKendKey\DC2#\n\
      \\n\
      \start_incl\CAN\EOT \SOH(\b:\EOTtrueR\tstartIncl\DC2 \n\
      \\bend_incl\CAN\ENQ \SOH(\b:\ENQfalseR\aendIncl\DC2\"\n\
      \\fcontinuation\CAN\ACK \SOH(\fR\fcontinuation\DC2\US\n\
      \\vmax_results\CAN\a \SOH(\rR\n\
      \maxResults\DC2\CAN\n\
      \\atimeout\CAN\b \SOH(\rR\atimeout\DC2\DC2\n\
      \\EOTtype\CAN\t \SOH(\fR\EOTtype\DC2#\n\
      \\rcover_context\CAN\n\
      \ \SOH(\fR\fcoverContext"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        bucket__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "bucket"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"bucket")) ::
              Data.ProtoLens.FieldDescriptor RpbCSBucketReq
        startKey__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "start_key"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"startKey")) ::
              Data.ProtoLens.FieldDescriptor RpbCSBucketReq
        endKey__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "end_key"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'endKey")) ::
              Data.ProtoLens.FieldDescriptor RpbCSBucketReq
        startIncl__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "start_incl"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'startIncl")) ::
              Data.ProtoLens.FieldDescriptor RpbCSBucketReq
        endIncl__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "end_incl"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'endIncl")) ::
              Data.ProtoLens.FieldDescriptor RpbCSBucketReq
        continuation__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "continuation"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'continuation")) ::
              Data.ProtoLens.FieldDescriptor RpbCSBucketReq
        maxResults__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "max_results"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'maxResults")) ::
              Data.ProtoLens.FieldDescriptor RpbCSBucketReq
        timeout__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "timeout"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'timeout")) ::
              Data.ProtoLens.FieldDescriptor RpbCSBucketReq
        type'__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "type"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'type'")) ::
              Data.ProtoLens.FieldDescriptor RpbCSBucketReq
        coverContext__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "cover_context"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'coverContext")) ::
              Data.ProtoLens.FieldDescriptor RpbCSBucketReq
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, bucket__field_descriptor),
           (Data.ProtoLens.Tag 2, startKey__field_descriptor),
           (Data.ProtoLens.Tag 3, endKey__field_descriptor),
           (Data.ProtoLens.Tag 4, startIncl__field_descriptor),
           (Data.ProtoLens.Tag 5, endIncl__field_descriptor),
           (Data.ProtoLens.Tag 6, continuation__field_descriptor),
           (Data.ProtoLens.Tag 7, maxResults__field_descriptor),
           (Data.ProtoLens.Tag 8, timeout__field_descriptor),
           (Data.ProtoLens.Tag 9, type'__field_descriptor),
           (Data.ProtoLens.Tag 10, coverContext__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbCSBucketReq'_unknownFields
        (\ x__ y__ -> x__ {_RpbCSBucketReq'_unknownFields = y__})
  defMessage
    = RpbCSBucketReq'_constructor
        {_RpbCSBucketReq'bucket = Data.ProtoLens.fieldDefault,
         _RpbCSBucketReq'startKey = Data.ProtoLens.fieldDefault,
         _RpbCSBucketReq'endKey = Prelude.Nothing,
         _RpbCSBucketReq'startIncl = Prelude.Nothing,
         _RpbCSBucketReq'endIncl = Prelude.Nothing,
         _RpbCSBucketReq'continuation = Prelude.Nothing,
         _RpbCSBucketReq'maxResults = Prelude.Nothing,
         _RpbCSBucketReq'timeout = Prelude.Nothing,
         _RpbCSBucketReq'type' = Prelude.Nothing,
         _RpbCSBucketReq'coverContext = Prelude.Nothing,
         _RpbCSBucketReq'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbCSBucketReq
          -> Prelude.Bool
             -> Prelude.Bool
                -> Data.ProtoLens.Encoding.Bytes.Parser RpbCSBucketReq
        loop x required'bucket required'startKey
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'bucket then (:) "bucket" else Prelude.id)
                               ((if required'startKey then (:) "start_key" else Prelude.id) [])
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "bucket"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"bucket") y x)
                                  Prelude.False
                                  required'startKey
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "start_key"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"startKey") y x)
                                  required'bucket
                                  Prelude.False
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "end_key"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"endKey") y x)
                                  required'bucket
                                  required'startKey
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "start_incl"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"startIncl") y x)
                                  required'bucket
                                  required'startKey
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "end_incl"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"endIncl") y x)
                                  required'bucket
                                  required'startKey
                        50
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "continuation"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"continuation") y x)
                                  required'bucket
                                  required'startKey
                        56
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "max_results"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"maxResults") y x)
                                  required'bucket
                                  required'startKey
                        64
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "timeout"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"timeout") y x)
                                  required'bucket
                                  required'startKey
                        74
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "type"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"type'") y x)
                                  required'bucket
                                  required'startKey
                        82
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "cover_context"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"coverContext") y x)
                                  required'bucket
                                  required'startKey
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'bucket
                                  required'startKey
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True Prelude.True)
          "RpbCSBucketReq"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((\ bs
                    -> (Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"bucket") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                   ((\ bs
                       -> (Data.Monoid.<>)
                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                               (Prelude.fromIntegral (Data.ByteString.length bs)))
                            (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"startKey") _x)))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'endKey") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                             ((\ bs
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                         (Prelude.fromIntegral (Data.ByteString.length bs)))
                                      (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'startIncl") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt
                                   (\ b -> if b then 1 else 0)
                                   _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'endIncl") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (\ b -> if b then 1 else 0)
                                      _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view
                                   (Data.ProtoLens.Field.field @"maybe'continuation") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 50)
                                      ((\ bs
                                          -> (Data.Monoid.<>)
                                               (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                  (Prelude.fromIntegral
                                                     (Data.ByteString.length bs)))
                                               (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                         _v))
                            ((Data.Monoid.<>)
                               (case
                                    Lens.Family2.view
                                      (Data.ProtoLens.Field.field @"maybe'maxResults") _x
                                of
                                  Prelude.Nothing -> Data.Monoid.mempty
                                  (Prelude.Just _v)
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 56)
                                         ((Prelude..)
                                            Data.ProtoLens.Encoding.Bytes.putVarInt
                                            Prelude.fromIntegral
                                            _v))
                               ((Data.Monoid.<>)
                                  (case
                                       Lens.Family2.view
                                         (Data.ProtoLens.Field.field @"maybe'timeout") _x
                                   of
                                     Prelude.Nothing -> Data.Monoid.mempty
                                     (Prelude.Just _v)
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt 64)
                                            ((Prelude..)
                                               Data.ProtoLens.Encoding.Bytes.putVarInt
                                               Prelude.fromIntegral
                                               _v))
                                  ((Data.Monoid.<>)
                                     (case
                                          Lens.Family2.view
                                            (Data.ProtoLens.Field.field @"maybe'type'") _x
                                      of
                                        Prelude.Nothing -> Data.Monoid.mempty
                                        (Prelude.Just _v)
                                          -> (Data.Monoid.<>)
                                               (Data.ProtoLens.Encoding.Bytes.putVarInt 74)
                                               ((\ bs
                                                   -> (Data.Monoid.<>)
                                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                           (Prelude.fromIntegral
                                                              (Data.ByteString.length bs)))
                                                        (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                                  _v))
                                     ((Data.Monoid.<>)
                                        (case
                                             Lens.Family2.view
                                               (Data.ProtoLens.Field.field @"maybe'coverContext") _x
                                         of
                                           Prelude.Nothing -> Data.Monoid.mempty
                                           (Prelude.Just _v)
                                             -> (Data.Monoid.<>)
                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt 82)
                                                  ((\ bs
                                                      -> (Data.Monoid.<>)
                                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                              (Prelude.fromIntegral
                                                                 (Data.ByteString.length bs)))
                                                           (Data.ProtoLens.Encoding.Bytes.putBytes
                                                              bs))
                                                     _v))
                                        (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                           (Lens.Family2.view
                                              Data.ProtoLens.unknownFields _x)))))))))))
instance Control.DeepSeq.NFData RpbCSBucketReq where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbCSBucketReq'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_RpbCSBucketReq'bucket x__)
                (Control.DeepSeq.deepseq
                   (_RpbCSBucketReq'startKey x__)
                   (Control.DeepSeq.deepseq
                      (_RpbCSBucketReq'endKey x__)
                      (Control.DeepSeq.deepseq
                         (_RpbCSBucketReq'startIncl x__)
                         (Control.DeepSeq.deepseq
                            (_RpbCSBucketReq'endIncl x__)
                            (Control.DeepSeq.deepseq
                               (_RpbCSBucketReq'continuation x__)
                               (Control.DeepSeq.deepseq
                                  (_RpbCSBucketReq'maxResults x__)
                                  (Control.DeepSeq.deepseq
                                     (_RpbCSBucketReq'timeout x__)
                                     (Control.DeepSeq.deepseq
                                        (_RpbCSBucketReq'type' x__)
                                        (Control.DeepSeq.deepseq
                                           (_RpbCSBucketReq'coverContext x__) ()))))))))))
{- | Fields :
     
         * 'Proto.Riak_Fields.objects' @:: Lens' RpbCSBucketResp [RpbIndexObject]@
         * 'Proto.Riak_Fields.vec'objects' @:: Lens' RpbCSBucketResp (Data.Vector.Vector RpbIndexObject)@
         * 'Proto.Riak_Fields.continuation' @:: Lens' RpbCSBucketResp Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'continuation' @:: Lens' RpbCSBucketResp (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.done' @:: Lens' RpbCSBucketResp Prelude.Bool@
         * 'Proto.Riak_Fields.maybe'done' @:: Lens' RpbCSBucketResp (Prelude.Maybe Prelude.Bool)@ -}
data RpbCSBucketResp
  = RpbCSBucketResp'_constructor {_RpbCSBucketResp'objects :: !(Data.Vector.Vector RpbIndexObject),
                                  _RpbCSBucketResp'continuation :: !(Prelude.Maybe Data.ByteString.ByteString),
                                  _RpbCSBucketResp'done :: !(Prelude.Maybe Prelude.Bool),
                                  _RpbCSBucketResp'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbCSBucketResp where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbCSBucketResp "objects" [RpbIndexObject] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCSBucketResp'objects
           (\ x__ y__ -> x__ {_RpbCSBucketResp'objects = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField RpbCSBucketResp "vec'objects" (Data.Vector.Vector RpbIndexObject) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCSBucketResp'objects
           (\ x__ y__ -> x__ {_RpbCSBucketResp'objects = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbCSBucketResp "continuation" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCSBucketResp'continuation
           (\ x__ y__ -> x__ {_RpbCSBucketResp'continuation = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbCSBucketResp "maybe'continuation" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCSBucketResp'continuation
           (\ x__ y__ -> x__ {_RpbCSBucketResp'continuation = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbCSBucketResp "done" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCSBucketResp'done
           (\ x__ y__ -> x__ {_RpbCSBucketResp'done = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbCSBucketResp "maybe'done" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCSBucketResp'done
           (\ x__ y__ -> x__ {_RpbCSBucketResp'done = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbCSBucketResp where
  messageName _ = Data.Text.pack "RpbCSBucketResp"
  packedMessageDescriptor _
    = "\n\
      \\SIRpbCSBucketResp\DC2)\n\
      \\aobjects\CAN\SOH \ETX(\v2\SI.RpbIndexObjectR\aobjects\DC2\"\n\
      \\fcontinuation\CAN\STX \SOH(\fR\fcontinuation\DC2\DC2\n\
      \\EOTdone\CAN\ETX \SOH(\bR\EOTdone"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        objects__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "objects"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor RpbIndexObject)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"objects")) ::
              Data.ProtoLens.FieldDescriptor RpbCSBucketResp
        continuation__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "continuation"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'continuation")) ::
              Data.ProtoLens.FieldDescriptor RpbCSBucketResp
        done__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "done"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'done")) ::
              Data.ProtoLens.FieldDescriptor RpbCSBucketResp
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, objects__field_descriptor),
           (Data.ProtoLens.Tag 2, continuation__field_descriptor),
           (Data.ProtoLens.Tag 3, done__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbCSBucketResp'_unknownFields
        (\ x__ y__ -> x__ {_RpbCSBucketResp'_unknownFields = y__})
  defMessage
    = RpbCSBucketResp'_constructor
        {_RpbCSBucketResp'objects = Data.Vector.Generic.empty,
         _RpbCSBucketResp'continuation = Prelude.Nothing,
         _RpbCSBucketResp'done = Prelude.Nothing,
         _RpbCSBucketResp'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbCSBucketResp
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld RpbIndexObject
             -> Data.ProtoLens.Encoding.Bytes.Parser RpbCSBucketResp
        loop x mutable'objects
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'objects <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                          (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                             mutable'objects)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields
                           (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'objects") frozen'objects x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "objects"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'objects y)
                                loop x v
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "continuation"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"continuation") y x)
                                  mutable'objects
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "done"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"done") y x)
                                  mutable'objects
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'objects
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'objects <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                   Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage mutable'objects)
          "RpbCSBucketResp"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                (\ _v
                   -> (Data.Monoid.<>)
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                        ((Prelude..)
                           (\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Data.ProtoLens.encodeMessage
                           _v))
                (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'objects") _x))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'continuation") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'done") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt
                                (\ b -> if b then 1 else 0)
                                _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData RpbCSBucketResp where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbCSBucketResp'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_RpbCSBucketResp'objects x__)
                (Control.DeepSeq.deepseq
                   (_RpbCSBucketResp'continuation x__)
                   (Control.DeepSeq.deepseq (_RpbCSBucketResp'done x__) ())))
{- | Fields :
     
         * 'Proto.Riak_Fields.modfun' @:: Lens' RpbCommitHook RpbModFun@
         * 'Proto.Riak_Fields.maybe'modfun' @:: Lens' RpbCommitHook (Prelude.Maybe RpbModFun)@
         * 'Proto.Riak_Fields.name' @:: Lens' RpbCommitHook Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'name' @:: Lens' RpbCommitHook (Prelude.Maybe Data.ByteString.ByteString)@ -}
data RpbCommitHook
  = RpbCommitHook'_constructor {_RpbCommitHook'modfun :: !(Prelude.Maybe RpbModFun),
                                _RpbCommitHook'name :: !(Prelude.Maybe Data.ByteString.ByteString),
                                _RpbCommitHook'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbCommitHook where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbCommitHook "modfun" RpbModFun where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCommitHook'modfun
           (\ x__ y__ -> x__ {_RpbCommitHook'modfun = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField RpbCommitHook "maybe'modfun" (Prelude.Maybe RpbModFun) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCommitHook'modfun
           (\ x__ y__ -> x__ {_RpbCommitHook'modfun = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbCommitHook "name" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCommitHook'name (\ x__ y__ -> x__ {_RpbCommitHook'name = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbCommitHook "maybe'name" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCommitHook'name (\ x__ y__ -> x__ {_RpbCommitHook'name = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbCommitHook where
  messageName _ = Data.Text.pack "RpbCommitHook"
  packedMessageDescriptor _
    = "\n\
      \\rRpbCommitHook\DC2\"\n\
      \\ACKmodfun\CAN\SOH \SOH(\v2\n\
      \.RpbModFunR\ACKmodfun\DC2\DC2\n\
      \\EOTname\CAN\STX \SOH(\fR\EOTname"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        modfun__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "modfun"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor RpbModFun)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'modfun")) ::
              Data.ProtoLens.FieldDescriptor RpbCommitHook
        name__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "name"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'name")) ::
              Data.ProtoLens.FieldDescriptor RpbCommitHook
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, modfun__field_descriptor),
           (Data.ProtoLens.Tag 2, name__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbCommitHook'_unknownFields
        (\ x__ y__ -> x__ {_RpbCommitHook'_unknownFields = y__})
  defMessage
    = RpbCommitHook'_constructor
        {_RpbCommitHook'modfun = Prelude.Nothing,
         _RpbCommitHook'name = Prelude.Nothing,
         _RpbCommitHook'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbCommitHook -> Data.ProtoLens.Encoding.Bytes.Parser RpbCommitHook
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "modfun"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"modfun") y x)
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "name"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"name") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "RpbCommitHook"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'modfun") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.ProtoLens.encodeMessage
                          _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'name") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             _v))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData RpbCommitHook where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbCommitHook'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_RpbCommitHook'modfun x__)
                (Control.DeepSeq.deepseq (_RpbCommitHook'name x__) ()))
{- | Fields :
     
         * 'Proto.Riak_Fields.value' @:: Lens' RpbContent Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.contentType' @:: Lens' RpbContent Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'contentType' @:: Lens' RpbContent (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.charset' @:: Lens' RpbContent Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'charset' @:: Lens' RpbContent (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.contentEncoding' @:: Lens' RpbContent Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'contentEncoding' @:: Lens' RpbContent (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.vtag' @:: Lens' RpbContent Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'vtag' @:: Lens' RpbContent (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.links' @:: Lens' RpbContent [RpbLink]@
         * 'Proto.Riak_Fields.vec'links' @:: Lens' RpbContent (Data.Vector.Vector RpbLink)@
         * 'Proto.Riak_Fields.lastMod' @:: Lens' RpbContent Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'lastMod' @:: Lens' RpbContent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.lastModUsecs' @:: Lens' RpbContent Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'lastModUsecs' @:: Lens' RpbContent (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.usermeta' @:: Lens' RpbContent [RpbPair]@
         * 'Proto.Riak_Fields.vec'usermeta' @:: Lens' RpbContent (Data.Vector.Vector RpbPair)@
         * 'Proto.Riak_Fields.indexes' @:: Lens' RpbContent [RpbPair]@
         * 'Proto.Riak_Fields.vec'indexes' @:: Lens' RpbContent (Data.Vector.Vector RpbPair)@
         * 'Proto.Riak_Fields.deleted' @:: Lens' RpbContent Prelude.Bool@
         * 'Proto.Riak_Fields.maybe'deleted' @:: Lens' RpbContent (Prelude.Maybe Prelude.Bool)@
         * 'Proto.Riak_Fields.ttl' @:: Lens' RpbContent Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'ttl' @:: Lens' RpbContent (Prelude.Maybe Data.Word.Word32)@ -}
data RpbContent
  = RpbContent'_constructor {_RpbContent'value :: !Data.ByteString.ByteString,
                             _RpbContent'contentType :: !(Prelude.Maybe Data.ByteString.ByteString),
                             _RpbContent'charset :: !(Prelude.Maybe Data.ByteString.ByteString),
                             _RpbContent'contentEncoding :: !(Prelude.Maybe Data.ByteString.ByteString),
                             _RpbContent'vtag :: !(Prelude.Maybe Data.ByteString.ByteString),
                             _RpbContent'links :: !(Data.Vector.Vector RpbLink),
                             _RpbContent'lastMod :: !(Prelude.Maybe Data.Word.Word32),
                             _RpbContent'lastModUsecs :: !(Prelude.Maybe Data.Word.Word32),
                             _RpbContent'usermeta :: !(Data.Vector.Vector RpbPair),
                             _RpbContent'indexes :: !(Data.Vector.Vector RpbPair),
                             _RpbContent'deleted :: !(Prelude.Maybe Prelude.Bool),
                             _RpbContent'ttl :: !(Prelude.Maybe Data.Word.Word32),
                             _RpbContent'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbContent where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbContent "value" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbContent'value (\ x__ y__ -> x__ {_RpbContent'value = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbContent "contentType" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbContent'contentType
           (\ x__ y__ -> x__ {_RpbContent'contentType = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbContent "maybe'contentType" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbContent'contentType
           (\ x__ y__ -> x__ {_RpbContent'contentType = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbContent "charset" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbContent'charset (\ x__ y__ -> x__ {_RpbContent'charset = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbContent "maybe'charset" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbContent'charset (\ x__ y__ -> x__ {_RpbContent'charset = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbContent "contentEncoding" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbContent'contentEncoding
           (\ x__ y__ -> x__ {_RpbContent'contentEncoding = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbContent "maybe'contentEncoding" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbContent'contentEncoding
           (\ x__ y__ -> x__ {_RpbContent'contentEncoding = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbContent "vtag" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbContent'vtag (\ x__ y__ -> x__ {_RpbContent'vtag = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbContent "maybe'vtag" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbContent'vtag (\ x__ y__ -> x__ {_RpbContent'vtag = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbContent "links" [RpbLink] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbContent'links (\ x__ y__ -> x__ {_RpbContent'links = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField RpbContent "vec'links" (Data.Vector.Vector RpbLink) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbContent'links (\ x__ y__ -> x__ {_RpbContent'links = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbContent "lastMod" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbContent'lastMod (\ x__ y__ -> x__ {_RpbContent'lastMod = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbContent "maybe'lastMod" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbContent'lastMod (\ x__ y__ -> x__ {_RpbContent'lastMod = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbContent "lastModUsecs" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbContent'lastModUsecs
           (\ x__ y__ -> x__ {_RpbContent'lastModUsecs = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbContent "maybe'lastModUsecs" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbContent'lastModUsecs
           (\ x__ y__ -> x__ {_RpbContent'lastModUsecs = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbContent "usermeta" [RpbPair] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbContent'usermeta
           (\ x__ y__ -> x__ {_RpbContent'usermeta = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField RpbContent "vec'usermeta" (Data.Vector.Vector RpbPair) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbContent'usermeta
           (\ x__ y__ -> x__ {_RpbContent'usermeta = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbContent "indexes" [RpbPair] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbContent'indexes (\ x__ y__ -> x__ {_RpbContent'indexes = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField RpbContent "vec'indexes" (Data.Vector.Vector RpbPair) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbContent'indexes (\ x__ y__ -> x__ {_RpbContent'indexes = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbContent "deleted" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbContent'deleted (\ x__ y__ -> x__ {_RpbContent'deleted = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbContent "maybe'deleted" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbContent'deleted (\ x__ y__ -> x__ {_RpbContent'deleted = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbContent "ttl" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbContent'ttl (\ x__ y__ -> x__ {_RpbContent'ttl = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbContent "maybe'ttl" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbContent'ttl (\ x__ y__ -> x__ {_RpbContent'ttl = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbContent where
  messageName _ = Data.Text.pack "RpbContent"
  packedMessageDescriptor _
    = "\n\
      \\n\
      \RpbContent\DC2\DC4\n\
      \\ENQvalue\CAN\SOH \STX(\fR\ENQvalue\DC2!\n\
      \\fcontent_type\CAN\STX \SOH(\fR\vcontentType\DC2\CAN\n\
      \\acharset\CAN\ETX \SOH(\fR\acharset\DC2)\n\
      \\DLEcontent_encoding\CAN\EOT \SOH(\fR\SIcontentEncoding\DC2\DC2\n\
      \\EOTvtag\CAN\ENQ \SOH(\fR\EOTvtag\DC2\RS\n\
      \\ENQlinks\CAN\ACK \ETX(\v2\b.RpbLinkR\ENQlinks\DC2\EM\n\
      \\blast_mod\CAN\a \SOH(\rR\alastMod\DC2$\n\
      \\SOlast_mod_usecs\CAN\b \SOH(\rR\flastModUsecs\DC2$\n\
      \\busermeta\CAN\t \ETX(\v2\b.RpbPairR\busermeta\DC2\"\n\
      \\aindexes\CAN\n\
      \ \ETX(\v2\b.RpbPairR\aindexes\DC2\CAN\n\
      \\adeleted\CAN\v \SOH(\bR\adeleted\DC2\DLE\n\
      \\ETXttl\CAN\f \SOH(\rR\ETXttl"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        value__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "value"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"value")) ::
              Data.ProtoLens.FieldDescriptor RpbContent
        contentType__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "content_type"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'contentType")) ::
              Data.ProtoLens.FieldDescriptor RpbContent
        charset__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "charset"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'charset")) ::
              Data.ProtoLens.FieldDescriptor RpbContent
        contentEncoding__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "content_encoding"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'contentEncoding")) ::
              Data.ProtoLens.FieldDescriptor RpbContent
        vtag__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "vtag"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'vtag")) ::
              Data.ProtoLens.FieldDescriptor RpbContent
        links__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "links"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor RpbLink)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"links")) ::
              Data.ProtoLens.FieldDescriptor RpbContent
        lastMod__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "last_mod"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'lastMod")) ::
              Data.ProtoLens.FieldDescriptor RpbContent
        lastModUsecs__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "last_mod_usecs"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'lastModUsecs")) ::
              Data.ProtoLens.FieldDescriptor RpbContent
        usermeta__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "usermeta"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor RpbPair)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"usermeta")) ::
              Data.ProtoLens.FieldDescriptor RpbContent
        indexes__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "indexes"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor RpbPair)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"indexes")) ::
              Data.ProtoLens.FieldDescriptor RpbContent
        deleted__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "deleted"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'deleted")) ::
              Data.ProtoLens.FieldDescriptor RpbContent
        ttl__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ttl"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ttl")) ::
              Data.ProtoLens.FieldDescriptor RpbContent
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, value__field_descriptor),
           (Data.ProtoLens.Tag 2, contentType__field_descriptor),
           (Data.ProtoLens.Tag 3, charset__field_descriptor),
           (Data.ProtoLens.Tag 4, contentEncoding__field_descriptor),
           (Data.ProtoLens.Tag 5, vtag__field_descriptor),
           (Data.ProtoLens.Tag 6, links__field_descriptor),
           (Data.ProtoLens.Tag 7, lastMod__field_descriptor),
           (Data.ProtoLens.Tag 8, lastModUsecs__field_descriptor),
           (Data.ProtoLens.Tag 9, usermeta__field_descriptor),
           (Data.ProtoLens.Tag 10, indexes__field_descriptor),
           (Data.ProtoLens.Tag 11, deleted__field_descriptor),
           (Data.ProtoLens.Tag 12, ttl__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbContent'_unknownFields
        (\ x__ y__ -> x__ {_RpbContent'_unknownFields = y__})
  defMessage
    = RpbContent'_constructor
        {_RpbContent'value = Data.ProtoLens.fieldDefault,
         _RpbContent'contentType = Prelude.Nothing,
         _RpbContent'charset = Prelude.Nothing,
         _RpbContent'contentEncoding = Prelude.Nothing,
         _RpbContent'vtag = Prelude.Nothing,
         _RpbContent'links = Data.Vector.Generic.empty,
         _RpbContent'lastMod = Prelude.Nothing,
         _RpbContent'lastModUsecs = Prelude.Nothing,
         _RpbContent'usermeta = Data.Vector.Generic.empty,
         _RpbContent'indexes = Data.Vector.Generic.empty,
         _RpbContent'deleted = Prelude.Nothing,
         _RpbContent'ttl = Prelude.Nothing, _RpbContent'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbContent
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld RpbPair
                -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld RpbLink
                   -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld RpbPair
                      -> Data.ProtoLens.Encoding.Bytes.Parser RpbContent
        loop
          x
          required'value
          mutable'indexes
          mutable'links
          mutable'usermeta
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'indexes <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                          (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                             mutable'indexes)
                      frozen'links <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                        (Data.ProtoLens.Encoding.Growing.unsafeFreeze mutable'links)
                      frozen'usermeta <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                           (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                              mutable'usermeta)
                      (let
                         missing = (if required'value then (:) "value" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields
                           (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'indexes")
                              frozen'indexes
                              (Lens.Family2.set
                                 (Data.ProtoLens.Field.field @"vec'links")
                                 frozen'links
                                 (Lens.Family2.set
                                    (Data.ProtoLens.Field.field @"vec'usermeta")
                                    frozen'usermeta
                                    x))))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "value"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"value") y x)
                                  Prelude.False
                                  mutable'indexes
                                  mutable'links
                                  mutable'usermeta
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "content_type"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"contentType") y x)
                                  required'value
                                  mutable'indexes
                                  mutable'links
                                  mutable'usermeta
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "charset"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"charset") y x)
                                  required'value
                                  mutable'indexes
                                  mutable'links
                                  mutable'usermeta
                        34
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "content_encoding"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"contentEncoding") y x)
                                  required'value
                                  mutable'indexes
                                  mutable'links
                                  mutable'usermeta
                        42
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "vtag"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"vtag") y x)
                                  required'value
                                  mutable'indexes
                                  mutable'links
                                  mutable'usermeta
                        50
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "links"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'links y)
                                loop x required'value mutable'indexes v mutable'usermeta
                        56
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "last_mod"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"lastMod") y x)
                                  required'value
                                  mutable'indexes
                                  mutable'links
                                  mutable'usermeta
                        64
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "last_mod_usecs"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"lastModUsecs") y x)
                                  required'value
                                  mutable'indexes
                                  mutable'links
                                  mutable'usermeta
                        74
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "usermeta"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'usermeta y)
                                loop x required'value mutable'indexes mutable'links v
                        82
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "indexes"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'indexes y)
                                loop x required'value v mutable'links mutable'usermeta
                        88
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "deleted"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"deleted") y x)
                                  required'value
                                  mutable'indexes
                                  mutable'links
                                  mutable'usermeta
                        96
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "ttl"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"ttl") y x)
                                  required'value
                                  mutable'indexes
                                  mutable'links
                                  mutable'usermeta
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'value
                                  mutable'indexes
                                  mutable'links
                                  mutable'usermeta
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'indexes <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                   Data.ProtoLens.Encoding.Growing.new
              mutable'links <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                 Data.ProtoLens.Encoding.Growing.new
              mutable'usermeta <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                    Data.ProtoLens.Encoding.Growing.new
              loop
                Data.ProtoLens.defMessage
                Prelude.True
                mutable'indexes
                mutable'links
                mutable'usermeta)
          "RpbContent"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((\ bs
                    -> (Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"value") _x)))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'contentType") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'charset") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                             ((\ bs
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                         (Prelude.fromIntegral (Data.ByteString.length bs)))
                                      (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'contentEncoding") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                                ((\ bs
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'vtag") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 42)
                                   ((\ bs
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                                               (Prelude.fromIntegral (Data.ByteString.length bs)))
                                            (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                      _v))
                         ((Data.Monoid.<>)
                            (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                               (\ _v
                                  -> (Data.Monoid.<>)
                                       (Data.ProtoLens.Encoding.Bytes.putVarInt 50)
                                       ((Prelude..)
                                          (\ bs
                                             -> (Data.Monoid.<>)
                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                     (Prelude.fromIntegral
                                                        (Data.ByteString.length bs)))
                                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                          Data.ProtoLens.encodeMessage
                                          _v))
                               (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'links") _x))
                            ((Data.Monoid.<>)
                               (case
                                    Lens.Family2.view
                                      (Data.ProtoLens.Field.field @"maybe'lastMod") _x
                                of
                                  Prelude.Nothing -> Data.Monoid.mempty
                                  (Prelude.Just _v)
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 56)
                                         ((Prelude..)
                                            Data.ProtoLens.Encoding.Bytes.putVarInt
                                            Prelude.fromIntegral
                                            _v))
                               ((Data.Monoid.<>)
                                  (case
                                       Lens.Family2.view
                                         (Data.ProtoLens.Field.field @"maybe'lastModUsecs") _x
                                   of
                                     Prelude.Nothing -> Data.Monoid.mempty
                                     (Prelude.Just _v)
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt 64)
                                            ((Prelude..)
                                               Data.ProtoLens.Encoding.Bytes.putVarInt
                                               Prelude.fromIntegral
                                               _v))
                                  ((Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                                        (\ _v
                                           -> (Data.Monoid.<>)
                                                (Data.ProtoLens.Encoding.Bytes.putVarInt 74)
                                                ((Prelude..)
                                                   (\ bs
                                                      -> (Data.Monoid.<>)
                                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                              (Prelude.fromIntegral
                                                                 (Data.ByteString.length bs)))
                                                           (Data.ProtoLens.Encoding.Bytes.putBytes
                                                              bs))
                                                   Data.ProtoLens.encodeMessage
                                                   _v))
                                        (Lens.Family2.view
                                           (Data.ProtoLens.Field.field @"vec'usermeta") _x))
                                     ((Data.Monoid.<>)
                                        (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                                           (\ _v
                                              -> (Data.Monoid.<>)
                                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 82)
                                                   ((Prelude..)
                                                      (\ bs
                                                         -> (Data.Monoid.<>)
                                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                 (Prelude.fromIntegral
                                                                    (Data.ByteString.length bs)))
                                                              (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                 bs))
                                                      Data.ProtoLens.encodeMessage
                                                      _v))
                                           (Lens.Family2.view
                                              (Data.ProtoLens.Field.field @"vec'indexes") _x))
                                        ((Data.Monoid.<>)
                                           (case
                                                Lens.Family2.view
                                                  (Data.ProtoLens.Field.field @"maybe'deleted") _x
                                            of
                                              Prelude.Nothing -> Data.Monoid.mempty
                                              (Prelude.Just _v)
                                                -> (Data.Monoid.<>)
                                                     (Data.ProtoLens.Encoding.Bytes.putVarInt 88)
                                                     ((Prelude..)
                                                        Data.ProtoLens.Encoding.Bytes.putVarInt
                                                        (\ b -> if b then 1 else 0)
                                                        _v))
                                           ((Data.Monoid.<>)
                                              (case
                                                   Lens.Family2.view
                                                     (Data.ProtoLens.Field.field @"maybe'ttl") _x
                                               of
                                                 Prelude.Nothing -> Data.Monoid.mempty
                                                 (Prelude.Just _v)
                                                   -> (Data.Monoid.<>)
                                                        (Data.ProtoLens.Encoding.Bytes.putVarInt 96)
                                                        ((Prelude..)
                                                           Data.ProtoLens.Encoding.Bytes.putVarInt
                                                           Prelude.fromIntegral
                                                           _v))
                                              (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                                 (Lens.Family2.view
                                                    Data.ProtoLens.unknownFields _x)))))))))))))
instance Control.DeepSeq.NFData RpbContent where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbContent'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_RpbContent'value x__)
                (Control.DeepSeq.deepseq
                   (_RpbContent'contentType x__)
                   (Control.DeepSeq.deepseq
                      (_RpbContent'charset x__)
                      (Control.DeepSeq.deepseq
                         (_RpbContent'contentEncoding x__)
                         (Control.DeepSeq.deepseq
                            (_RpbContent'vtag x__)
                            (Control.DeepSeq.deepseq
                               (_RpbContent'links x__)
                               (Control.DeepSeq.deepseq
                                  (_RpbContent'lastMod x__)
                                  (Control.DeepSeq.deepseq
                                     (_RpbContent'lastModUsecs x__)
                                     (Control.DeepSeq.deepseq
                                        (_RpbContent'usermeta x__)
                                        (Control.DeepSeq.deepseq
                                           (_RpbContent'indexes x__)
                                           (Control.DeepSeq.deepseq
                                              (_RpbContent'deleted x__)
                                              (Control.DeepSeq.deepseq
                                                 (_RpbContent'ttl x__) ()))))))))))))
{- | Fields :
     
         * 'Proto.Riak_Fields.bucket' @:: Lens' RpbCounterGetReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.key' @:: Lens' RpbCounterGetReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.r' @:: Lens' RpbCounterGetReq Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'r' @:: Lens' RpbCounterGetReq (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.pr' @:: Lens' RpbCounterGetReq Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'pr' @:: Lens' RpbCounterGetReq (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.basicQuorum' @:: Lens' RpbCounterGetReq Prelude.Bool@
         * 'Proto.Riak_Fields.maybe'basicQuorum' @:: Lens' RpbCounterGetReq (Prelude.Maybe Prelude.Bool)@
         * 'Proto.Riak_Fields.notfoundOk' @:: Lens' RpbCounterGetReq Prelude.Bool@
         * 'Proto.Riak_Fields.maybe'notfoundOk' @:: Lens' RpbCounterGetReq (Prelude.Maybe Prelude.Bool)@ -}
data RpbCounterGetReq
  = RpbCounterGetReq'_constructor {_RpbCounterGetReq'bucket :: !Data.ByteString.ByteString,
                                   _RpbCounterGetReq'key :: !Data.ByteString.ByteString,
                                   _RpbCounterGetReq'r :: !(Prelude.Maybe Data.Word.Word32),
                                   _RpbCounterGetReq'pr :: !(Prelude.Maybe Data.Word.Word32),
                                   _RpbCounterGetReq'basicQuorum :: !(Prelude.Maybe Prelude.Bool),
                                   _RpbCounterGetReq'notfoundOk :: !(Prelude.Maybe Prelude.Bool),
                                   _RpbCounterGetReq'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbCounterGetReq where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbCounterGetReq "bucket" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCounterGetReq'bucket
           (\ x__ y__ -> x__ {_RpbCounterGetReq'bucket = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbCounterGetReq "key" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCounterGetReq'key
           (\ x__ y__ -> x__ {_RpbCounterGetReq'key = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbCounterGetReq "r" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCounterGetReq'r (\ x__ y__ -> x__ {_RpbCounterGetReq'r = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbCounterGetReq "maybe'r" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCounterGetReq'r (\ x__ y__ -> x__ {_RpbCounterGetReq'r = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbCounterGetReq "pr" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCounterGetReq'pr
           (\ x__ y__ -> x__ {_RpbCounterGetReq'pr = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbCounterGetReq "maybe'pr" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCounterGetReq'pr
           (\ x__ y__ -> x__ {_RpbCounterGetReq'pr = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbCounterGetReq "basicQuorum" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCounterGetReq'basicQuorum
           (\ x__ y__ -> x__ {_RpbCounterGetReq'basicQuorum = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbCounterGetReq "maybe'basicQuorum" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCounterGetReq'basicQuorum
           (\ x__ y__ -> x__ {_RpbCounterGetReq'basicQuorum = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbCounterGetReq "notfoundOk" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCounterGetReq'notfoundOk
           (\ x__ y__ -> x__ {_RpbCounterGetReq'notfoundOk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbCounterGetReq "maybe'notfoundOk" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCounterGetReq'notfoundOk
           (\ x__ y__ -> x__ {_RpbCounterGetReq'notfoundOk = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbCounterGetReq where
  messageName _ = Data.Text.pack "RpbCounterGetReq"
  packedMessageDescriptor _
    = "\n\
      \\DLERpbCounterGetReq\DC2\SYN\n\
      \\ACKbucket\CAN\SOH \STX(\fR\ACKbucket\DC2\DLE\n\
      \\ETXkey\CAN\STX \STX(\fR\ETXkey\DC2\f\n\
      \\SOHr\CAN\ETX \SOH(\rR\SOHr\DC2\SO\n\
      \\STXpr\CAN\EOT \SOH(\rR\STXpr\DC2!\n\
      \\fbasic_quorum\CAN\ENQ \SOH(\bR\vbasicQuorum\DC2\US\n\
      \\vnotfound_ok\CAN\ACK \SOH(\bR\n\
      \notfoundOk"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        bucket__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "bucket"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"bucket")) ::
              Data.ProtoLens.FieldDescriptor RpbCounterGetReq
        key__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "key"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"key")) ::
              Data.ProtoLens.FieldDescriptor RpbCounterGetReq
        r__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "r"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'r")) ::
              Data.ProtoLens.FieldDescriptor RpbCounterGetReq
        pr__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pr"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'pr")) ::
              Data.ProtoLens.FieldDescriptor RpbCounterGetReq
        basicQuorum__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "basic_quorum"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'basicQuorum")) ::
              Data.ProtoLens.FieldDescriptor RpbCounterGetReq
        notfoundOk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "notfound_ok"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'notfoundOk")) ::
              Data.ProtoLens.FieldDescriptor RpbCounterGetReq
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, bucket__field_descriptor),
           (Data.ProtoLens.Tag 2, key__field_descriptor),
           (Data.ProtoLens.Tag 3, r__field_descriptor),
           (Data.ProtoLens.Tag 4, pr__field_descriptor),
           (Data.ProtoLens.Tag 5, basicQuorum__field_descriptor),
           (Data.ProtoLens.Tag 6, notfoundOk__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbCounterGetReq'_unknownFields
        (\ x__ y__ -> x__ {_RpbCounterGetReq'_unknownFields = y__})
  defMessage
    = RpbCounterGetReq'_constructor
        {_RpbCounterGetReq'bucket = Data.ProtoLens.fieldDefault,
         _RpbCounterGetReq'key = Data.ProtoLens.fieldDefault,
         _RpbCounterGetReq'r = Prelude.Nothing,
         _RpbCounterGetReq'pr = Prelude.Nothing,
         _RpbCounterGetReq'basicQuorum = Prelude.Nothing,
         _RpbCounterGetReq'notfoundOk = Prelude.Nothing,
         _RpbCounterGetReq'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbCounterGetReq
          -> Prelude.Bool
             -> Prelude.Bool
                -> Data.ProtoLens.Encoding.Bytes.Parser RpbCounterGetReq
        loop x required'bucket required'key
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'bucket then (:) "bucket" else Prelude.id)
                               ((if required'key then (:) "key" else Prelude.id) [])
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "bucket"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"bucket") y x)
                                  Prelude.False
                                  required'key
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "key"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"key") y x)
                                  required'bucket
                                  Prelude.False
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "r"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"r") y x)
                                  required'bucket
                                  required'key
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "pr"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"pr") y x)
                                  required'bucket
                                  required'key
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "basic_quorum"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"basicQuorum") y x)
                                  required'bucket
                                  required'key
                        48
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "notfound_ok"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"notfoundOk") y x)
                                  required'bucket
                                  required'key
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'bucket
                                  required'key
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True Prelude.True)
          "RpbCounterGetReq"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((\ bs
                    -> (Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"bucket") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                   ((\ bs
                       -> (Data.Monoid.<>)
                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                               (Prelude.fromIntegral (Data.ByteString.length bs)))
                            (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"key") _x)))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'r") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'pr") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view
                                (Data.ProtoLens.Field.field @"maybe'basicQuorum") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (\ b -> if b then 1 else 0)
                                      _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view
                                   (Data.ProtoLens.Field.field @"maybe'notfoundOk") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 48)
                                      ((Prelude..)
                                         Data.ProtoLens.Encoding.Bytes.putVarInt
                                         (\ b -> if b then 1 else 0)
                                         _v))
                            (Data.ProtoLens.Encoding.Wire.buildFieldSet
                               (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))))
instance Control.DeepSeq.NFData RpbCounterGetReq where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbCounterGetReq'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_RpbCounterGetReq'bucket x__)
                (Control.DeepSeq.deepseq
                   (_RpbCounterGetReq'key x__)
                   (Control.DeepSeq.deepseq
                      (_RpbCounterGetReq'r x__)
                      (Control.DeepSeq.deepseq
                         (_RpbCounterGetReq'pr x__)
                         (Control.DeepSeq.deepseq
                            (_RpbCounterGetReq'basicQuorum x__)
                            (Control.DeepSeq.deepseq
                               (_RpbCounterGetReq'notfoundOk x__) ()))))))
{- | Fields :
     
         * 'Proto.Riak_Fields.value' @:: Lens' RpbCounterGetResp Data.Int.Int64@
         * 'Proto.Riak_Fields.maybe'value' @:: Lens' RpbCounterGetResp (Prelude.Maybe Data.Int.Int64)@ -}
data RpbCounterGetResp
  = RpbCounterGetResp'_constructor {_RpbCounterGetResp'value :: !(Prelude.Maybe Data.Int.Int64),
                                    _RpbCounterGetResp'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbCounterGetResp where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbCounterGetResp "value" Data.Int.Int64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCounterGetResp'value
           (\ x__ y__ -> x__ {_RpbCounterGetResp'value = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbCounterGetResp "maybe'value" (Prelude.Maybe Data.Int.Int64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCounterGetResp'value
           (\ x__ y__ -> x__ {_RpbCounterGetResp'value = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbCounterGetResp where
  messageName _ = Data.Text.pack "RpbCounterGetResp"
  packedMessageDescriptor _
    = "\n\
      \\DC1RpbCounterGetResp\DC2\DC4\n\
      \\ENQvalue\CAN\SOH \SOH(\DC2R\ENQvalue"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        value__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "value"
              (Data.ProtoLens.ScalarField Data.ProtoLens.SInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'value")) ::
              Data.ProtoLens.FieldDescriptor RpbCounterGetResp
      in
        Data.Map.fromList [(Data.ProtoLens.Tag 1, value__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbCounterGetResp'_unknownFields
        (\ x__ y__ -> x__ {_RpbCounterGetResp'_unknownFields = y__})
  defMessage
    = RpbCounterGetResp'_constructor
        {_RpbCounterGetResp'value = Prelude.Nothing,
         _RpbCounterGetResp'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbCounterGetResp
          -> Data.ProtoLens.Encoding.Bytes.Parser RpbCounterGetResp
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Data.ProtoLens.Encoding.Bytes.wordToSignedInt64
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "value"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"value") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "RpbCounterGetResp"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'value") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       ((Prelude..)
                          ((Prelude..)
                             Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                          Data.ProtoLens.Encoding.Bytes.signedInt64ToWord
                          _v))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData RpbCounterGetResp where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbCounterGetResp'_unknownFields x__)
             (Control.DeepSeq.deepseq (_RpbCounterGetResp'value x__) ())
{- | Fields :
     
         * 'Proto.Riak_Fields.bucket' @:: Lens' RpbCounterUpdateReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.key' @:: Lens' RpbCounterUpdateReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.amount' @:: Lens' RpbCounterUpdateReq Data.Int.Int64@
         * 'Proto.Riak_Fields.w' @:: Lens' RpbCounterUpdateReq Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'w' @:: Lens' RpbCounterUpdateReq (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.dw' @:: Lens' RpbCounterUpdateReq Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'dw' @:: Lens' RpbCounterUpdateReq (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.pw' @:: Lens' RpbCounterUpdateReq Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'pw' @:: Lens' RpbCounterUpdateReq (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.returnvalue' @:: Lens' RpbCounterUpdateReq Prelude.Bool@
         * 'Proto.Riak_Fields.maybe'returnvalue' @:: Lens' RpbCounterUpdateReq (Prelude.Maybe Prelude.Bool)@ -}
data RpbCounterUpdateReq
  = RpbCounterUpdateReq'_constructor {_RpbCounterUpdateReq'bucket :: !Data.ByteString.ByteString,
                                      _RpbCounterUpdateReq'key :: !Data.ByteString.ByteString,
                                      _RpbCounterUpdateReq'amount :: !Data.Int.Int64,
                                      _RpbCounterUpdateReq'w :: !(Prelude.Maybe Data.Word.Word32),
                                      _RpbCounterUpdateReq'dw :: !(Prelude.Maybe Data.Word.Word32),
                                      _RpbCounterUpdateReq'pw :: !(Prelude.Maybe Data.Word.Word32),
                                      _RpbCounterUpdateReq'returnvalue :: !(Prelude.Maybe Prelude.Bool),
                                      _RpbCounterUpdateReq'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbCounterUpdateReq where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbCounterUpdateReq "bucket" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCounterUpdateReq'bucket
           (\ x__ y__ -> x__ {_RpbCounterUpdateReq'bucket = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbCounterUpdateReq "key" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCounterUpdateReq'key
           (\ x__ y__ -> x__ {_RpbCounterUpdateReq'key = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbCounterUpdateReq "amount" Data.Int.Int64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCounterUpdateReq'amount
           (\ x__ y__ -> x__ {_RpbCounterUpdateReq'amount = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbCounterUpdateReq "w" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCounterUpdateReq'w
           (\ x__ y__ -> x__ {_RpbCounterUpdateReq'w = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbCounterUpdateReq "maybe'w" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCounterUpdateReq'w
           (\ x__ y__ -> x__ {_RpbCounterUpdateReq'w = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbCounterUpdateReq "dw" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCounterUpdateReq'dw
           (\ x__ y__ -> x__ {_RpbCounterUpdateReq'dw = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbCounterUpdateReq "maybe'dw" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCounterUpdateReq'dw
           (\ x__ y__ -> x__ {_RpbCounterUpdateReq'dw = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbCounterUpdateReq "pw" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCounterUpdateReq'pw
           (\ x__ y__ -> x__ {_RpbCounterUpdateReq'pw = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbCounterUpdateReq "maybe'pw" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCounterUpdateReq'pw
           (\ x__ y__ -> x__ {_RpbCounterUpdateReq'pw = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbCounterUpdateReq "returnvalue" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCounterUpdateReq'returnvalue
           (\ x__ y__ -> x__ {_RpbCounterUpdateReq'returnvalue = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbCounterUpdateReq "maybe'returnvalue" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCounterUpdateReq'returnvalue
           (\ x__ y__ -> x__ {_RpbCounterUpdateReq'returnvalue = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbCounterUpdateReq where
  messageName _ = Data.Text.pack "RpbCounterUpdateReq"
  packedMessageDescriptor _
    = "\n\
      \\DC3RpbCounterUpdateReq\DC2\SYN\n\
      \\ACKbucket\CAN\SOH \STX(\fR\ACKbucket\DC2\DLE\n\
      \\ETXkey\CAN\STX \STX(\fR\ETXkey\DC2\SYN\n\
      \\ACKamount\CAN\ETX \STX(\DC2R\ACKamount\DC2\f\n\
      \\SOHw\CAN\EOT \SOH(\rR\SOHw\DC2\SO\n\
      \\STXdw\CAN\ENQ \SOH(\rR\STXdw\DC2\SO\n\
      \\STXpw\CAN\ACK \SOH(\rR\STXpw\DC2 \n\
      \\vreturnvalue\CAN\a \SOH(\bR\vreturnvalue"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        bucket__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "bucket"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"bucket")) ::
              Data.ProtoLens.FieldDescriptor RpbCounterUpdateReq
        key__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "key"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"key")) ::
              Data.ProtoLens.FieldDescriptor RpbCounterUpdateReq
        amount__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "amount"
              (Data.ProtoLens.ScalarField Data.ProtoLens.SInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"amount")) ::
              Data.ProtoLens.FieldDescriptor RpbCounterUpdateReq
        w__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "w"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'w")) ::
              Data.ProtoLens.FieldDescriptor RpbCounterUpdateReq
        dw__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dw"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dw")) ::
              Data.ProtoLens.FieldDescriptor RpbCounterUpdateReq
        pw__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pw"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'pw")) ::
              Data.ProtoLens.FieldDescriptor RpbCounterUpdateReq
        returnvalue__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "returnvalue"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'returnvalue")) ::
              Data.ProtoLens.FieldDescriptor RpbCounterUpdateReq
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, bucket__field_descriptor),
           (Data.ProtoLens.Tag 2, key__field_descriptor),
           (Data.ProtoLens.Tag 3, amount__field_descriptor),
           (Data.ProtoLens.Tag 4, w__field_descriptor),
           (Data.ProtoLens.Tag 5, dw__field_descriptor),
           (Data.ProtoLens.Tag 6, pw__field_descriptor),
           (Data.ProtoLens.Tag 7, returnvalue__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbCounterUpdateReq'_unknownFields
        (\ x__ y__ -> x__ {_RpbCounterUpdateReq'_unknownFields = y__})
  defMessage
    = RpbCounterUpdateReq'_constructor
        {_RpbCounterUpdateReq'bucket = Data.ProtoLens.fieldDefault,
         _RpbCounterUpdateReq'key = Data.ProtoLens.fieldDefault,
         _RpbCounterUpdateReq'amount = Data.ProtoLens.fieldDefault,
         _RpbCounterUpdateReq'w = Prelude.Nothing,
         _RpbCounterUpdateReq'dw = Prelude.Nothing,
         _RpbCounterUpdateReq'pw = Prelude.Nothing,
         _RpbCounterUpdateReq'returnvalue = Prelude.Nothing,
         _RpbCounterUpdateReq'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbCounterUpdateReq
          -> Prelude.Bool
             -> Prelude.Bool
                -> Prelude.Bool
                   -> Data.ProtoLens.Encoding.Bytes.Parser RpbCounterUpdateReq
        loop x required'amount required'bucket required'key
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'amount then (:) "amount" else Prelude.id)
                               ((if required'bucket then (:) "bucket" else Prelude.id)
                                  ((if required'key then (:) "key" else Prelude.id) []))
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "bucket"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"bucket") y x)
                                  required'amount
                                  Prelude.False
                                  required'key
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "key"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"key") y x)
                                  required'amount
                                  required'bucket
                                  Prelude.False
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Data.ProtoLens.Encoding.Bytes.wordToSignedInt64
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "amount"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"amount") y x)
                                  Prelude.False
                                  required'bucket
                                  required'key
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "w"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"w") y x)
                                  required'amount
                                  required'bucket
                                  required'key
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "dw"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"dw") y x)
                                  required'amount
                                  required'bucket
                                  required'key
                        48
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "pw"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"pw") y x)
                                  required'amount
                                  required'bucket
                                  required'key
                        56
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "returnvalue"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"returnvalue") y x)
                                  required'amount
                                  required'bucket
                                  required'key
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'amount
                                  required'bucket
                                  required'key
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop
                Data.ProtoLens.defMessage Prelude.True Prelude.True Prelude.True)
          "RpbCounterUpdateReq"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((\ bs
                    -> (Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"bucket") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                   ((\ bs
                       -> (Data.Monoid.<>)
                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                               (Prelude.fromIntegral (Data.ByteString.length bs)))
                            (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"key") _x)))
                ((Data.Monoid.<>)
                   ((Data.Monoid.<>)
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                      ((Prelude..)
                         ((Prelude..)
                            Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                         Data.ProtoLens.Encoding.Bytes.signedInt64ToWord
                         (Lens.Family2.view (Data.ProtoLens.Field.field @"amount") _x)))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'w") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dw") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt
                                      Prelude.fromIntegral
                                      _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'pw") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 48)
                                      ((Prelude..)
                                         Data.ProtoLens.Encoding.Bytes.putVarInt
                                         Prelude.fromIntegral
                                         _v))
                            ((Data.Monoid.<>)
                               (case
                                    Lens.Family2.view
                                      (Data.ProtoLens.Field.field @"maybe'returnvalue") _x
                                of
                                  Prelude.Nothing -> Data.Monoid.mempty
                                  (Prelude.Just _v)
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 56)
                                         ((Prelude..)
                                            Data.ProtoLens.Encoding.Bytes.putVarInt
                                            (\ b -> if b then 1 else 0)
                                            _v))
                               (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                  (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))))
instance Control.DeepSeq.NFData RpbCounterUpdateReq where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbCounterUpdateReq'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_RpbCounterUpdateReq'bucket x__)
                (Control.DeepSeq.deepseq
                   (_RpbCounterUpdateReq'key x__)
                   (Control.DeepSeq.deepseq
                      (_RpbCounterUpdateReq'amount x__)
                      (Control.DeepSeq.deepseq
                         (_RpbCounterUpdateReq'w x__)
                         (Control.DeepSeq.deepseq
                            (_RpbCounterUpdateReq'dw x__)
                            (Control.DeepSeq.deepseq
                               (_RpbCounterUpdateReq'pw x__)
                               (Control.DeepSeq.deepseq
                                  (_RpbCounterUpdateReq'returnvalue x__) ())))))))
{- | Fields :
     
         * 'Proto.Riak_Fields.value' @:: Lens' RpbCounterUpdateResp Data.Int.Int64@
         * 'Proto.Riak_Fields.maybe'value' @:: Lens' RpbCounterUpdateResp (Prelude.Maybe Data.Int.Int64)@ -}
data RpbCounterUpdateResp
  = RpbCounterUpdateResp'_constructor {_RpbCounterUpdateResp'value :: !(Prelude.Maybe Data.Int.Int64),
                                       _RpbCounterUpdateResp'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbCounterUpdateResp where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbCounterUpdateResp "value" Data.Int.Int64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCounterUpdateResp'value
           (\ x__ y__ -> x__ {_RpbCounterUpdateResp'value = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbCounterUpdateResp "maybe'value" (Prelude.Maybe Data.Int.Int64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCounterUpdateResp'value
           (\ x__ y__ -> x__ {_RpbCounterUpdateResp'value = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbCounterUpdateResp where
  messageName _ = Data.Text.pack "RpbCounterUpdateResp"
  packedMessageDescriptor _
    = "\n\
      \\DC4RpbCounterUpdateResp\DC2\DC4\n\
      \\ENQvalue\CAN\SOH \SOH(\DC2R\ENQvalue"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        value__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "value"
              (Data.ProtoLens.ScalarField Data.ProtoLens.SInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'value")) ::
              Data.ProtoLens.FieldDescriptor RpbCounterUpdateResp
      in
        Data.Map.fromList [(Data.ProtoLens.Tag 1, value__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbCounterUpdateResp'_unknownFields
        (\ x__ y__ -> x__ {_RpbCounterUpdateResp'_unknownFields = y__})
  defMessage
    = RpbCounterUpdateResp'_constructor
        {_RpbCounterUpdateResp'value = Prelude.Nothing,
         _RpbCounterUpdateResp'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbCounterUpdateResp
          -> Data.ProtoLens.Encoding.Bytes.Parser RpbCounterUpdateResp
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Data.ProtoLens.Encoding.Bytes.wordToSignedInt64
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "value"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"value") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "RpbCounterUpdateResp"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'value") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       ((Prelude..)
                          ((Prelude..)
                             Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                          Data.ProtoLens.Encoding.Bytes.signedInt64ToWord
                          _v))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData RpbCounterUpdateResp where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbCounterUpdateResp'_unknownFields x__)
             (Control.DeepSeq.deepseq (_RpbCounterUpdateResp'value x__) ())
{- | Fields :
     
         * 'Proto.Riak_Fields.ip' @:: Lens' RpbCoverageEntry Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.port' @:: Lens' RpbCoverageEntry Data.Word.Word32@
         * 'Proto.Riak_Fields.keyspaceDesc' @:: Lens' RpbCoverageEntry Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'keyspaceDesc' @:: Lens' RpbCoverageEntry (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.coverContext' @:: Lens' RpbCoverageEntry Data.ByteString.ByteString@ -}
data RpbCoverageEntry
  = RpbCoverageEntry'_constructor {_RpbCoverageEntry'ip :: !Data.ByteString.ByteString,
                                   _RpbCoverageEntry'port :: !Data.Word.Word32,
                                   _RpbCoverageEntry'keyspaceDesc :: !(Prelude.Maybe Data.ByteString.ByteString),
                                   _RpbCoverageEntry'coverContext :: !Data.ByteString.ByteString,
                                   _RpbCoverageEntry'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbCoverageEntry where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbCoverageEntry "ip" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCoverageEntry'ip
           (\ x__ y__ -> x__ {_RpbCoverageEntry'ip = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbCoverageEntry "port" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCoverageEntry'port
           (\ x__ y__ -> x__ {_RpbCoverageEntry'port = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbCoverageEntry "keyspaceDesc" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCoverageEntry'keyspaceDesc
           (\ x__ y__ -> x__ {_RpbCoverageEntry'keyspaceDesc = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbCoverageEntry "maybe'keyspaceDesc" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCoverageEntry'keyspaceDesc
           (\ x__ y__ -> x__ {_RpbCoverageEntry'keyspaceDesc = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbCoverageEntry "coverContext" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCoverageEntry'coverContext
           (\ x__ y__ -> x__ {_RpbCoverageEntry'coverContext = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbCoverageEntry where
  messageName _ = Data.Text.pack "RpbCoverageEntry"
  packedMessageDescriptor _
    = "\n\
      \\DLERpbCoverageEntry\DC2\SO\n\
      \\STXip\CAN\SOH \STX(\fR\STXip\DC2\DC2\n\
      \\EOTport\CAN\STX \STX(\rR\EOTport\DC2#\n\
      \\rkeyspace_desc\CAN\ETX \SOH(\fR\fkeyspaceDesc\DC2#\n\
      \\rcover_context\CAN\EOT \STX(\fR\fcoverContext"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        ip__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ip"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"ip")) ::
              Data.ProtoLens.FieldDescriptor RpbCoverageEntry
        port__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "port"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"port")) ::
              Data.ProtoLens.FieldDescriptor RpbCoverageEntry
        keyspaceDesc__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "keyspace_desc"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'keyspaceDesc")) ::
              Data.ProtoLens.FieldDescriptor RpbCoverageEntry
        coverContext__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "cover_context"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"coverContext")) ::
              Data.ProtoLens.FieldDescriptor RpbCoverageEntry
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, ip__field_descriptor),
           (Data.ProtoLens.Tag 2, port__field_descriptor),
           (Data.ProtoLens.Tag 3, keyspaceDesc__field_descriptor),
           (Data.ProtoLens.Tag 4, coverContext__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbCoverageEntry'_unknownFields
        (\ x__ y__ -> x__ {_RpbCoverageEntry'_unknownFields = y__})
  defMessage
    = RpbCoverageEntry'_constructor
        {_RpbCoverageEntry'ip = Data.ProtoLens.fieldDefault,
         _RpbCoverageEntry'port = Data.ProtoLens.fieldDefault,
         _RpbCoverageEntry'keyspaceDesc = Prelude.Nothing,
         _RpbCoverageEntry'coverContext = Data.ProtoLens.fieldDefault,
         _RpbCoverageEntry'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbCoverageEntry
          -> Prelude.Bool
             -> Prelude.Bool
                -> Prelude.Bool
                   -> Data.ProtoLens.Encoding.Bytes.Parser RpbCoverageEntry
        loop x required'coverContext required'ip required'port
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'coverContext then
                                  (:) "cover_context"
                              else
                                  Prelude.id)
                               ((if required'ip then (:) "ip" else Prelude.id)
                                  ((if required'port then (:) "port" else Prelude.id) []))
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "ip"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"ip") y x)
                                  required'coverContext
                                  Prelude.False
                                  required'port
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "port"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"port") y x)
                                  required'coverContext
                                  required'ip
                                  Prelude.False
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "keyspace_desc"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"keyspaceDesc") y x)
                                  required'coverContext
                                  required'ip
                                  required'port
                        34
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "cover_context"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"coverContext") y x)
                                  Prelude.False
                                  required'ip
                                  required'port
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'coverContext
                                  required'ip
                                  required'port
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop
                Data.ProtoLens.defMessage Prelude.True Prelude.True Prelude.True)
          "RpbCoverageEntry"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((\ bs
                    -> (Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"ip") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                   ((Prelude..)
                      Data.ProtoLens.Encoding.Bytes.putVarInt
                      Prelude.fromIntegral
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"port") _x)))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'keyspaceDesc") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                             ((\ bs
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                         (Prelude.fromIntegral (Data.ByteString.length bs)))
                                      (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                _v))
                   ((Data.Monoid.<>)
                      ((Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                         ((\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                            (Lens.Family2.view
                               (Data.ProtoLens.Field.field @"coverContext") _x)))
                      (Data.ProtoLens.Encoding.Wire.buildFieldSet
                         (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))
instance Control.DeepSeq.NFData RpbCoverageEntry where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbCoverageEntry'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_RpbCoverageEntry'ip x__)
                (Control.DeepSeq.deepseq
                   (_RpbCoverageEntry'port x__)
                   (Control.DeepSeq.deepseq
                      (_RpbCoverageEntry'keyspaceDesc x__)
                      (Control.DeepSeq.deepseq
                         (_RpbCoverageEntry'coverContext x__) ()))))
{- | Fields :
     
         * 'Proto.Riak_Fields.type'' @:: Lens' RpbCoverageReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'type'' @:: Lens' RpbCoverageReq (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.bucket' @:: Lens' RpbCoverageReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.minPartitions' @:: Lens' RpbCoverageReq Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'minPartitions' @:: Lens' RpbCoverageReq (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.replaceCover' @:: Lens' RpbCoverageReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'replaceCover' @:: Lens' RpbCoverageReq (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.unavailableCover' @:: Lens' RpbCoverageReq [Data.ByteString.ByteString]@
         * 'Proto.Riak_Fields.vec'unavailableCover' @:: Lens' RpbCoverageReq (Data.Vector.Vector Data.ByteString.ByteString)@ -}
data RpbCoverageReq
  = RpbCoverageReq'_constructor {_RpbCoverageReq'type' :: !(Prelude.Maybe Data.ByteString.ByteString),
                                 _RpbCoverageReq'bucket :: !Data.ByteString.ByteString,
                                 _RpbCoverageReq'minPartitions :: !(Prelude.Maybe Data.Word.Word32),
                                 _RpbCoverageReq'replaceCover :: !(Prelude.Maybe Data.ByteString.ByteString),
                                 _RpbCoverageReq'unavailableCover :: !(Data.Vector.Vector Data.ByteString.ByteString),
                                 _RpbCoverageReq'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbCoverageReq where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbCoverageReq "type'" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCoverageReq'type'
           (\ x__ y__ -> x__ {_RpbCoverageReq'type' = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbCoverageReq "maybe'type'" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCoverageReq'type'
           (\ x__ y__ -> x__ {_RpbCoverageReq'type' = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbCoverageReq "bucket" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCoverageReq'bucket
           (\ x__ y__ -> x__ {_RpbCoverageReq'bucket = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbCoverageReq "minPartitions" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCoverageReq'minPartitions
           (\ x__ y__ -> x__ {_RpbCoverageReq'minPartitions = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbCoverageReq "maybe'minPartitions" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCoverageReq'minPartitions
           (\ x__ y__ -> x__ {_RpbCoverageReq'minPartitions = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbCoverageReq "replaceCover" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCoverageReq'replaceCover
           (\ x__ y__ -> x__ {_RpbCoverageReq'replaceCover = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbCoverageReq "maybe'replaceCover" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCoverageReq'replaceCover
           (\ x__ y__ -> x__ {_RpbCoverageReq'replaceCover = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbCoverageReq "unavailableCover" [Data.ByteString.ByteString] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCoverageReq'unavailableCover
           (\ x__ y__ -> x__ {_RpbCoverageReq'unavailableCover = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField RpbCoverageReq "vec'unavailableCover" (Data.Vector.Vector Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCoverageReq'unavailableCover
           (\ x__ y__ -> x__ {_RpbCoverageReq'unavailableCover = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbCoverageReq where
  messageName _ = Data.Text.pack "RpbCoverageReq"
  packedMessageDescriptor _
    = "\n\
      \\SORpbCoverageReq\DC2\DC2\n\
      \\EOTtype\CAN\SOH \SOH(\fR\EOTtype\DC2\SYN\n\
      \\ACKbucket\CAN\STX \STX(\fR\ACKbucket\DC2%\n\
      \\SOmin_partitions\CAN\ETX \SOH(\rR\rminPartitions\DC2#\n\
      \\rreplace_cover\CAN\EOT \SOH(\fR\freplaceCover\DC2+\n\
      \\DC1unavailable_cover\CAN\ENQ \ETX(\fR\DLEunavailableCover"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        type'__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "type"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'type'")) ::
              Data.ProtoLens.FieldDescriptor RpbCoverageReq
        bucket__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "bucket"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"bucket")) ::
              Data.ProtoLens.FieldDescriptor RpbCoverageReq
        minPartitions__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "min_partitions"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'minPartitions")) ::
              Data.ProtoLens.FieldDescriptor RpbCoverageReq
        replaceCover__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "replace_cover"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'replaceCover")) ::
              Data.ProtoLens.FieldDescriptor RpbCoverageReq
        unavailableCover__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "unavailable_cover"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"unavailableCover")) ::
              Data.ProtoLens.FieldDescriptor RpbCoverageReq
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, type'__field_descriptor),
           (Data.ProtoLens.Tag 2, bucket__field_descriptor),
           (Data.ProtoLens.Tag 3, minPartitions__field_descriptor),
           (Data.ProtoLens.Tag 4, replaceCover__field_descriptor),
           (Data.ProtoLens.Tag 5, unavailableCover__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbCoverageReq'_unknownFields
        (\ x__ y__ -> x__ {_RpbCoverageReq'_unknownFields = y__})
  defMessage
    = RpbCoverageReq'_constructor
        {_RpbCoverageReq'type' = Prelude.Nothing,
         _RpbCoverageReq'bucket = Data.ProtoLens.fieldDefault,
         _RpbCoverageReq'minPartitions = Prelude.Nothing,
         _RpbCoverageReq'replaceCover = Prelude.Nothing,
         _RpbCoverageReq'unavailableCover = Data.Vector.Generic.empty,
         _RpbCoverageReq'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbCoverageReq
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld Data.ByteString.ByteString
                -> Data.ProtoLens.Encoding.Bytes.Parser RpbCoverageReq
        loop x required'bucket mutable'unavailableCover
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'unavailableCover <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                   (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                      mutable'unavailableCover)
                      (let
                         missing = (if required'bucket then (:) "bucket" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields
                           (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'unavailableCover")
                              frozen'unavailableCover
                              x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "type"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"type'") y x)
                                  required'bucket
                                  mutable'unavailableCover
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "bucket"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"bucket") y x)
                                  Prelude.False
                                  mutable'unavailableCover
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "min_partitions"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"minPartitions") y x)
                                  required'bucket
                                  mutable'unavailableCover
                        34
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "replace_cover"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"replaceCover") y x)
                                  required'bucket
                                  mutable'unavailableCover
                        42
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.getBytes
                                              (Prelude.fromIntegral len))
                                        "unavailable_cover"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append
                                          mutable'unavailableCover y)
                                loop x required'bucket v
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'bucket
                                  mutable'unavailableCover
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'unavailableCover <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                            Data.ProtoLens.Encoding.Growing.new
              loop
                Data.ProtoLens.defMessage Prelude.True mutable'unavailableCover)
          "RpbCoverageReq"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'type'") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((\ bs
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt
                                   (Prelude.fromIntegral (Data.ByteString.length bs)))
                                (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          _v))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                   ((\ bs
                       -> (Data.Monoid.<>)
                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                               (Prelude.fromIntegral (Data.ByteString.length bs)))
                            (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"bucket") _x)))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'minPartitions") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'replaceCover") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                                ((\ bs
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   _v))
                      ((Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                            (\ _v
                               -> (Data.Monoid.<>)
                                    (Data.ProtoLens.Encoding.Bytes.putVarInt 42)
                                    ((\ bs
                                        -> (Data.Monoid.<>)
                                             (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                (Prelude.fromIntegral (Data.ByteString.length bs)))
                                             (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                       _v))
                            (Lens.Family2.view
                               (Data.ProtoLens.Field.field @"vec'unavailableCover") _x))
                         (Data.ProtoLens.Encoding.Wire.buildFieldSet
                            (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))
instance Control.DeepSeq.NFData RpbCoverageReq where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbCoverageReq'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_RpbCoverageReq'type' x__)
                (Control.DeepSeq.deepseq
                   (_RpbCoverageReq'bucket x__)
                   (Control.DeepSeq.deepseq
                      (_RpbCoverageReq'minPartitions x__)
                      (Control.DeepSeq.deepseq
                         (_RpbCoverageReq'replaceCover x__)
                         (Control.DeepSeq.deepseq
                            (_RpbCoverageReq'unavailableCover x__) ())))))
{- | Fields :
     
         * 'Proto.Riak_Fields.entries' @:: Lens' RpbCoverageResp [RpbCoverageEntry]@
         * 'Proto.Riak_Fields.vec'entries' @:: Lens' RpbCoverageResp (Data.Vector.Vector RpbCoverageEntry)@ -}
data RpbCoverageResp
  = RpbCoverageResp'_constructor {_RpbCoverageResp'entries :: !(Data.Vector.Vector RpbCoverageEntry),
                                  _RpbCoverageResp'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbCoverageResp where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbCoverageResp "entries" [RpbCoverageEntry] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCoverageResp'entries
           (\ x__ y__ -> x__ {_RpbCoverageResp'entries = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField RpbCoverageResp "vec'entries" (Data.Vector.Vector RpbCoverageEntry) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbCoverageResp'entries
           (\ x__ y__ -> x__ {_RpbCoverageResp'entries = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbCoverageResp where
  messageName _ = Data.Text.pack "RpbCoverageResp"
  packedMessageDescriptor _
    = "\n\
      \\SIRpbCoverageResp\DC2+\n\
      \\aentries\CAN\SOH \ETX(\v2\DC1.RpbCoverageEntryR\aentries"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        entries__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "entries"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor RpbCoverageEntry)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"entries")) ::
              Data.ProtoLens.FieldDescriptor RpbCoverageResp
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, entries__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbCoverageResp'_unknownFields
        (\ x__ y__ -> x__ {_RpbCoverageResp'_unknownFields = y__})
  defMessage
    = RpbCoverageResp'_constructor
        {_RpbCoverageResp'entries = Data.Vector.Generic.empty,
         _RpbCoverageResp'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbCoverageResp
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld RpbCoverageEntry
             -> Data.ProtoLens.Encoding.Bytes.Parser RpbCoverageResp
        loop x mutable'entries
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'entries <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                          (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                             mutable'entries)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields
                           (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'entries") frozen'entries x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "entries"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'entries y)
                                loop x v
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'entries
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'entries <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                   Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage mutable'entries)
          "RpbCoverageResp"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                (\ _v
                   -> (Data.Monoid.<>)
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                        ((Prelude..)
                           (\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Data.ProtoLens.encodeMessage
                           _v))
                (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'entries") _x))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData RpbCoverageResp where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbCoverageResp'_unknownFields x__)
             (Control.DeepSeq.deepseq (_RpbCoverageResp'entries x__) ())
{- | Fields :
     
         * 'Proto.Riak_Fields.bucket' @:: Lens' RpbDelReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.key' @:: Lens' RpbDelReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.rw' @:: Lens' RpbDelReq Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'rw' @:: Lens' RpbDelReq (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.vclock' @:: Lens' RpbDelReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'vclock' @:: Lens' RpbDelReq (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.r' @:: Lens' RpbDelReq Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'r' @:: Lens' RpbDelReq (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.w' @:: Lens' RpbDelReq Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'w' @:: Lens' RpbDelReq (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.pr' @:: Lens' RpbDelReq Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'pr' @:: Lens' RpbDelReq (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.pw' @:: Lens' RpbDelReq Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'pw' @:: Lens' RpbDelReq (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.dw' @:: Lens' RpbDelReq Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'dw' @:: Lens' RpbDelReq (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.timeout' @:: Lens' RpbDelReq Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'timeout' @:: Lens' RpbDelReq (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.sloppyQuorum' @:: Lens' RpbDelReq Prelude.Bool@
         * 'Proto.Riak_Fields.maybe'sloppyQuorum' @:: Lens' RpbDelReq (Prelude.Maybe Prelude.Bool)@
         * 'Proto.Riak_Fields.nVal' @:: Lens' RpbDelReq Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'nVal' @:: Lens' RpbDelReq (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.type'' @:: Lens' RpbDelReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'type'' @:: Lens' RpbDelReq (Prelude.Maybe Data.ByteString.ByteString)@ -}
data RpbDelReq
  = RpbDelReq'_constructor {_RpbDelReq'bucket :: !Data.ByteString.ByteString,
                            _RpbDelReq'key :: !Data.ByteString.ByteString,
                            _RpbDelReq'rw :: !(Prelude.Maybe Data.Word.Word32),
                            _RpbDelReq'vclock :: !(Prelude.Maybe Data.ByteString.ByteString),
                            _RpbDelReq'r :: !(Prelude.Maybe Data.Word.Word32),
                            _RpbDelReq'w :: !(Prelude.Maybe Data.Word.Word32),
                            _RpbDelReq'pr :: !(Prelude.Maybe Data.Word.Word32),
                            _RpbDelReq'pw :: !(Prelude.Maybe Data.Word.Word32),
                            _RpbDelReq'dw :: !(Prelude.Maybe Data.Word.Word32),
                            _RpbDelReq'timeout :: !(Prelude.Maybe Data.Word.Word32),
                            _RpbDelReq'sloppyQuorum :: !(Prelude.Maybe Prelude.Bool),
                            _RpbDelReq'nVal :: !(Prelude.Maybe Data.Word.Word32),
                            _RpbDelReq'type' :: !(Prelude.Maybe Data.ByteString.ByteString),
                            _RpbDelReq'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbDelReq where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbDelReq "bucket" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbDelReq'bucket (\ x__ y__ -> x__ {_RpbDelReq'bucket = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbDelReq "key" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbDelReq'key (\ x__ y__ -> x__ {_RpbDelReq'key = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbDelReq "rw" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbDelReq'rw (\ x__ y__ -> x__ {_RpbDelReq'rw = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbDelReq "maybe'rw" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbDelReq'rw (\ x__ y__ -> x__ {_RpbDelReq'rw = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbDelReq "vclock" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbDelReq'vclock (\ x__ y__ -> x__ {_RpbDelReq'vclock = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbDelReq "maybe'vclock" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbDelReq'vclock (\ x__ y__ -> x__ {_RpbDelReq'vclock = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbDelReq "r" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbDelReq'r (\ x__ y__ -> x__ {_RpbDelReq'r = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbDelReq "maybe'r" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbDelReq'r (\ x__ y__ -> x__ {_RpbDelReq'r = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbDelReq "w" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbDelReq'w (\ x__ y__ -> x__ {_RpbDelReq'w = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbDelReq "maybe'w" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbDelReq'w (\ x__ y__ -> x__ {_RpbDelReq'w = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbDelReq "pr" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbDelReq'pr (\ x__ y__ -> x__ {_RpbDelReq'pr = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbDelReq "maybe'pr" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbDelReq'pr (\ x__ y__ -> x__ {_RpbDelReq'pr = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbDelReq "pw" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbDelReq'pw (\ x__ y__ -> x__ {_RpbDelReq'pw = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbDelReq "maybe'pw" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbDelReq'pw (\ x__ y__ -> x__ {_RpbDelReq'pw = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbDelReq "dw" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbDelReq'dw (\ x__ y__ -> x__ {_RpbDelReq'dw = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbDelReq "maybe'dw" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbDelReq'dw (\ x__ y__ -> x__ {_RpbDelReq'dw = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbDelReq "timeout" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbDelReq'timeout (\ x__ y__ -> x__ {_RpbDelReq'timeout = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbDelReq "maybe'timeout" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbDelReq'timeout (\ x__ y__ -> x__ {_RpbDelReq'timeout = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbDelReq "sloppyQuorum" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbDelReq'sloppyQuorum
           (\ x__ y__ -> x__ {_RpbDelReq'sloppyQuorum = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbDelReq "maybe'sloppyQuorum" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbDelReq'sloppyQuorum
           (\ x__ y__ -> x__ {_RpbDelReq'sloppyQuorum = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbDelReq "nVal" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbDelReq'nVal (\ x__ y__ -> x__ {_RpbDelReq'nVal = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbDelReq "maybe'nVal" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbDelReq'nVal (\ x__ y__ -> x__ {_RpbDelReq'nVal = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbDelReq "type'" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbDelReq'type' (\ x__ y__ -> x__ {_RpbDelReq'type' = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbDelReq "maybe'type'" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbDelReq'type' (\ x__ y__ -> x__ {_RpbDelReq'type' = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbDelReq where
  messageName _ = Data.Text.pack "RpbDelReq"
  packedMessageDescriptor _
    = "\n\
      \\tRpbDelReq\DC2\SYN\n\
      \\ACKbucket\CAN\SOH \STX(\fR\ACKbucket\DC2\DLE\n\
      \\ETXkey\CAN\STX \STX(\fR\ETXkey\DC2\SO\n\
      \\STXrw\CAN\ETX \SOH(\rR\STXrw\DC2\SYN\n\
      \\ACKvclock\CAN\EOT \SOH(\fR\ACKvclock\DC2\f\n\
      \\SOHr\CAN\ENQ \SOH(\rR\SOHr\DC2\f\n\
      \\SOHw\CAN\ACK \SOH(\rR\SOHw\DC2\SO\n\
      \\STXpr\CAN\a \SOH(\rR\STXpr\DC2\SO\n\
      \\STXpw\CAN\b \SOH(\rR\STXpw\DC2\SO\n\
      \\STXdw\CAN\t \SOH(\rR\STXdw\DC2\CAN\n\
      \\atimeout\CAN\n\
      \ \SOH(\rR\atimeout\DC2#\n\
      \\rsloppy_quorum\CAN\v \SOH(\bR\fsloppyQuorum\DC2\DC3\n\
      \\ENQn_val\CAN\f \SOH(\rR\EOTnVal\DC2\DC2\n\
      \\EOTtype\CAN\r \SOH(\fR\EOTtype"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        bucket__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "bucket"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"bucket")) ::
              Data.ProtoLens.FieldDescriptor RpbDelReq
        key__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "key"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"key")) ::
              Data.ProtoLens.FieldDescriptor RpbDelReq
        rw__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "rw"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'rw")) ::
              Data.ProtoLens.FieldDescriptor RpbDelReq
        vclock__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "vclock"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'vclock")) ::
              Data.ProtoLens.FieldDescriptor RpbDelReq
        r__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "r"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'r")) ::
              Data.ProtoLens.FieldDescriptor RpbDelReq
        w__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "w"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'w")) ::
              Data.ProtoLens.FieldDescriptor RpbDelReq
        pr__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pr"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'pr")) ::
              Data.ProtoLens.FieldDescriptor RpbDelReq
        pw__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pw"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'pw")) ::
              Data.ProtoLens.FieldDescriptor RpbDelReq
        dw__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dw"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dw")) ::
              Data.ProtoLens.FieldDescriptor RpbDelReq
        timeout__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "timeout"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'timeout")) ::
              Data.ProtoLens.FieldDescriptor RpbDelReq
        sloppyQuorum__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "sloppy_quorum"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'sloppyQuorum")) ::
              Data.ProtoLens.FieldDescriptor RpbDelReq
        nVal__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "n_val"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'nVal")) ::
              Data.ProtoLens.FieldDescriptor RpbDelReq
        type'__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "type"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'type'")) ::
              Data.ProtoLens.FieldDescriptor RpbDelReq
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, bucket__field_descriptor),
           (Data.ProtoLens.Tag 2, key__field_descriptor),
           (Data.ProtoLens.Tag 3, rw__field_descriptor),
           (Data.ProtoLens.Tag 4, vclock__field_descriptor),
           (Data.ProtoLens.Tag 5, r__field_descriptor),
           (Data.ProtoLens.Tag 6, w__field_descriptor),
           (Data.ProtoLens.Tag 7, pr__field_descriptor),
           (Data.ProtoLens.Tag 8, pw__field_descriptor),
           (Data.ProtoLens.Tag 9, dw__field_descriptor),
           (Data.ProtoLens.Tag 10, timeout__field_descriptor),
           (Data.ProtoLens.Tag 11, sloppyQuorum__field_descriptor),
           (Data.ProtoLens.Tag 12, nVal__field_descriptor),
           (Data.ProtoLens.Tag 13, type'__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbDelReq'_unknownFields
        (\ x__ y__ -> x__ {_RpbDelReq'_unknownFields = y__})
  defMessage
    = RpbDelReq'_constructor
        {_RpbDelReq'bucket = Data.ProtoLens.fieldDefault,
         _RpbDelReq'key = Data.ProtoLens.fieldDefault,
         _RpbDelReq'rw = Prelude.Nothing,
         _RpbDelReq'vclock = Prelude.Nothing,
         _RpbDelReq'r = Prelude.Nothing, _RpbDelReq'w = Prelude.Nothing,
         _RpbDelReq'pr = Prelude.Nothing, _RpbDelReq'pw = Prelude.Nothing,
         _RpbDelReq'dw = Prelude.Nothing,
         _RpbDelReq'timeout = Prelude.Nothing,
         _RpbDelReq'sloppyQuorum = Prelude.Nothing,
         _RpbDelReq'nVal = Prelude.Nothing,
         _RpbDelReq'type' = Prelude.Nothing, _RpbDelReq'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbDelReq
          -> Prelude.Bool
             -> Prelude.Bool -> Data.ProtoLens.Encoding.Bytes.Parser RpbDelReq
        loop x required'bucket required'key
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'bucket then (:) "bucket" else Prelude.id)
                               ((if required'key then (:) "key" else Prelude.id) [])
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "bucket"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"bucket") y x)
                                  Prelude.False
                                  required'key
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "key"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"key") y x)
                                  required'bucket
                                  Prelude.False
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "rw"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"rw") y x)
                                  required'bucket
                                  required'key
                        34
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "vclock"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"vclock") y x)
                                  required'bucket
                                  required'key
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "r"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"r") y x)
                                  required'bucket
                                  required'key
                        48
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "w"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"w") y x)
                                  required'bucket
                                  required'key
                        56
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "pr"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"pr") y x)
                                  required'bucket
                                  required'key
                        64
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "pw"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"pw") y x)
                                  required'bucket
                                  required'key
                        72
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "dw"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"dw") y x)
                                  required'bucket
                                  required'key
                        80
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "timeout"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"timeout") y x)
                                  required'bucket
                                  required'key
                        88
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "sloppy_quorum"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"sloppyQuorum") y x)
                                  required'bucket
                                  required'key
                        96
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "n_val"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"nVal") y x)
                                  required'bucket
                                  required'key
                        106
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "type"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"type'") y x)
                                  required'bucket
                                  required'key
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'bucket
                                  required'key
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True Prelude.True)
          "RpbDelReq"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((\ bs
                    -> (Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"bucket") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                   ((\ bs
                       -> (Data.Monoid.<>)
                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                               (Prelude.fromIntegral (Data.ByteString.length bs)))
                            (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"key") _x)))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'rw") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'vclock") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                                ((\ bs
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'r") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt
                                      Prelude.fromIntegral
                                      _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'w") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 48)
                                      ((Prelude..)
                                         Data.ProtoLens.Encoding.Bytes.putVarInt
                                         Prelude.fromIntegral
                                         _v))
                            ((Data.Monoid.<>)
                               (case
                                    Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'pr") _x
                                of
                                  Prelude.Nothing -> Data.Monoid.mempty
                                  (Prelude.Just _v)
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 56)
                                         ((Prelude..)
                                            Data.ProtoLens.Encoding.Bytes.putVarInt
                                            Prelude.fromIntegral
                                            _v))
                               ((Data.Monoid.<>)
                                  (case
                                       Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'pw") _x
                                   of
                                     Prelude.Nothing -> Data.Monoid.mempty
                                     (Prelude.Just _v)
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt 64)
                                            ((Prelude..)
                                               Data.ProtoLens.Encoding.Bytes.putVarInt
                                               Prelude.fromIntegral
                                               _v))
                                  ((Data.Monoid.<>)
                                     (case
                                          Lens.Family2.view
                                            (Data.ProtoLens.Field.field @"maybe'dw") _x
                                      of
                                        Prelude.Nothing -> Data.Monoid.mempty
                                        (Prelude.Just _v)
                                          -> (Data.Monoid.<>)
                                               (Data.ProtoLens.Encoding.Bytes.putVarInt 72)
                                               ((Prelude..)
                                                  Data.ProtoLens.Encoding.Bytes.putVarInt
                                                  Prelude.fromIntegral
                                                  _v))
                                     ((Data.Monoid.<>)
                                        (case
                                             Lens.Family2.view
                                               (Data.ProtoLens.Field.field @"maybe'timeout") _x
                                         of
                                           Prelude.Nothing -> Data.Monoid.mempty
                                           (Prelude.Just _v)
                                             -> (Data.Monoid.<>)
                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt 80)
                                                  ((Prelude..)
                                                     Data.ProtoLens.Encoding.Bytes.putVarInt
                                                     Prelude.fromIntegral
                                                     _v))
                                        ((Data.Monoid.<>)
                                           (case
                                                Lens.Family2.view
                                                  (Data.ProtoLens.Field.field @"maybe'sloppyQuorum")
                                                  _x
                                            of
                                              Prelude.Nothing -> Data.Monoid.mempty
                                              (Prelude.Just _v)
                                                -> (Data.Monoid.<>)
                                                     (Data.ProtoLens.Encoding.Bytes.putVarInt 88)
                                                     ((Prelude..)
                                                        Data.ProtoLens.Encoding.Bytes.putVarInt
                                                        (\ b -> if b then 1 else 0)
                                                        _v))
                                           ((Data.Monoid.<>)
                                              (case
                                                   Lens.Family2.view
                                                     (Data.ProtoLens.Field.field @"maybe'nVal") _x
                                               of
                                                 Prelude.Nothing -> Data.Monoid.mempty
                                                 (Prelude.Just _v)
                                                   -> (Data.Monoid.<>)
                                                        (Data.ProtoLens.Encoding.Bytes.putVarInt 96)
                                                        ((Prelude..)
                                                           Data.ProtoLens.Encoding.Bytes.putVarInt
                                                           Prelude.fromIntegral
                                                           _v))
                                              ((Data.Monoid.<>)
                                                 (case
                                                      Lens.Family2.view
                                                        (Data.ProtoLens.Field.field @"maybe'type'")
                                                        _x
                                                  of
                                                    Prelude.Nothing -> Data.Monoid.mempty
                                                    (Prelude.Just _v)
                                                      -> (Data.Monoid.<>)
                                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                              106)
                                                           ((\ bs
                                                               -> (Data.Monoid.<>)
                                                                    (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                       (Prelude.fromIntegral
                                                                          (Data.ByteString.length
                                                                             bs)))
                                                                    (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                       bs))
                                                              _v))
                                                 (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                                    (Lens.Family2.view
                                                       Data.ProtoLens.unknownFields _x))))))))))))))
instance Control.DeepSeq.NFData RpbDelReq where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbDelReq'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_RpbDelReq'bucket x__)
                (Control.DeepSeq.deepseq
                   (_RpbDelReq'key x__)
                   (Control.DeepSeq.deepseq
                      (_RpbDelReq'rw x__)
                      (Control.DeepSeq.deepseq
                         (_RpbDelReq'vclock x__)
                         (Control.DeepSeq.deepseq
                            (_RpbDelReq'r x__)
                            (Control.DeepSeq.deepseq
                               (_RpbDelReq'w x__)
                               (Control.DeepSeq.deepseq
                                  (_RpbDelReq'pr x__)
                                  (Control.DeepSeq.deepseq
                                     (_RpbDelReq'pw x__)
                                     (Control.DeepSeq.deepseq
                                        (_RpbDelReq'dw x__)
                                        (Control.DeepSeq.deepseq
                                           (_RpbDelReq'timeout x__)
                                           (Control.DeepSeq.deepseq
                                              (_RpbDelReq'sloppyQuorum x__)
                                              (Control.DeepSeq.deepseq
                                                 (_RpbDelReq'nVal x__)
                                                 (Control.DeepSeq.deepseq
                                                    (_RpbDelReq'type' x__) ())))))))))))))
{- | Fields :
      -}
data RpbDelResp
  = RpbDelResp'_constructor {_RpbDelResp'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbDelResp where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message RpbDelResp where
  messageName _ = Data.Text.pack "RpbDelResp"
  packedMessageDescriptor _
    = "\n\
      \\n\
      \RpbDelResp"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag = let in Data.Map.fromList []
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbDelResp'_unknownFields
        (\ x__ y__ -> x__ {_RpbDelResp'_unknownFields = y__})
  defMessage
    = RpbDelResp'_constructor {_RpbDelResp'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbDelResp -> Data.ProtoLens.Encoding.Bytes.Parser RpbDelResp
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of {
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x) }
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "RpbDelResp"
  buildMessage
    = \ _x
        -> Data.ProtoLens.Encoding.Wire.buildFieldSet
             (Lens.Family2.view Data.ProtoLens.unknownFields _x)
instance Control.DeepSeq.NFData RpbDelResp where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq (_RpbDelResp'_unknownFields x__) ()
{- | Fields :
     
         * 'Proto.Riak_Fields.errmsg' @:: Lens' RpbErrorResp Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.errcode' @:: Lens' RpbErrorResp Data.Word.Word32@ -}
data RpbErrorResp
  = RpbErrorResp'_constructor {_RpbErrorResp'errmsg :: !Data.ByteString.ByteString,
                               _RpbErrorResp'errcode :: !Data.Word.Word32,
                               _RpbErrorResp'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbErrorResp where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbErrorResp "errmsg" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbErrorResp'errmsg
           (\ x__ y__ -> x__ {_RpbErrorResp'errmsg = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbErrorResp "errcode" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbErrorResp'errcode
           (\ x__ y__ -> x__ {_RpbErrorResp'errcode = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbErrorResp where
  messageName _ = Data.Text.pack "RpbErrorResp"
  packedMessageDescriptor _
    = "\n\
      \\fRpbErrorResp\DC2\SYN\n\
      \\ACKerrmsg\CAN\SOH \STX(\fR\ACKerrmsg\DC2\CAN\n\
      \\aerrcode\CAN\STX \STX(\rR\aerrcode"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        errmsg__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "errmsg"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"errmsg")) ::
              Data.ProtoLens.FieldDescriptor RpbErrorResp
        errcode__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "errcode"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"errcode")) ::
              Data.ProtoLens.FieldDescriptor RpbErrorResp
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, errmsg__field_descriptor),
           (Data.ProtoLens.Tag 2, errcode__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbErrorResp'_unknownFields
        (\ x__ y__ -> x__ {_RpbErrorResp'_unknownFields = y__})
  defMessage
    = RpbErrorResp'_constructor
        {_RpbErrorResp'errmsg = Data.ProtoLens.fieldDefault,
         _RpbErrorResp'errcode = Data.ProtoLens.fieldDefault,
         _RpbErrorResp'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbErrorResp
          -> Prelude.Bool
             -> Prelude.Bool
                -> Data.ProtoLens.Encoding.Bytes.Parser RpbErrorResp
        loop x required'errcode required'errmsg
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'errcode then (:) "errcode" else Prelude.id)
                               ((if required'errmsg then (:) "errmsg" else Prelude.id) [])
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "errmsg"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"errmsg") y x)
                                  required'errcode
                                  Prelude.False
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "errcode"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"errcode") y x)
                                  Prelude.False
                                  required'errmsg
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'errcode
                                  required'errmsg
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True Prelude.True)
          "RpbErrorResp"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((\ bs
                    -> (Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"errmsg") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                   ((Prelude..)
                      Data.ProtoLens.Encoding.Bytes.putVarInt
                      Prelude.fromIntegral
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"errcode") _x)))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData RpbErrorResp where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbErrorResp'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_RpbErrorResp'errmsg x__)
                (Control.DeepSeq.deepseq (_RpbErrorResp'errcode x__) ()))
{- | Fields :
     
         * 'Proto.Riak_Fields.bucket' @:: Lens' RpbGetBucketKeyPreflistReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.key' @:: Lens' RpbGetBucketKeyPreflistReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.type'' @:: Lens' RpbGetBucketKeyPreflistReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'type'' @:: Lens' RpbGetBucketKeyPreflistReq (Prelude.Maybe Data.ByteString.ByteString)@ -}
data RpbGetBucketKeyPreflistReq
  = RpbGetBucketKeyPreflistReq'_constructor {_RpbGetBucketKeyPreflistReq'bucket :: !Data.ByteString.ByteString,
                                             _RpbGetBucketKeyPreflistReq'key :: !Data.ByteString.ByteString,
                                             _RpbGetBucketKeyPreflistReq'type' :: !(Prelude.Maybe Data.ByteString.ByteString),
                                             _RpbGetBucketKeyPreflistReq'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbGetBucketKeyPreflistReq where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbGetBucketKeyPreflistReq "bucket" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbGetBucketKeyPreflistReq'bucket
           (\ x__ y__ -> x__ {_RpbGetBucketKeyPreflistReq'bucket = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbGetBucketKeyPreflistReq "key" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbGetBucketKeyPreflistReq'key
           (\ x__ y__ -> x__ {_RpbGetBucketKeyPreflistReq'key = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbGetBucketKeyPreflistReq "type'" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbGetBucketKeyPreflistReq'type'
           (\ x__ y__ -> x__ {_RpbGetBucketKeyPreflistReq'type' = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbGetBucketKeyPreflistReq "maybe'type'" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbGetBucketKeyPreflistReq'type'
           (\ x__ y__ -> x__ {_RpbGetBucketKeyPreflistReq'type' = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbGetBucketKeyPreflistReq where
  messageName _ = Data.Text.pack "RpbGetBucketKeyPreflistReq"
  packedMessageDescriptor _
    = "\n\
      \\SUBRpbGetBucketKeyPreflistReq\DC2\SYN\n\
      \\ACKbucket\CAN\SOH \STX(\fR\ACKbucket\DC2\DLE\n\
      \\ETXkey\CAN\STX \STX(\fR\ETXkey\DC2\DC2\n\
      \\EOTtype\CAN\ETX \SOH(\fR\EOTtype"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        bucket__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "bucket"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"bucket")) ::
              Data.ProtoLens.FieldDescriptor RpbGetBucketKeyPreflistReq
        key__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "key"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"key")) ::
              Data.ProtoLens.FieldDescriptor RpbGetBucketKeyPreflistReq
        type'__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "type"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'type'")) ::
              Data.ProtoLens.FieldDescriptor RpbGetBucketKeyPreflistReq
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, bucket__field_descriptor),
           (Data.ProtoLens.Tag 2, key__field_descriptor),
           (Data.ProtoLens.Tag 3, type'__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbGetBucketKeyPreflistReq'_unknownFields
        (\ x__ y__
           -> x__ {_RpbGetBucketKeyPreflistReq'_unknownFields = y__})
  defMessage
    = RpbGetBucketKeyPreflistReq'_constructor
        {_RpbGetBucketKeyPreflistReq'bucket = Data.ProtoLens.fieldDefault,
         _RpbGetBucketKeyPreflistReq'key = Data.ProtoLens.fieldDefault,
         _RpbGetBucketKeyPreflistReq'type' = Prelude.Nothing,
         _RpbGetBucketKeyPreflistReq'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbGetBucketKeyPreflistReq
          -> Prelude.Bool
             -> Prelude.Bool
                -> Data.ProtoLens.Encoding.Bytes.Parser RpbGetBucketKeyPreflistReq
        loop x required'bucket required'key
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'bucket then (:) "bucket" else Prelude.id)
                               ((if required'key then (:) "key" else Prelude.id) [])
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "bucket"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"bucket") y x)
                                  Prelude.False
                                  required'key
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "key"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"key") y x)
                                  required'bucket
                                  Prelude.False
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "type"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"type'") y x)
                                  required'bucket
                                  required'key
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'bucket
                                  required'key
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True Prelude.True)
          "RpbGetBucketKeyPreflistReq"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((\ bs
                    -> (Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"bucket") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                   ((\ bs
                       -> (Data.Monoid.<>)
                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                               (Prelude.fromIntegral (Data.ByteString.length bs)))
                            (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"key") _x)))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'type'") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                             ((\ bs
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                         (Prelude.fromIntegral (Data.ByteString.length bs)))
                                      (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData RpbGetBucketKeyPreflistReq where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbGetBucketKeyPreflistReq'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_RpbGetBucketKeyPreflistReq'bucket x__)
                (Control.DeepSeq.deepseq
                   (_RpbGetBucketKeyPreflistReq'key x__)
                   (Control.DeepSeq.deepseq
                      (_RpbGetBucketKeyPreflistReq'type' x__) ())))
{- | Fields :
     
         * 'Proto.Riak_Fields.preflist' @:: Lens' RpbGetBucketKeyPreflistResp [RpbBucketKeyPreflistItem]@
         * 'Proto.Riak_Fields.vec'preflist' @:: Lens' RpbGetBucketKeyPreflistResp (Data.Vector.Vector RpbBucketKeyPreflistItem)@ -}
data RpbGetBucketKeyPreflistResp
  = RpbGetBucketKeyPreflistResp'_constructor {_RpbGetBucketKeyPreflistResp'preflist :: !(Data.Vector.Vector RpbBucketKeyPreflistItem),
                                              _RpbGetBucketKeyPreflistResp'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbGetBucketKeyPreflistResp where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbGetBucketKeyPreflistResp "preflist" [RpbBucketKeyPreflistItem] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbGetBucketKeyPreflistResp'preflist
           (\ x__ y__ -> x__ {_RpbGetBucketKeyPreflistResp'preflist = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField RpbGetBucketKeyPreflistResp "vec'preflist" (Data.Vector.Vector RpbBucketKeyPreflistItem) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbGetBucketKeyPreflistResp'preflist
           (\ x__ y__ -> x__ {_RpbGetBucketKeyPreflistResp'preflist = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbGetBucketKeyPreflistResp where
  messageName _ = Data.Text.pack "RpbGetBucketKeyPreflistResp"
  packedMessageDescriptor _
    = "\n\
      \\ESCRpbGetBucketKeyPreflistResp\DC25\n\
      \\bpreflist\CAN\SOH \ETX(\v2\EM.RpbBucketKeyPreflistItemR\bpreflist"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        preflist__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "preflist"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor RpbBucketKeyPreflistItem)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"preflist")) ::
              Data.ProtoLens.FieldDescriptor RpbGetBucketKeyPreflistResp
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, preflist__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbGetBucketKeyPreflistResp'_unknownFields
        (\ x__ y__
           -> x__ {_RpbGetBucketKeyPreflistResp'_unknownFields = y__})
  defMessage
    = RpbGetBucketKeyPreflistResp'_constructor
        {_RpbGetBucketKeyPreflistResp'preflist = Data.Vector.Generic.empty,
         _RpbGetBucketKeyPreflistResp'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbGetBucketKeyPreflistResp
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld RpbBucketKeyPreflistItem
             -> Data.ProtoLens.Encoding.Bytes.Parser RpbGetBucketKeyPreflistResp
        loop x mutable'preflist
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'preflist <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                           (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                              mutable'preflist)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields
                           (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'preflist") frozen'preflist x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "preflist"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'preflist y)
                                loop x v
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'preflist
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'preflist <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                    Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage mutable'preflist)
          "RpbGetBucketKeyPreflistResp"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                (\ _v
                   -> (Data.Monoid.<>)
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                        ((Prelude..)
                           (\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Data.ProtoLens.encodeMessage
                           _v))
                (Lens.Family2.view
                   (Data.ProtoLens.Field.field @"vec'preflist") _x))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData RpbGetBucketKeyPreflistResp where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbGetBucketKeyPreflistResp'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_RpbGetBucketKeyPreflistResp'preflist x__) ())
{- | Fields :
     
         * 'Proto.Riak_Fields.bucket' @:: Lens' RpbGetBucketReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.type'' @:: Lens' RpbGetBucketReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'type'' @:: Lens' RpbGetBucketReq (Prelude.Maybe Data.ByteString.ByteString)@ -}
data RpbGetBucketReq
  = RpbGetBucketReq'_constructor {_RpbGetBucketReq'bucket :: !Data.ByteString.ByteString,
                                  _RpbGetBucketReq'type' :: !(Prelude.Maybe Data.ByteString.ByteString),
                                  _RpbGetBucketReq'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbGetBucketReq where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbGetBucketReq "bucket" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbGetBucketReq'bucket
           (\ x__ y__ -> x__ {_RpbGetBucketReq'bucket = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbGetBucketReq "type'" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbGetBucketReq'type'
           (\ x__ y__ -> x__ {_RpbGetBucketReq'type' = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbGetBucketReq "maybe'type'" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbGetBucketReq'type'
           (\ x__ y__ -> x__ {_RpbGetBucketReq'type' = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbGetBucketReq where
  messageName _ = Data.Text.pack "RpbGetBucketReq"
  packedMessageDescriptor _
    = "\n\
      \\SIRpbGetBucketReq\DC2\SYN\n\
      \\ACKbucket\CAN\SOH \STX(\fR\ACKbucket\DC2\DC2\n\
      \\EOTtype\CAN\STX \SOH(\fR\EOTtype"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        bucket__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "bucket"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"bucket")) ::
              Data.ProtoLens.FieldDescriptor RpbGetBucketReq
        type'__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "type"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'type'")) ::
              Data.ProtoLens.FieldDescriptor RpbGetBucketReq
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, bucket__field_descriptor),
           (Data.ProtoLens.Tag 2, type'__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbGetBucketReq'_unknownFields
        (\ x__ y__ -> x__ {_RpbGetBucketReq'_unknownFields = y__})
  defMessage
    = RpbGetBucketReq'_constructor
        {_RpbGetBucketReq'bucket = Data.ProtoLens.fieldDefault,
         _RpbGetBucketReq'type' = Prelude.Nothing,
         _RpbGetBucketReq'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbGetBucketReq
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Bytes.Parser RpbGetBucketReq
        loop x required'bucket
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing = (if required'bucket then (:) "bucket" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "bucket"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"bucket") y x)
                                  Prelude.False
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "type"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"type'") y x)
                                  required'bucket
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'bucket
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True) "RpbGetBucketReq"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((\ bs
                    -> (Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"bucket") _x)))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'type'") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             _v))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData RpbGetBucketReq where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbGetBucketReq'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_RpbGetBucketReq'bucket x__)
                (Control.DeepSeq.deepseq (_RpbGetBucketReq'type' x__) ()))
{- | Fields :
     
         * 'Proto.Riak_Fields.props' @:: Lens' RpbGetBucketResp RpbBucketProps@ -}
data RpbGetBucketResp
  = RpbGetBucketResp'_constructor {_RpbGetBucketResp'props :: !RpbBucketProps,
                                   _RpbGetBucketResp'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbGetBucketResp where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbGetBucketResp "props" RpbBucketProps where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbGetBucketResp'props
           (\ x__ y__ -> x__ {_RpbGetBucketResp'props = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbGetBucketResp where
  messageName _ = Data.Text.pack "RpbGetBucketResp"
  packedMessageDescriptor _
    = "\n\
      \\DLERpbGetBucketResp\DC2%\n\
      \\ENQprops\CAN\SOH \STX(\v2\SI.RpbBucketPropsR\ENQprops"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        props__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "props"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor RpbBucketProps)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"props")) ::
              Data.ProtoLens.FieldDescriptor RpbGetBucketResp
      in
        Data.Map.fromList [(Data.ProtoLens.Tag 1, props__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbGetBucketResp'_unknownFields
        (\ x__ y__ -> x__ {_RpbGetBucketResp'_unknownFields = y__})
  defMessage
    = RpbGetBucketResp'_constructor
        {_RpbGetBucketResp'props = Data.ProtoLens.defMessage,
         _RpbGetBucketResp'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbGetBucketResp
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Bytes.Parser RpbGetBucketResp
        loop x required'props
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing = (if required'props then (:) "props" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "props"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"props") y x)
                                  Prelude.False
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'props
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True) "RpbGetBucketResp"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((Prelude..)
                   (\ bs
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   Data.ProtoLens.encodeMessage
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"props") _x)))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData RpbGetBucketResp where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbGetBucketResp'_unknownFields x__)
             (Control.DeepSeq.deepseq (_RpbGetBucketResp'props x__) ())
{- | Fields :
     
         * 'Proto.Riak_Fields.type'' @:: Lens' RpbGetBucketTypeReq Data.ByteString.ByteString@ -}
data RpbGetBucketTypeReq
  = RpbGetBucketTypeReq'_constructor {_RpbGetBucketTypeReq'type' :: !Data.ByteString.ByteString,
                                      _RpbGetBucketTypeReq'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbGetBucketTypeReq where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbGetBucketTypeReq "type'" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbGetBucketTypeReq'type'
           (\ x__ y__ -> x__ {_RpbGetBucketTypeReq'type' = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbGetBucketTypeReq where
  messageName _ = Data.Text.pack "RpbGetBucketTypeReq"
  packedMessageDescriptor _
    = "\n\
      \\DC3RpbGetBucketTypeReq\DC2\DC2\n\
      \\EOTtype\CAN\SOH \STX(\fR\EOTtype"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        type'__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "type"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"type'")) ::
              Data.ProtoLens.FieldDescriptor RpbGetBucketTypeReq
      in
        Data.Map.fromList [(Data.ProtoLens.Tag 1, type'__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbGetBucketTypeReq'_unknownFields
        (\ x__ y__ -> x__ {_RpbGetBucketTypeReq'_unknownFields = y__})
  defMessage
    = RpbGetBucketTypeReq'_constructor
        {_RpbGetBucketTypeReq'type' = Data.ProtoLens.fieldDefault,
         _RpbGetBucketTypeReq'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbGetBucketTypeReq
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Bytes.Parser RpbGetBucketTypeReq
        loop x required'type'
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing = (if required'type' then (:) "type" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "type"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"type'") y x)
                                  Prelude.False
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'type'
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True)
          "RpbGetBucketTypeReq"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((\ bs
                    -> (Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"type'") _x)))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData RpbGetBucketTypeReq where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbGetBucketTypeReq'_unknownFields x__)
             (Control.DeepSeq.deepseq (_RpbGetBucketTypeReq'type' x__) ())
{- | Fields :
      -}
data RpbGetClientIdReq
  = RpbGetClientIdReq'_constructor {_RpbGetClientIdReq'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbGetClientIdReq where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message RpbGetClientIdReq where
  messageName _ = Data.Text.pack "RpbGetClientIdReq"
  packedMessageDescriptor _
    = "\n\
      \\DC1RpbGetClientIdReq"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag = let in Data.Map.fromList []
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbGetClientIdReq'_unknownFields
        (\ x__ y__ -> x__ {_RpbGetClientIdReq'_unknownFields = y__})
  defMessage
    = RpbGetClientIdReq'_constructor
        {_RpbGetClientIdReq'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbGetClientIdReq
          -> Data.ProtoLens.Encoding.Bytes.Parser RpbGetClientIdReq
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of {
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x) }
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "RpbGetClientIdReq"
  buildMessage
    = \ _x
        -> Data.ProtoLens.Encoding.Wire.buildFieldSet
             (Lens.Family2.view Data.ProtoLens.unknownFields _x)
instance Control.DeepSeq.NFData RpbGetClientIdReq where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbGetClientIdReq'_unknownFields x__) ()
{- | Fields :
     
         * 'Proto.Riak_Fields.clientId' @:: Lens' RpbGetClientIdResp Data.ByteString.ByteString@ -}
data RpbGetClientIdResp
  = RpbGetClientIdResp'_constructor {_RpbGetClientIdResp'clientId :: !Data.ByteString.ByteString,
                                     _RpbGetClientIdResp'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbGetClientIdResp where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbGetClientIdResp "clientId" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbGetClientIdResp'clientId
           (\ x__ y__ -> x__ {_RpbGetClientIdResp'clientId = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbGetClientIdResp where
  messageName _ = Data.Text.pack "RpbGetClientIdResp"
  packedMessageDescriptor _
    = "\n\
      \\DC2RpbGetClientIdResp\DC2\ESC\n\
      \\tclient_id\CAN\SOH \STX(\fR\bclientId"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        clientId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "client_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"clientId")) ::
              Data.ProtoLens.FieldDescriptor RpbGetClientIdResp
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, clientId__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbGetClientIdResp'_unknownFields
        (\ x__ y__ -> x__ {_RpbGetClientIdResp'_unknownFields = y__})
  defMessage
    = RpbGetClientIdResp'_constructor
        {_RpbGetClientIdResp'clientId = Data.ProtoLens.fieldDefault,
         _RpbGetClientIdResp'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbGetClientIdResp
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Bytes.Parser RpbGetClientIdResp
        loop x required'clientId
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'clientId then (:) "client_id" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "client_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"clientId") y x)
                                  Prelude.False
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'clientId
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True)
          "RpbGetClientIdResp"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((\ bs
                    -> (Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"clientId") _x)))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData RpbGetClientIdResp where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbGetClientIdResp'_unknownFields x__)
             (Control.DeepSeq.deepseq (_RpbGetClientIdResp'clientId x__) ())
{- | Fields :
     
         * 'Proto.Riak_Fields.bucket' @:: Lens' RpbGetReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.key' @:: Lens' RpbGetReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.r' @:: Lens' RpbGetReq Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'r' @:: Lens' RpbGetReq (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.pr' @:: Lens' RpbGetReq Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'pr' @:: Lens' RpbGetReq (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.basicQuorum' @:: Lens' RpbGetReq Prelude.Bool@
         * 'Proto.Riak_Fields.maybe'basicQuorum' @:: Lens' RpbGetReq (Prelude.Maybe Prelude.Bool)@
         * 'Proto.Riak_Fields.notfoundOk' @:: Lens' RpbGetReq Prelude.Bool@
         * 'Proto.Riak_Fields.maybe'notfoundOk' @:: Lens' RpbGetReq (Prelude.Maybe Prelude.Bool)@
         * 'Proto.Riak_Fields.ifModified' @:: Lens' RpbGetReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'ifModified' @:: Lens' RpbGetReq (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.head' @:: Lens' RpbGetReq Prelude.Bool@
         * 'Proto.Riak_Fields.maybe'head' @:: Lens' RpbGetReq (Prelude.Maybe Prelude.Bool)@
         * 'Proto.Riak_Fields.deletedvclock' @:: Lens' RpbGetReq Prelude.Bool@
         * 'Proto.Riak_Fields.maybe'deletedvclock' @:: Lens' RpbGetReq (Prelude.Maybe Prelude.Bool)@
         * 'Proto.Riak_Fields.timeout' @:: Lens' RpbGetReq Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'timeout' @:: Lens' RpbGetReq (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.sloppyQuorum' @:: Lens' RpbGetReq Prelude.Bool@
         * 'Proto.Riak_Fields.maybe'sloppyQuorum' @:: Lens' RpbGetReq (Prelude.Maybe Prelude.Bool)@
         * 'Proto.Riak_Fields.nVal' @:: Lens' RpbGetReq Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'nVal' @:: Lens' RpbGetReq (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.type'' @:: Lens' RpbGetReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'type'' @:: Lens' RpbGetReq (Prelude.Maybe Data.ByteString.ByteString)@ -}
data RpbGetReq
  = RpbGetReq'_constructor {_RpbGetReq'bucket :: !Data.ByteString.ByteString,
                            _RpbGetReq'key :: !Data.ByteString.ByteString,
                            _RpbGetReq'r :: !(Prelude.Maybe Data.Word.Word32),
                            _RpbGetReq'pr :: !(Prelude.Maybe Data.Word.Word32),
                            _RpbGetReq'basicQuorum :: !(Prelude.Maybe Prelude.Bool),
                            _RpbGetReq'notfoundOk :: !(Prelude.Maybe Prelude.Bool),
                            _RpbGetReq'ifModified :: !(Prelude.Maybe Data.ByteString.ByteString),
                            _RpbGetReq'head :: !(Prelude.Maybe Prelude.Bool),
                            _RpbGetReq'deletedvclock :: !(Prelude.Maybe Prelude.Bool),
                            _RpbGetReq'timeout :: !(Prelude.Maybe Data.Word.Word32),
                            _RpbGetReq'sloppyQuorum :: !(Prelude.Maybe Prelude.Bool),
                            _RpbGetReq'nVal :: !(Prelude.Maybe Data.Word.Word32),
                            _RpbGetReq'type' :: !(Prelude.Maybe Data.ByteString.ByteString),
                            _RpbGetReq'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbGetReq where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbGetReq "bucket" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbGetReq'bucket (\ x__ y__ -> x__ {_RpbGetReq'bucket = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbGetReq "key" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbGetReq'key (\ x__ y__ -> x__ {_RpbGetReq'key = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbGetReq "r" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbGetReq'r (\ x__ y__ -> x__ {_RpbGetReq'r = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbGetReq "maybe'r" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbGetReq'r (\ x__ y__ -> x__ {_RpbGetReq'r = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbGetReq "pr" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbGetReq'pr (\ x__ y__ -> x__ {_RpbGetReq'pr = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbGetReq "maybe'pr" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbGetReq'pr (\ x__ y__ -> x__ {_RpbGetReq'pr = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbGetReq "basicQuorum" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbGetReq'basicQuorum
           (\ x__ y__ -> x__ {_RpbGetReq'basicQuorum = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbGetReq "maybe'basicQuorum" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbGetReq'basicQuorum
           (\ x__ y__ -> x__ {_RpbGetReq'basicQuorum = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbGetReq "notfoundOk" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbGetReq'notfoundOk
           (\ x__ y__ -> x__ {_RpbGetReq'notfoundOk = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbGetReq "maybe'notfoundOk" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbGetReq'notfoundOk
           (\ x__ y__ -> x__ {_RpbGetReq'notfoundOk = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbGetReq "ifModified" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbGetReq'ifModified
           (\ x__ y__ -> x__ {_RpbGetReq'ifModified = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbGetReq "maybe'ifModified" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbGetReq'ifModified
           (\ x__ y__ -> x__ {_RpbGetReq'ifModified = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbGetReq "head" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbGetReq'head (\ x__ y__ -> x__ {_RpbGetReq'head = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbGetReq "maybe'head" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbGetReq'head (\ x__ y__ -> x__ {_RpbGetReq'head = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbGetReq "deletedvclock" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbGetReq'deletedvclock
           (\ x__ y__ -> x__ {_RpbGetReq'deletedvclock = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbGetReq "maybe'deletedvclock" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbGetReq'deletedvclock
           (\ x__ y__ -> x__ {_RpbGetReq'deletedvclock = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbGetReq "timeout" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbGetReq'timeout (\ x__ y__ -> x__ {_RpbGetReq'timeout = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbGetReq "maybe'timeout" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbGetReq'timeout (\ x__ y__ -> x__ {_RpbGetReq'timeout = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbGetReq "sloppyQuorum" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbGetReq'sloppyQuorum
           (\ x__ y__ -> x__ {_RpbGetReq'sloppyQuorum = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbGetReq "maybe'sloppyQuorum" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbGetReq'sloppyQuorum
           (\ x__ y__ -> x__ {_RpbGetReq'sloppyQuorum = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbGetReq "nVal" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbGetReq'nVal (\ x__ y__ -> x__ {_RpbGetReq'nVal = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbGetReq "maybe'nVal" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbGetReq'nVal (\ x__ y__ -> x__ {_RpbGetReq'nVal = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbGetReq "type'" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbGetReq'type' (\ x__ y__ -> x__ {_RpbGetReq'type' = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbGetReq "maybe'type'" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbGetReq'type' (\ x__ y__ -> x__ {_RpbGetReq'type' = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbGetReq where
  messageName _ = Data.Text.pack "RpbGetReq"
  packedMessageDescriptor _
    = "\n\
      \\tRpbGetReq\DC2\SYN\n\
      \\ACKbucket\CAN\SOH \STX(\fR\ACKbucket\DC2\DLE\n\
      \\ETXkey\CAN\STX \STX(\fR\ETXkey\DC2\f\n\
      \\SOHr\CAN\ETX \SOH(\rR\SOHr\DC2\SO\n\
      \\STXpr\CAN\EOT \SOH(\rR\STXpr\DC2!\n\
      \\fbasic_quorum\CAN\ENQ \SOH(\bR\vbasicQuorum\DC2\US\n\
      \\vnotfound_ok\CAN\ACK \SOH(\bR\n\
      \notfoundOk\DC2\US\n\
      \\vif_modified\CAN\a \SOH(\fR\n\
      \ifModified\DC2\DC2\n\
      \\EOThead\CAN\b \SOH(\bR\EOThead\DC2$\n\
      \\rdeletedvclock\CAN\t \SOH(\bR\rdeletedvclock\DC2\CAN\n\
      \\atimeout\CAN\n\
      \ \SOH(\rR\atimeout\DC2#\n\
      \\rsloppy_quorum\CAN\v \SOH(\bR\fsloppyQuorum\DC2\DC3\n\
      \\ENQn_val\CAN\f \SOH(\rR\EOTnVal\DC2\DC2\n\
      \\EOTtype\CAN\r \SOH(\fR\EOTtype"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        bucket__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "bucket"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"bucket")) ::
              Data.ProtoLens.FieldDescriptor RpbGetReq
        key__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "key"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"key")) ::
              Data.ProtoLens.FieldDescriptor RpbGetReq
        r__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "r"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'r")) ::
              Data.ProtoLens.FieldDescriptor RpbGetReq
        pr__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pr"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'pr")) ::
              Data.ProtoLens.FieldDescriptor RpbGetReq
        basicQuorum__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "basic_quorum"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'basicQuorum")) ::
              Data.ProtoLens.FieldDescriptor RpbGetReq
        notfoundOk__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "notfound_ok"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'notfoundOk")) ::
              Data.ProtoLens.FieldDescriptor RpbGetReq
        ifModified__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "if_modified"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ifModified")) ::
              Data.ProtoLens.FieldDescriptor RpbGetReq
        head__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "head"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'head")) ::
              Data.ProtoLens.FieldDescriptor RpbGetReq
        deletedvclock__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "deletedvclock"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'deletedvclock")) ::
              Data.ProtoLens.FieldDescriptor RpbGetReq
        timeout__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "timeout"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'timeout")) ::
              Data.ProtoLens.FieldDescriptor RpbGetReq
        sloppyQuorum__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "sloppy_quorum"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'sloppyQuorum")) ::
              Data.ProtoLens.FieldDescriptor RpbGetReq
        nVal__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "n_val"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'nVal")) ::
              Data.ProtoLens.FieldDescriptor RpbGetReq
        type'__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "type"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'type'")) ::
              Data.ProtoLens.FieldDescriptor RpbGetReq
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, bucket__field_descriptor),
           (Data.ProtoLens.Tag 2, key__field_descriptor),
           (Data.ProtoLens.Tag 3, r__field_descriptor),
           (Data.ProtoLens.Tag 4, pr__field_descriptor),
           (Data.ProtoLens.Tag 5, basicQuorum__field_descriptor),
           (Data.ProtoLens.Tag 6, notfoundOk__field_descriptor),
           (Data.ProtoLens.Tag 7, ifModified__field_descriptor),
           (Data.ProtoLens.Tag 8, head__field_descriptor),
           (Data.ProtoLens.Tag 9, deletedvclock__field_descriptor),
           (Data.ProtoLens.Tag 10, timeout__field_descriptor),
           (Data.ProtoLens.Tag 11, sloppyQuorum__field_descriptor),
           (Data.ProtoLens.Tag 12, nVal__field_descriptor),
           (Data.ProtoLens.Tag 13, type'__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbGetReq'_unknownFields
        (\ x__ y__ -> x__ {_RpbGetReq'_unknownFields = y__})
  defMessage
    = RpbGetReq'_constructor
        {_RpbGetReq'bucket = Data.ProtoLens.fieldDefault,
         _RpbGetReq'key = Data.ProtoLens.fieldDefault,
         _RpbGetReq'r = Prelude.Nothing, _RpbGetReq'pr = Prelude.Nothing,
         _RpbGetReq'basicQuorum = Prelude.Nothing,
         _RpbGetReq'notfoundOk = Prelude.Nothing,
         _RpbGetReq'ifModified = Prelude.Nothing,
         _RpbGetReq'head = Prelude.Nothing,
         _RpbGetReq'deletedvclock = Prelude.Nothing,
         _RpbGetReq'timeout = Prelude.Nothing,
         _RpbGetReq'sloppyQuorum = Prelude.Nothing,
         _RpbGetReq'nVal = Prelude.Nothing,
         _RpbGetReq'type' = Prelude.Nothing, _RpbGetReq'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbGetReq
          -> Prelude.Bool
             -> Prelude.Bool -> Data.ProtoLens.Encoding.Bytes.Parser RpbGetReq
        loop x required'bucket required'key
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'bucket then (:) "bucket" else Prelude.id)
                               ((if required'key then (:) "key" else Prelude.id) [])
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "bucket"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"bucket") y x)
                                  Prelude.False
                                  required'key
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "key"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"key") y x)
                                  required'bucket
                                  Prelude.False
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "r"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"r") y x)
                                  required'bucket
                                  required'key
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "pr"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"pr") y x)
                                  required'bucket
                                  required'key
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "basic_quorum"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"basicQuorum") y x)
                                  required'bucket
                                  required'key
                        48
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "notfound_ok"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"notfoundOk") y x)
                                  required'bucket
                                  required'key
                        58
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "if_modified"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"ifModified") y x)
                                  required'bucket
                                  required'key
                        64
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "head"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"head") y x)
                                  required'bucket
                                  required'key
                        72
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "deletedvclock"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"deletedvclock") y x)
                                  required'bucket
                                  required'key
                        80
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "timeout"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"timeout") y x)
                                  required'bucket
                                  required'key
                        88
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "sloppy_quorum"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"sloppyQuorum") y x)
                                  required'bucket
                                  required'key
                        96
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "n_val"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"nVal") y x)
                                  required'bucket
                                  required'key
                        106
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "type"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"type'") y x)
                                  required'bucket
                                  required'key
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'bucket
                                  required'key
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True Prelude.True)
          "RpbGetReq"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((\ bs
                    -> (Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"bucket") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                   ((\ bs
                       -> (Data.Monoid.<>)
                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                               (Prelude.fromIntegral (Data.ByteString.length bs)))
                            (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"key") _x)))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'r") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'pr") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view
                                (Data.ProtoLens.Field.field @"maybe'basicQuorum") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (\ b -> if b then 1 else 0)
                                      _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view
                                   (Data.ProtoLens.Field.field @"maybe'notfoundOk") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 48)
                                      ((Prelude..)
                                         Data.ProtoLens.Encoding.Bytes.putVarInt
                                         (\ b -> if b then 1 else 0)
                                         _v))
                            ((Data.Monoid.<>)
                               (case
                                    Lens.Family2.view
                                      (Data.ProtoLens.Field.field @"maybe'ifModified") _x
                                of
                                  Prelude.Nothing -> Data.Monoid.mempty
                                  (Prelude.Just _v)
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 58)
                                         ((\ bs
                                             -> (Data.Monoid.<>)
                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                     (Prelude.fromIntegral
                                                        (Data.ByteString.length bs)))
                                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                            _v))
                               ((Data.Monoid.<>)
                                  (case
                                       Lens.Family2.view
                                         (Data.ProtoLens.Field.field @"maybe'head") _x
                                   of
                                     Prelude.Nothing -> Data.Monoid.mempty
                                     (Prelude.Just _v)
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt 64)
                                            ((Prelude..)
                                               Data.ProtoLens.Encoding.Bytes.putVarInt
                                               (\ b -> if b then 1 else 0)
                                               _v))
                                  ((Data.Monoid.<>)
                                     (case
                                          Lens.Family2.view
                                            (Data.ProtoLens.Field.field @"maybe'deletedvclock") _x
                                      of
                                        Prelude.Nothing -> Data.Monoid.mempty
                                        (Prelude.Just _v)
                                          -> (Data.Monoid.<>)
                                               (Data.ProtoLens.Encoding.Bytes.putVarInt 72)
                                               ((Prelude..)
                                                  Data.ProtoLens.Encoding.Bytes.putVarInt
                                                  (\ b -> if b then 1 else 0)
                                                  _v))
                                     ((Data.Monoid.<>)
                                        (case
                                             Lens.Family2.view
                                               (Data.ProtoLens.Field.field @"maybe'timeout") _x
                                         of
                                           Prelude.Nothing -> Data.Monoid.mempty
                                           (Prelude.Just _v)
                                             -> (Data.Monoid.<>)
                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt 80)
                                                  ((Prelude..)
                                                     Data.ProtoLens.Encoding.Bytes.putVarInt
                                                     Prelude.fromIntegral
                                                     _v))
                                        ((Data.Monoid.<>)
                                           (case
                                                Lens.Family2.view
                                                  (Data.ProtoLens.Field.field @"maybe'sloppyQuorum")
                                                  _x
                                            of
                                              Prelude.Nothing -> Data.Monoid.mempty
                                              (Prelude.Just _v)
                                                -> (Data.Monoid.<>)
                                                     (Data.ProtoLens.Encoding.Bytes.putVarInt 88)
                                                     ((Prelude..)
                                                        Data.ProtoLens.Encoding.Bytes.putVarInt
                                                        (\ b -> if b then 1 else 0)
                                                        _v))
                                           ((Data.Monoid.<>)
                                              (case
                                                   Lens.Family2.view
                                                     (Data.ProtoLens.Field.field @"maybe'nVal") _x
                                               of
                                                 Prelude.Nothing -> Data.Monoid.mempty
                                                 (Prelude.Just _v)
                                                   -> (Data.Monoid.<>)
                                                        (Data.ProtoLens.Encoding.Bytes.putVarInt 96)
                                                        ((Prelude..)
                                                           Data.ProtoLens.Encoding.Bytes.putVarInt
                                                           Prelude.fromIntegral
                                                           _v))
                                              ((Data.Monoid.<>)
                                                 (case
                                                      Lens.Family2.view
                                                        (Data.ProtoLens.Field.field @"maybe'type'")
                                                        _x
                                                  of
                                                    Prelude.Nothing -> Data.Monoid.mempty
                                                    (Prelude.Just _v)
                                                      -> (Data.Monoid.<>)
                                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                              106)
                                                           ((\ bs
                                                               -> (Data.Monoid.<>)
                                                                    (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                       (Prelude.fromIntegral
                                                                          (Data.ByteString.length
                                                                             bs)))
                                                                    (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                       bs))
                                                              _v))
                                                 (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                                    (Lens.Family2.view
                                                       Data.ProtoLens.unknownFields _x))))))))))))))
instance Control.DeepSeq.NFData RpbGetReq where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbGetReq'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_RpbGetReq'bucket x__)
                (Control.DeepSeq.deepseq
                   (_RpbGetReq'key x__)
                   (Control.DeepSeq.deepseq
                      (_RpbGetReq'r x__)
                      (Control.DeepSeq.deepseq
                         (_RpbGetReq'pr x__)
                         (Control.DeepSeq.deepseq
                            (_RpbGetReq'basicQuorum x__)
                            (Control.DeepSeq.deepseq
                               (_RpbGetReq'notfoundOk x__)
                               (Control.DeepSeq.deepseq
                                  (_RpbGetReq'ifModified x__)
                                  (Control.DeepSeq.deepseq
                                     (_RpbGetReq'head x__)
                                     (Control.DeepSeq.deepseq
                                        (_RpbGetReq'deletedvclock x__)
                                        (Control.DeepSeq.deepseq
                                           (_RpbGetReq'timeout x__)
                                           (Control.DeepSeq.deepseq
                                              (_RpbGetReq'sloppyQuorum x__)
                                              (Control.DeepSeq.deepseq
                                                 (_RpbGetReq'nVal x__)
                                                 (Control.DeepSeq.deepseq
                                                    (_RpbGetReq'type' x__) ())))))))))))))
{- | Fields :
     
         * 'Proto.Riak_Fields.content' @:: Lens' RpbGetResp [RpbContent]@
         * 'Proto.Riak_Fields.vec'content' @:: Lens' RpbGetResp (Data.Vector.Vector RpbContent)@
         * 'Proto.Riak_Fields.vclock' @:: Lens' RpbGetResp Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'vclock' @:: Lens' RpbGetResp (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.unchanged' @:: Lens' RpbGetResp Prelude.Bool@
         * 'Proto.Riak_Fields.maybe'unchanged' @:: Lens' RpbGetResp (Prelude.Maybe Prelude.Bool)@ -}
data RpbGetResp
  = RpbGetResp'_constructor {_RpbGetResp'content :: !(Data.Vector.Vector RpbContent),
                             _RpbGetResp'vclock :: !(Prelude.Maybe Data.ByteString.ByteString),
                             _RpbGetResp'unchanged :: !(Prelude.Maybe Prelude.Bool),
                             _RpbGetResp'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbGetResp where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbGetResp "content" [RpbContent] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbGetResp'content (\ x__ y__ -> x__ {_RpbGetResp'content = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField RpbGetResp "vec'content" (Data.Vector.Vector RpbContent) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbGetResp'content (\ x__ y__ -> x__ {_RpbGetResp'content = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbGetResp "vclock" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbGetResp'vclock (\ x__ y__ -> x__ {_RpbGetResp'vclock = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbGetResp "maybe'vclock" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbGetResp'vclock (\ x__ y__ -> x__ {_RpbGetResp'vclock = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbGetResp "unchanged" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbGetResp'unchanged
           (\ x__ y__ -> x__ {_RpbGetResp'unchanged = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbGetResp "maybe'unchanged" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbGetResp'unchanged
           (\ x__ y__ -> x__ {_RpbGetResp'unchanged = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbGetResp where
  messageName _ = Data.Text.pack "RpbGetResp"
  packedMessageDescriptor _
    = "\n\
      \\n\
      \RpbGetResp\DC2%\n\
      \\acontent\CAN\SOH \ETX(\v2\v.RpbContentR\acontent\DC2\SYN\n\
      \\ACKvclock\CAN\STX \SOH(\fR\ACKvclock\DC2\FS\n\
      \\tunchanged\CAN\ETX \SOH(\bR\tunchanged"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        content__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "content"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor RpbContent)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"content")) ::
              Data.ProtoLens.FieldDescriptor RpbGetResp
        vclock__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "vclock"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'vclock")) ::
              Data.ProtoLens.FieldDescriptor RpbGetResp
        unchanged__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "unchanged"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'unchanged")) ::
              Data.ProtoLens.FieldDescriptor RpbGetResp
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, content__field_descriptor),
           (Data.ProtoLens.Tag 2, vclock__field_descriptor),
           (Data.ProtoLens.Tag 3, unchanged__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbGetResp'_unknownFields
        (\ x__ y__ -> x__ {_RpbGetResp'_unknownFields = y__})
  defMessage
    = RpbGetResp'_constructor
        {_RpbGetResp'content = Data.Vector.Generic.empty,
         _RpbGetResp'vclock = Prelude.Nothing,
         _RpbGetResp'unchanged = Prelude.Nothing,
         _RpbGetResp'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbGetResp
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld RpbContent
             -> Data.ProtoLens.Encoding.Bytes.Parser RpbGetResp
        loop x mutable'content
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'content <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                          (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                             mutable'content)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields
                           (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'content") frozen'content x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "content"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'content y)
                                loop x v
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "vclock"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"vclock") y x)
                                  mutable'content
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "unchanged"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"unchanged") y x)
                                  mutable'content
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'content
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'content <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                   Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage mutable'content)
          "RpbGetResp"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                (\ _v
                   -> (Data.Monoid.<>)
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                        ((Prelude..)
                           (\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Data.ProtoLens.encodeMessage
                           _v))
                (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'content") _x))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'vclock") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'unchanged") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt
                                (\ b -> if b then 1 else 0)
                                _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData RpbGetResp where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbGetResp'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_RpbGetResp'content x__)
                (Control.DeepSeq.deepseq
                   (_RpbGetResp'vclock x__)
                   (Control.DeepSeq.deepseq (_RpbGetResp'unchanged x__) ())))
{- | Fields :
      -}
data RpbGetServerInfoReq
  = RpbGetServerInfoReq'_constructor {_RpbGetServerInfoReq'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbGetServerInfoReq where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message RpbGetServerInfoReq where
  messageName _ = Data.Text.pack "RpbGetServerInfoReq"
  packedMessageDescriptor _
    = "\n\
      \\DC3RpbGetServerInfoReq"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag = let in Data.Map.fromList []
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbGetServerInfoReq'_unknownFields
        (\ x__ y__ -> x__ {_RpbGetServerInfoReq'_unknownFields = y__})
  defMessage
    = RpbGetServerInfoReq'_constructor
        {_RpbGetServerInfoReq'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbGetServerInfoReq
          -> Data.ProtoLens.Encoding.Bytes.Parser RpbGetServerInfoReq
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of {
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x) }
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "RpbGetServerInfoReq"
  buildMessage
    = \ _x
        -> Data.ProtoLens.Encoding.Wire.buildFieldSet
             (Lens.Family2.view Data.ProtoLens.unknownFields _x)
instance Control.DeepSeq.NFData RpbGetServerInfoReq where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbGetServerInfoReq'_unknownFields x__) ()
{- | Fields :
     
         * 'Proto.Riak_Fields.node' @:: Lens' RpbGetServerInfoResp Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'node' @:: Lens' RpbGetServerInfoResp (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.serverVersion' @:: Lens' RpbGetServerInfoResp Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'serverVersion' @:: Lens' RpbGetServerInfoResp (Prelude.Maybe Data.ByteString.ByteString)@ -}
data RpbGetServerInfoResp
  = RpbGetServerInfoResp'_constructor {_RpbGetServerInfoResp'node :: !(Prelude.Maybe Data.ByteString.ByteString),
                                       _RpbGetServerInfoResp'serverVersion :: !(Prelude.Maybe Data.ByteString.ByteString),
                                       _RpbGetServerInfoResp'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbGetServerInfoResp where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbGetServerInfoResp "node" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbGetServerInfoResp'node
           (\ x__ y__ -> x__ {_RpbGetServerInfoResp'node = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbGetServerInfoResp "maybe'node" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbGetServerInfoResp'node
           (\ x__ y__ -> x__ {_RpbGetServerInfoResp'node = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbGetServerInfoResp "serverVersion" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbGetServerInfoResp'serverVersion
           (\ x__ y__ -> x__ {_RpbGetServerInfoResp'serverVersion = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbGetServerInfoResp "maybe'serverVersion" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbGetServerInfoResp'serverVersion
           (\ x__ y__ -> x__ {_RpbGetServerInfoResp'serverVersion = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbGetServerInfoResp where
  messageName _ = Data.Text.pack "RpbGetServerInfoResp"
  packedMessageDescriptor _
    = "\n\
      \\DC4RpbGetServerInfoResp\DC2\DC2\n\
      \\EOTnode\CAN\SOH \SOH(\fR\EOTnode\DC2%\n\
      \\SOserver_version\CAN\STX \SOH(\fR\rserverVersion"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        node__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "node"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'node")) ::
              Data.ProtoLens.FieldDescriptor RpbGetServerInfoResp
        serverVersion__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "server_version"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'serverVersion")) ::
              Data.ProtoLens.FieldDescriptor RpbGetServerInfoResp
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, node__field_descriptor),
           (Data.ProtoLens.Tag 2, serverVersion__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbGetServerInfoResp'_unknownFields
        (\ x__ y__ -> x__ {_RpbGetServerInfoResp'_unknownFields = y__})
  defMessage
    = RpbGetServerInfoResp'_constructor
        {_RpbGetServerInfoResp'node = Prelude.Nothing,
         _RpbGetServerInfoResp'serverVersion = Prelude.Nothing,
         _RpbGetServerInfoResp'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbGetServerInfoResp
          -> Data.ProtoLens.Encoding.Bytes.Parser RpbGetServerInfoResp
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "node"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"node") y x)
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "server_version"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"serverVersion") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "RpbGetServerInfoResp"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'node") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((\ bs
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt
                                   (Prelude.fromIntegral (Data.ByteString.length bs)))
                                (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'serverVersion") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             _v))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData RpbGetServerInfoResp where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbGetServerInfoResp'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_RpbGetServerInfoResp'node x__)
                (Control.DeepSeq.deepseq
                   (_RpbGetServerInfoResp'serverVersion x__) ()))
{- | Fields :
     
         * 'Proto.Riak_Fields.objects' @:: Lens' RpbIndexBodyResp [RpbIndexObject]@
         * 'Proto.Riak_Fields.vec'objects' @:: Lens' RpbIndexBodyResp (Data.Vector.Vector RpbIndexObject)@
         * 'Proto.Riak_Fields.continuation' @:: Lens' RpbIndexBodyResp Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'continuation' @:: Lens' RpbIndexBodyResp (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.done' @:: Lens' RpbIndexBodyResp Prelude.Bool@
         * 'Proto.Riak_Fields.maybe'done' @:: Lens' RpbIndexBodyResp (Prelude.Maybe Prelude.Bool)@ -}
data RpbIndexBodyResp
  = RpbIndexBodyResp'_constructor {_RpbIndexBodyResp'objects :: !(Data.Vector.Vector RpbIndexObject),
                                   _RpbIndexBodyResp'continuation :: !(Prelude.Maybe Data.ByteString.ByteString),
                                   _RpbIndexBodyResp'done :: !(Prelude.Maybe Prelude.Bool),
                                   _RpbIndexBodyResp'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbIndexBodyResp where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbIndexBodyResp "objects" [RpbIndexObject] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbIndexBodyResp'objects
           (\ x__ y__ -> x__ {_RpbIndexBodyResp'objects = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField RpbIndexBodyResp "vec'objects" (Data.Vector.Vector RpbIndexObject) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbIndexBodyResp'objects
           (\ x__ y__ -> x__ {_RpbIndexBodyResp'objects = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbIndexBodyResp "continuation" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbIndexBodyResp'continuation
           (\ x__ y__ -> x__ {_RpbIndexBodyResp'continuation = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbIndexBodyResp "maybe'continuation" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbIndexBodyResp'continuation
           (\ x__ y__ -> x__ {_RpbIndexBodyResp'continuation = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbIndexBodyResp "done" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbIndexBodyResp'done
           (\ x__ y__ -> x__ {_RpbIndexBodyResp'done = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbIndexBodyResp "maybe'done" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbIndexBodyResp'done
           (\ x__ y__ -> x__ {_RpbIndexBodyResp'done = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbIndexBodyResp where
  messageName _ = Data.Text.pack "RpbIndexBodyResp"
  packedMessageDescriptor _
    = "\n\
      \\DLERpbIndexBodyResp\DC2)\n\
      \\aobjects\CAN\SOH \ETX(\v2\SI.RpbIndexObjectR\aobjects\DC2\"\n\
      \\fcontinuation\CAN\STX \SOH(\fR\fcontinuation\DC2\DC2\n\
      \\EOTdone\CAN\ETX \SOH(\bR\EOTdone"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        objects__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "objects"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor RpbIndexObject)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"objects")) ::
              Data.ProtoLens.FieldDescriptor RpbIndexBodyResp
        continuation__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "continuation"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'continuation")) ::
              Data.ProtoLens.FieldDescriptor RpbIndexBodyResp
        done__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "done"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'done")) ::
              Data.ProtoLens.FieldDescriptor RpbIndexBodyResp
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, objects__field_descriptor),
           (Data.ProtoLens.Tag 2, continuation__field_descriptor),
           (Data.ProtoLens.Tag 3, done__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbIndexBodyResp'_unknownFields
        (\ x__ y__ -> x__ {_RpbIndexBodyResp'_unknownFields = y__})
  defMessage
    = RpbIndexBodyResp'_constructor
        {_RpbIndexBodyResp'objects = Data.Vector.Generic.empty,
         _RpbIndexBodyResp'continuation = Prelude.Nothing,
         _RpbIndexBodyResp'done = Prelude.Nothing,
         _RpbIndexBodyResp'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbIndexBodyResp
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld RpbIndexObject
             -> Data.ProtoLens.Encoding.Bytes.Parser RpbIndexBodyResp
        loop x mutable'objects
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'objects <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                          (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                             mutable'objects)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields
                           (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'objects") frozen'objects x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "objects"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'objects y)
                                loop x v
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "continuation"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"continuation") y x)
                                  mutable'objects
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "done"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"done") y x)
                                  mutable'objects
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'objects
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'objects <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                   Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage mutable'objects)
          "RpbIndexBodyResp"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                (\ _v
                   -> (Data.Monoid.<>)
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                        ((Prelude..)
                           (\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Data.ProtoLens.encodeMessage
                           _v))
                (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'objects") _x))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'continuation") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'done") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt
                                (\ b -> if b then 1 else 0)
                                _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData RpbIndexBodyResp where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbIndexBodyResp'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_RpbIndexBodyResp'objects x__)
                (Control.DeepSeq.deepseq
                   (_RpbIndexBodyResp'continuation x__)
                   (Control.DeepSeq.deepseq (_RpbIndexBodyResp'done x__) ())))
{- | Fields :
     
         * 'Proto.Riak_Fields.key' @:: Lens' RpbIndexObject Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.object' @:: Lens' RpbIndexObject RpbGetResp@ -}
data RpbIndexObject
  = RpbIndexObject'_constructor {_RpbIndexObject'key :: !Data.ByteString.ByteString,
                                 _RpbIndexObject'object :: !RpbGetResp,
                                 _RpbIndexObject'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbIndexObject where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbIndexObject "key" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbIndexObject'key (\ x__ y__ -> x__ {_RpbIndexObject'key = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbIndexObject "object" RpbGetResp where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbIndexObject'object
           (\ x__ y__ -> x__ {_RpbIndexObject'object = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbIndexObject where
  messageName _ = Data.Text.pack "RpbIndexObject"
  packedMessageDescriptor _
    = "\n\
      \\SORpbIndexObject\DC2\DLE\n\
      \\ETXkey\CAN\SOH \STX(\fR\ETXkey\DC2#\n\
      \\ACKobject\CAN\STX \STX(\v2\v.RpbGetRespR\ACKobject"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        key__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "key"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"key")) ::
              Data.ProtoLens.FieldDescriptor RpbIndexObject
        object__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "object"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor RpbGetResp)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"object")) ::
              Data.ProtoLens.FieldDescriptor RpbIndexObject
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, key__field_descriptor),
           (Data.ProtoLens.Tag 2, object__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbIndexObject'_unknownFields
        (\ x__ y__ -> x__ {_RpbIndexObject'_unknownFields = y__})
  defMessage
    = RpbIndexObject'_constructor
        {_RpbIndexObject'key = Data.ProtoLens.fieldDefault,
         _RpbIndexObject'object = Data.ProtoLens.defMessage,
         _RpbIndexObject'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbIndexObject
          -> Prelude.Bool
             -> Prelude.Bool
                -> Data.ProtoLens.Encoding.Bytes.Parser RpbIndexObject
        loop x required'key required'object
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'key then (:) "key" else Prelude.id)
                               ((if required'object then (:) "object" else Prelude.id) [])
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "key"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"key") y x)
                                  Prelude.False
                                  required'object
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "object"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"object") y x)
                                  required'key
                                  Prelude.False
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'key
                                  required'object
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True Prelude.True)
          "RpbIndexObject"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((\ bs
                    -> (Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"key") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                   ((Prelude..)
                      (\ bs
                         -> (Data.Monoid.<>)
                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                              (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                      Data.ProtoLens.encodeMessage
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"object") _x)))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData RpbIndexObject where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbIndexObject'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_RpbIndexObject'key x__)
                (Control.DeepSeq.deepseq (_RpbIndexObject'object x__) ()))
{- | Fields :
     
         * 'Proto.Riak_Fields.bucket' @:: Lens' RpbIndexReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.index' @:: Lens' RpbIndexReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.qtype' @:: Lens' RpbIndexReq RpbIndexReq'IndexQueryType@
         * 'Proto.Riak_Fields.key' @:: Lens' RpbIndexReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'key' @:: Lens' RpbIndexReq (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.rangeMin' @:: Lens' RpbIndexReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'rangeMin' @:: Lens' RpbIndexReq (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.rangeMax' @:: Lens' RpbIndexReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'rangeMax' @:: Lens' RpbIndexReq (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.returnTerms' @:: Lens' RpbIndexReq Prelude.Bool@
         * 'Proto.Riak_Fields.maybe'returnTerms' @:: Lens' RpbIndexReq (Prelude.Maybe Prelude.Bool)@
         * 'Proto.Riak_Fields.stream' @:: Lens' RpbIndexReq Prelude.Bool@
         * 'Proto.Riak_Fields.maybe'stream' @:: Lens' RpbIndexReq (Prelude.Maybe Prelude.Bool)@
         * 'Proto.Riak_Fields.maxResults' @:: Lens' RpbIndexReq Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'maxResults' @:: Lens' RpbIndexReq (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.continuation' @:: Lens' RpbIndexReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'continuation' @:: Lens' RpbIndexReq (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.timeout' @:: Lens' RpbIndexReq Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'timeout' @:: Lens' RpbIndexReq (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.type'' @:: Lens' RpbIndexReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'type'' @:: Lens' RpbIndexReq (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.termRegex' @:: Lens' RpbIndexReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'termRegex' @:: Lens' RpbIndexReq (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.paginationSort' @:: Lens' RpbIndexReq Prelude.Bool@
         * 'Proto.Riak_Fields.maybe'paginationSort' @:: Lens' RpbIndexReq (Prelude.Maybe Prelude.Bool)@
         * 'Proto.Riak_Fields.coverContext' @:: Lens' RpbIndexReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'coverContext' @:: Lens' RpbIndexReq (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.returnBody' @:: Lens' RpbIndexReq Prelude.Bool@
         * 'Proto.Riak_Fields.maybe'returnBody' @:: Lens' RpbIndexReq (Prelude.Maybe Prelude.Bool)@ -}
data RpbIndexReq
  = RpbIndexReq'_constructor {_RpbIndexReq'bucket :: !Data.ByteString.ByteString,
                              _RpbIndexReq'index :: !Data.ByteString.ByteString,
                              _RpbIndexReq'qtype :: !RpbIndexReq'IndexQueryType,
                              _RpbIndexReq'key :: !(Prelude.Maybe Data.ByteString.ByteString),
                              _RpbIndexReq'rangeMin :: !(Prelude.Maybe Data.ByteString.ByteString),
                              _RpbIndexReq'rangeMax :: !(Prelude.Maybe Data.ByteString.ByteString),
                              _RpbIndexReq'returnTerms :: !(Prelude.Maybe Prelude.Bool),
                              _RpbIndexReq'stream :: !(Prelude.Maybe Prelude.Bool),
                              _RpbIndexReq'maxResults :: !(Prelude.Maybe Data.Word.Word32),
                              _RpbIndexReq'continuation :: !(Prelude.Maybe Data.ByteString.ByteString),
                              _RpbIndexReq'timeout :: !(Prelude.Maybe Data.Word.Word32),
                              _RpbIndexReq'type' :: !(Prelude.Maybe Data.ByteString.ByteString),
                              _RpbIndexReq'termRegex :: !(Prelude.Maybe Data.ByteString.ByteString),
                              _RpbIndexReq'paginationSort :: !(Prelude.Maybe Prelude.Bool),
                              _RpbIndexReq'coverContext :: !(Prelude.Maybe Data.ByteString.ByteString),
                              _RpbIndexReq'returnBody :: !(Prelude.Maybe Prelude.Bool),
                              _RpbIndexReq'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbIndexReq where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbIndexReq "bucket" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbIndexReq'bucket (\ x__ y__ -> x__ {_RpbIndexReq'bucket = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbIndexReq "index" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbIndexReq'index (\ x__ y__ -> x__ {_RpbIndexReq'index = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbIndexReq "qtype" RpbIndexReq'IndexQueryType where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbIndexReq'qtype (\ x__ y__ -> x__ {_RpbIndexReq'qtype = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbIndexReq "key" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbIndexReq'key (\ x__ y__ -> x__ {_RpbIndexReq'key = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbIndexReq "maybe'key" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbIndexReq'key (\ x__ y__ -> x__ {_RpbIndexReq'key = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbIndexReq "rangeMin" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbIndexReq'rangeMin
           (\ x__ y__ -> x__ {_RpbIndexReq'rangeMin = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbIndexReq "maybe'rangeMin" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbIndexReq'rangeMin
           (\ x__ y__ -> x__ {_RpbIndexReq'rangeMin = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbIndexReq "rangeMax" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbIndexReq'rangeMax
           (\ x__ y__ -> x__ {_RpbIndexReq'rangeMax = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbIndexReq "maybe'rangeMax" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbIndexReq'rangeMax
           (\ x__ y__ -> x__ {_RpbIndexReq'rangeMax = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbIndexReq "returnTerms" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbIndexReq'returnTerms
           (\ x__ y__ -> x__ {_RpbIndexReq'returnTerms = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbIndexReq "maybe'returnTerms" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbIndexReq'returnTerms
           (\ x__ y__ -> x__ {_RpbIndexReq'returnTerms = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbIndexReq "stream" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbIndexReq'stream (\ x__ y__ -> x__ {_RpbIndexReq'stream = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbIndexReq "maybe'stream" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbIndexReq'stream (\ x__ y__ -> x__ {_RpbIndexReq'stream = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbIndexReq "maxResults" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbIndexReq'maxResults
           (\ x__ y__ -> x__ {_RpbIndexReq'maxResults = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbIndexReq "maybe'maxResults" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbIndexReq'maxResults
           (\ x__ y__ -> x__ {_RpbIndexReq'maxResults = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbIndexReq "continuation" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbIndexReq'continuation
           (\ x__ y__ -> x__ {_RpbIndexReq'continuation = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbIndexReq "maybe'continuation" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbIndexReq'continuation
           (\ x__ y__ -> x__ {_RpbIndexReq'continuation = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbIndexReq "timeout" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbIndexReq'timeout
           (\ x__ y__ -> x__ {_RpbIndexReq'timeout = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbIndexReq "maybe'timeout" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbIndexReq'timeout
           (\ x__ y__ -> x__ {_RpbIndexReq'timeout = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbIndexReq "type'" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbIndexReq'type' (\ x__ y__ -> x__ {_RpbIndexReq'type' = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbIndexReq "maybe'type'" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbIndexReq'type' (\ x__ y__ -> x__ {_RpbIndexReq'type' = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbIndexReq "termRegex" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbIndexReq'termRegex
           (\ x__ y__ -> x__ {_RpbIndexReq'termRegex = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbIndexReq "maybe'termRegex" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbIndexReq'termRegex
           (\ x__ y__ -> x__ {_RpbIndexReq'termRegex = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbIndexReq "paginationSort" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbIndexReq'paginationSort
           (\ x__ y__ -> x__ {_RpbIndexReq'paginationSort = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbIndexReq "maybe'paginationSort" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbIndexReq'paginationSort
           (\ x__ y__ -> x__ {_RpbIndexReq'paginationSort = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbIndexReq "coverContext" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbIndexReq'coverContext
           (\ x__ y__ -> x__ {_RpbIndexReq'coverContext = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbIndexReq "maybe'coverContext" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbIndexReq'coverContext
           (\ x__ y__ -> x__ {_RpbIndexReq'coverContext = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbIndexReq "returnBody" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbIndexReq'returnBody
           (\ x__ y__ -> x__ {_RpbIndexReq'returnBody = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbIndexReq "maybe'returnBody" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbIndexReq'returnBody
           (\ x__ y__ -> x__ {_RpbIndexReq'returnBody = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbIndexReq where
  messageName _ = Data.Text.pack "RpbIndexReq"
  packedMessageDescriptor _
    = "\n\
      \\vRpbIndexReq\DC2\SYN\n\
      \\ACKbucket\CAN\SOH \STX(\fR\ACKbucket\DC2\DC4\n\
      \\ENQindex\CAN\STX \STX(\fR\ENQindex\DC21\n\
      \\ENQqtype\CAN\ETX \STX(\SO2\ESC.RpbIndexReq.IndexQueryTypeR\ENQqtype\DC2\DLE\n\
      \\ETXkey\CAN\EOT \SOH(\fR\ETXkey\DC2\ESC\n\
      \\trange_min\CAN\ENQ \SOH(\fR\brangeMin\DC2\ESC\n\
      \\trange_max\CAN\ACK \SOH(\fR\brangeMax\DC2!\n\
      \\freturn_terms\CAN\a \SOH(\bR\vreturnTerms\DC2\SYN\n\
      \\ACKstream\CAN\b \SOH(\bR\ACKstream\DC2\US\n\
      \\vmax_results\CAN\t \SOH(\rR\n\
      \maxResults\DC2\"\n\
      \\fcontinuation\CAN\n\
      \ \SOH(\fR\fcontinuation\DC2\CAN\n\
      \\atimeout\CAN\v \SOH(\rR\atimeout\DC2\DC2\n\
      \\EOTtype\CAN\f \SOH(\fR\EOTtype\DC2\GS\n\
      \\n\
      \term_regex\CAN\r \SOH(\fR\ttermRegex\DC2'\n\
      \\SIpagination_sort\CAN\SO \SOH(\bR\SOpaginationSort\DC2#\n\
      \\rcover_context\CAN\SI \SOH(\fR\fcoverContext\DC2\US\n\
      \\vreturn_body\CAN\DLE \SOH(\bR\n\
      \returnBody\"#\n\
      \\SOIndexQueryType\DC2\ACK\n\
      \\STXeq\DLE\NUL\DC2\t\n\
      \\ENQrange\DLE\SOH"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        bucket__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "bucket"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"bucket")) ::
              Data.ProtoLens.FieldDescriptor RpbIndexReq
        index__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "index"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"index")) ::
              Data.ProtoLens.FieldDescriptor RpbIndexReq
        qtype__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "qtype"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor RpbIndexReq'IndexQueryType)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"qtype")) ::
              Data.ProtoLens.FieldDescriptor RpbIndexReq
        key__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "key"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'key")) ::
              Data.ProtoLens.FieldDescriptor RpbIndexReq
        rangeMin__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "range_min"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'rangeMin")) ::
              Data.ProtoLens.FieldDescriptor RpbIndexReq
        rangeMax__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "range_max"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'rangeMax")) ::
              Data.ProtoLens.FieldDescriptor RpbIndexReq
        returnTerms__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "return_terms"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'returnTerms")) ::
              Data.ProtoLens.FieldDescriptor RpbIndexReq
        stream__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "stream"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'stream")) ::
              Data.ProtoLens.FieldDescriptor RpbIndexReq
        maxResults__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "max_results"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'maxResults")) ::
              Data.ProtoLens.FieldDescriptor RpbIndexReq
        continuation__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "continuation"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'continuation")) ::
              Data.ProtoLens.FieldDescriptor RpbIndexReq
        timeout__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "timeout"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'timeout")) ::
              Data.ProtoLens.FieldDescriptor RpbIndexReq
        type'__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "type"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'type'")) ::
              Data.ProtoLens.FieldDescriptor RpbIndexReq
        termRegex__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "term_regex"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'termRegex")) ::
              Data.ProtoLens.FieldDescriptor RpbIndexReq
        paginationSort__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pagination_sort"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'paginationSort")) ::
              Data.ProtoLens.FieldDescriptor RpbIndexReq
        coverContext__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "cover_context"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'coverContext")) ::
              Data.ProtoLens.FieldDescriptor RpbIndexReq
        returnBody__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "return_body"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'returnBody")) ::
              Data.ProtoLens.FieldDescriptor RpbIndexReq
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, bucket__field_descriptor),
           (Data.ProtoLens.Tag 2, index__field_descriptor),
           (Data.ProtoLens.Tag 3, qtype__field_descriptor),
           (Data.ProtoLens.Tag 4, key__field_descriptor),
           (Data.ProtoLens.Tag 5, rangeMin__field_descriptor),
           (Data.ProtoLens.Tag 6, rangeMax__field_descriptor),
           (Data.ProtoLens.Tag 7, returnTerms__field_descriptor),
           (Data.ProtoLens.Tag 8, stream__field_descriptor),
           (Data.ProtoLens.Tag 9, maxResults__field_descriptor),
           (Data.ProtoLens.Tag 10, continuation__field_descriptor),
           (Data.ProtoLens.Tag 11, timeout__field_descriptor),
           (Data.ProtoLens.Tag 12, type'__field_descriptor),
           (Data.ProtoLens.Tag 13, termRegex__field_descriptor),
           (Data.ProtoLens.Tag 14, paginationSort__field_descriptor),
           (Data.ProtoLens.Tag 15, coverContext__field_descriptor),
           (Data.ProtoLens.Tag 16, returnBody__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbIndexReq'_unknownFields
        (\ x__ y__ -> x__ {_RpbIndexReq'_unknownFields = y__})
  defMessage
    = RpbIndexReq'_constructor
        {_RpbIndexReq'bucket = Data.ProtoLens.fieldDefault,
         _RpbIndexReq'index = Data.ProtoLens.fieldDefault,
         _RpbIndexReq'qtype = Data.ProtoLens.fieldDefault,
         _RpbIndexReq'key = Prelude.Nothing,
         _RpbIndexReq'rangeMin = Prelude.Nothing,
         _RpbIndexReq'rangeMax = Prelude.Nothing,
         _RpbIndexReq'returnTerms = Prelude.Nothing,
         _RpbIndexReq'stream = Prelude.Nothing,
         _RpbIndexReq'maxResults = Prelude.Nothing,
         _RpbIndexReq'continuation = Prelude.Nothing,
         _RpbIndexReq'timeout = Prelude.Nothing,
         _RpbIndexReq'type' = Prelude.Nothing,
         _RpbIndexReq'termRegex = Prelude.Nothing,
         _RpbIndexReq'paginationSort = Prelude.Nothing,
         _RpbIndexReq'coverContext = Prelude.Nothing,
         _RpbIndexReq'returnBody = Prelude.Nothing,
         _RpbIndexReq'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbIndexReq
          -> Prelude.Bool
             -> Prelude.Bool
                -> Prelude.Bool -> Data.ProtoLens.Encoding.Bytes.Parser RpbIndexReq
        loop x required'bucket required'index required'qtype
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'bucket then (:) "bucket" else Prelude.id)
                               ((if required'index then (:) "index" else Prelude.id)
                                  ((if required'qtype then (:) "qtype" else Prelude.id) []))
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "bucket"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"bucket") y x)
                                  Prelude.False
                                  required'index
                                  required'qtype
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "index"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"index") y x)
                                  required'bucket
                                  Prelude.False
                                  required'qtype
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "qtype"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"qtype") y x)
                                  required'bucket
                                  required'index
                                  Prelude.False
                        34
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "key"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"key") y x)
                                  required'bucket
                                  required'index
                                  required'qtype
                        42
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "range_min"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"rangeMin") y x)
                                  required'bucket
                                  required'index
                                  required'qtype
                        50
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "range_max"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"rangeMax") y x)
                                  required'bucket
                                  required'index
                                  required'qtype
                        56
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "return_terms"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"returnTerms") y x)
                                  required'bucket
                                  required'index
                                  required'qtype
                        64
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "stream"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"stream") y x)
                                  required'bucket
                                  required'index
                                  required'qtype
                        72
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "max_results"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"maxResults") y x)
                                  required'bucket
                                  required'index
                                  required'qtype
                        82
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "continuation"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"continuation") y x)
                                  required'bucket
                                  required'index
                                  required'qtype
                        88
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "timeout"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"timeout") y x)
                                  required'bucket
                                  required'index
                                  required'qtype
                        98
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "type"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"type'") y x)
                                  required'bucket
                                  required'index
                                  required'qtype
                        106
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "term_regex"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"termRegex") y x)
                                  required'bucket
                                  required'index
                                  required'qtype
                        112
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "pagination_sort"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"paginationSort") y x)
                                  required'bucket
                                  required'index
                                  required'qtype
                        122
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "cover_context"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"coverContext") y x)
                                  required'bucket
                                  required'index
                                  required'qtype
                        128
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "return_body"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"returnBody") y x)
                                  required'bucket
                                  required'index
                                  required'qtype
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'bucket
                                  required'index
                                  required'qtype
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop
                Data.ProtoLens.defMessage Prelude.True Prelude.True Prelude.True)
          "RpbIndexReq"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((\ bs
                    -> (Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"bucket") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                   ((\ bs
                       -> (Data.Monoid.<>)
                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                               (Prelude.fromIntegral (Data.ByteString.length bs)))
                            (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"index") _x)))
                ((Data.Monoid.<>)
                   ((Data.Monoid.<>)
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                      ((Prelude..)
                         ((Prelude..)
                            Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                         Prelude.fromEnum
                         (Lens.Family2.view (Data.ProtoLens.Field.field @"qtype") _x)))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'key") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                                ((\ bs
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'rangeMin") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 42)
                                   ((\ bs
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                                               (Prelude.fromIntegral (Data.ByteString.length bs)))
                                            (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                      _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'rangeMax") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 50)
                                      ((\ bs
                                          -> (Data.Monoid.<>)
                                               (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                  (Prelude.fromIntegral
                                                     (Data.ByteString.length bs)))
                                               (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                         _v))
                            ((Data.Monoid.<>)
                               (case
                                    Lens.Family2.view
                                      (Data.ProtoLens.Field.field @"maybe'returnTerms") _x
                                of
                                  Prelude.Nothing -> Data.Monoid.mempty
                                  (Prelude.Just _v)
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 56)
                                         ((Prelude..)
                                            Data.ProtoLens.Encoding.Bytes.putVarInt
                                            (\ b -> if b then 1 else 0)
                                            _v))
                               ((Data.Monoid.<>)
                                  (case
                                       Lens.Family2.view
                                         (Data.ProtoLens.Field.field @"maybe'stream") _x
                                   of
                                     Prelude.Nothing -> Data.Monoid.mempty
                                     (Prelude.Just _v)
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt 64)
                                            ((Prelude..)
                                               Data.ProtoLens.Encoding.Bytes.putVarInt
                                               (\ b -> if b then 1 else 0)
                                               _v))
                                  ((Data.Monoid.<>)
                                     (case
                                          Lens.Family2.view
                                            (Data.ProtoLens.Field.field @"maybe'maxResults") _x
                                      of
                                        Prelude.Nothing -> Data.Monoid.mempty
                                        (Prelude.Just _v)
                                          -> (Data.Monoid.<>)
                                               (Data.ProtoLens.Encoding.Bytes.putVarInt 72)
                                               ((Prelude..)
                                                  Data.ProtoLens.Encoding.Bytes.putVarInt
                                                  Prelude.fromIntegral
                                                  _v))
                                     ((Data.Monoid.<>)
                                        (case
                                             Lens.Family2.view
                                               (Data.ProtoLens.Field.field @"maybe'continuation") _x
                                         of
                                           Prelude.Nothing -> Data.Monoid.mempty
                                           (Prelude.Just _v)
                                             -> (Data.Monoid.<>)
                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt 82)
                                                  ((\ bs
                                                      -> (Data.Monoid.<>)
                                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                              (Prelude.fromIntegral
                                                                 (Data.ByteString.length bs)))
                                                           (Data.ProtoLens.Encoding.Bytes.putBytes
                                                              bs))
                                                     _v))
                                        ((Data.Monoid.<>)
                                           (case
                                                Lens.Family2.view
                                                  (Data.ProtoLens.Field.field @"maybe'timeout") _x
                                            of
                                              Prelude.Nothing -> Data.Monoid.mempty
                                              (Prelude.Just _v)
                                                -> (Data.Monoid.<>)
                                                     (Data.ProtoLens.Encoding.Bytes.putVarInt 88)
                                                     ((Prelude..)
                                                        Data.ProtoLens.Encoding.Bytes.putVarInt
                                                        Prelude.fromIntegral
                                                        _v))
                                           ((Data.Monoid.<>)
                                              (case
                                                   Lens.Family2.view
                                                     (Data.ProtoLens.Field.field @"maybe'type'") _x
                                               of
                                                 Prelude.Nothing -> Data.Monoid.mempty
                                                 (Prelude.Just _v)
                                                   -> (Data.Monoid.<>)
                                                        (Data.ProtoLens.Encoding.Bytes.putVarInt 98)
                                                        ((\ bs
                                                            -> (Data.Monoid.<>)
                                                                 (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                    (Prelude.fromIntegral
                                                                       (Data.ByteString.length bs)))
                                                                 (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                    bs))
                                                           _v))
                                              ((Data.Monoid.<>)
                                                 (case
                                                      Lens.Family2.view
                                                        (Data.ProtoLens.Field.field
                                                           @"maybe'termRegex")
                                                        _x
                                                  of
                                                    Prelude.Nothing -> Data.Monoid.mempty
                                                    (Prelude.Just _v)
                                                      -> (Data.Monoid.<>)
                                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                              106)
                                                           ((\ bs
                                                               -> (Data.Monoid.<>)
                                                                    (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                       (Prelude.fromIntegral
                                                                          (Data.ByteString.length
                                                                             bs)))
                                                                    (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                       bs))
                                                              _v))
                                                 ((Data.Monoid.<>)
                                                    (case
                                                         Lens.Family2.view
                                                           (Data.ProtoLens.Field.field
                                                              @"maybe'paginationSort")
                                                           _x
                                                     of
                                                       Prelude.Nothing -> Data.Monoid.mempty
                                                       (Prelude.Just _v)
                                                         -> (Data.Monoid.<>)
                                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                 112)
                                                              ((Prelude..)
                                                                 Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                 (\ b -> if b then 1 else 0)
                                                                 _v))
                                                    ((Data.Monoid.<>)
                                                       (case
                                                            Lens.Family2.view
                                                              (Data.ProtoLens.Field.field
                                                                 @"maybe'coverContext")
                                                              _x
                                                        of
                                                          Prelude.Nothing -> Data.Monoid.mempty
                                                          (Prelude.Just _v)
                                                            -> (Data.Monoid.<>)
                                                                 (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                    122)
                                                                 ((\ bs
                                                                     -> (Data.Monoid.<>)
                                                                          (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                             (Prelude.fromIntegral
                                                                                (Data.ByteString.length
                                                                                   bs)))
                                                                          (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                             bs))
                                                                    _v))
                                                       ((Data.Monoid.<>)
                                                          (case
                                                               Lens.Family2.view
                                                                 (Data.ProtoLens.Field.field
                                                                    @"maybe'returnBody")
                                                                 _x
                                                           of
                                                             Prelude.Nothing -> Data.Monoid.mempty
                                                             (Prelude.Just _v)
                                                               -> (Data.Monoid.<>)
                                                                    (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                       128)
                                                                    ((Prelude..)
                                                                       Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                       (\ b -> if b then 1 else 0)
                                                                       _v))
                                                          (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                                             (Lens.Family2.view
                                                                Data.ProtoLens.unknownFields
                                                                _x)))))))))))))))))
instance Control.DeepSeq.NFData RpbIndexReq where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbIndexReq'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_RpbIndexReq'bucket x__)
                (Control.DeepSeq.deepseq
                   (_RpbIndexReq'index x__)
                   (Control.DeepSeq.deepseq
                      (_RpbIndexReq'qtype x__)
                      (Control.DeepSeq.deepseq
                         (_RpbIndexReq'key x__)
                         (Control.DeepSeq.deepseq
                            (_RpbIndexReq'rangeMin x__)
                            (Control.DeepSeq.deepseq
                               (_RpbIndexReq'rangeMax x__)
                               (Control.DeepSeq.deepseq
                                  (_RpbIndexReq'returnTerms x__)
                                  (Control.DeepSeq.deepseq
                                     (_RpbIndexReq'stream x__)
                                     (Control.DeepSeq.deepseq
                                        (_RpbIndexReq'maxResults x__)
                                        (Control.DeepSeq.deepseq
                                           (_RpbIndexReq'continuation x__)
                                           (Control.DeepSeq.deepseq
                                              (_RpbIndexReq'timeout x__)
                                              (Control.DeepSeq.deepseq
                                                 (_RpbIndexReq'type' x__)
                                                 (Control.DeepSeq.deepseq
                                                    (_RpbIndexReq'termRegex x__)
                                                    (Control.DeepSeq.deepseq
                                                       (_RpbIndexReq'paginationSort x__)
                                                       (Control.DeepSeq.deepseq
                                                          (_RpbIndexReq'coverContext x__)
                                                          (Control.DeepSeq.deepseq
                                                             (_RpbIndexReq'returnBody x__)
                                                             ()))))))))))))))))
data RpbIndexReq'IndexQueryType
  = RpbIndexReq'Eq | RpbIndexReq'Range
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum RpbIndexReq'IndexQueryType where
  maybeToEnum 0 = Prelude.Just RpbIndexReq'Eq
  maybeToEnum 1 = Prelude.Just RpbIndexReq'Range
  maybeToEnum _ = Prelude.Nothing
  showEnum RpbIndexReq'Eq = "eq"
  showEnum RpbIndexReq'Range = "range"
  readEnum k
    | (Prelude.==) k "eq" = Prelude.Just RpbIndexReq'Eq
    | (Prelude.==) k "range" = Prelude.Just RpbIndexReq'Range
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded RpbIndexReq'IndexQueryType where
  minBound = RpbIndexReq'Eq
  maxBound = RpbIndexReq'Range
instance Prelude.Enum RpbIndexReq'IndexQueryType where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum IndexQueryType: "
              (Prelude.show k__)))
        Prelude.id
        (Data.ProtoLens.maybeToEnum k__)
  fromEnum RpbIndexReq'Eq = 0
  fromEnum RpbIndexReq'Range = 1
  succ RpbIndexReq'Range
    = Prelude.error
        "RpbIndexReq'IndexQueryType.succ: bad argument RpbIndexReq'Range. This value would be out of bounds."
  succ RpbIndexReq'Eq = RpbIndexReq'Range
  pred RpbIndexReq'Eq
    = Prelude.error
        "RpbIndexReq'IndexQueryType.pred: bad argument RpbIndexReq'Eq. This value would be out of bounds."
  pred RpbIndexReq'Range = RpbIndexReq'Eq
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault RpbIndexReq'IndexQueryType where
  fieldDefault = RpbIndexReq'Eq
instance Control.DeepSeq.NFData RpbIndexReq'IndexQueryType where
  rnf x__ = Prelude.seq x__ ()
{- | Fields :
     
         * 'Proto.Riak_Fields.keys' @:: Lens' RpbIndexResp [Data.ByteString.ByteString]@
         * 'Proto.Riak_Fields.vec'keys' @:: Lens' RpbIndexResp (Data.Vector.Vector Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.results' @:: Lens' RpbIndexResp [RpbPair]@
         * 'Proto.Riak_Fields.vec'results' @:: Lens' RpbIndexResp (Data.Vector.Vector RpbPair)@
         * 'Proto.Riak_Fields.continuation' @:: Lens' RpbIndexResp Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'continuation' @:: Lens' RpbIndexResp (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.done' @:: Lens' RpbIndexResp Prelude.Bool@
         * 'Proto.Riak_Fields.maybe'done' @:: Lens' RpbIndexResp (Prelude.Maybe Prelude.Bool)@ -}
data RpbIndexResp
  = RpbIndexResp'_constructor {_RpbIndexResp'keys :: !(Data.Vector.Vector Data.ByteString.ByteString),
                               _RpbIndexResp'results :: !(Data.Vector.Vector RpbPair),
                               _RpbIndexResp'continuation :: !(Prelude.Maybe Data.ByteString.ByteString),
                               _RpbIndexResp'done :: !(Prelude.Maybe Prelude.Bool),
                               _RpbIndexResp'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbIndexResp where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbIndexResp "keys" [Data.ByteString.ByteString] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbIndexResp'keys (\ x__ y__ -> x__ {_RpbIndexResp'keys = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField RpbIndexResp "vec'keys" (Data.Vector.Vector Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbIndexResp'keys (\ x__ y__ -> x__ {_RpbIndexResp'keys = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbIndexResp "results" [RpbPair] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbIndexResp'results
           (\ x__ y__ -> x__ {_RpbIndexResp'results = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField RpbIndexResp "vec'results" (Data.Vector.Vector RpbPair) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbIndexResp'results
           (\ x__ y__ -> x__ {_RpbIndexResp'results = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbIndexResp "continuation" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbIndexResp'continuation
           (\ x__ y__ -> x__ {_RpbIndexResp'continuation = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbIndexResp "maybe'continuation" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbIndexResp'continuation
           (\ x__ y__ -> x__ {_RpbIndexResp'continuation = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbIndexResp "done" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbIndexResp'done (\ x__ y__ -> x__ {_RpbIndexResp'done = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbIndexResp "maybe'done" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbIndexResp'done (\ x__ y__ -> x__ {_RpbIndexResp'done = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbIndexResp where
  messageName _ = Data.Text.pack "RpbIndexResp"
  packedMessageDescriptor _
    = "\n\
      \\fRpbIndexResp\DC2\DC2\n\
      \\EOTkeys\CAN\SOH \ETX(\fR\EOTkeys\DC2\"\n\
      \\aresults\CAN\STX \ETX(\v2\b.RpbPairR\aresults\DC2\"\n\
      \\fcontinuation\CAN\ETX \SOH(\fR\fcontinuation\DC2\DC2\n\
      \\EOTdone\CAN\EOT \SOH(\bR\EOTdone"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        keys__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "keys"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"keys")) ::
              Data.ProtoLens.FieldDescriptor RpbIndexResp
        results__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "results"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor RpbPair)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"results")) ::
              Data.ProtoLens.FieldDescriptor RpbIndexResp
        continuation__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "continuation"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'continuation")) ::
              Data.ProtoLens.FieldDescriptor RpbIndexResp
        done__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "done"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'done")) ::
              Data.ProtoLens.FieldDescriptor RpbIndexResp
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, keys__field_descriptor),
           (Data.ProtoLens.Tag 2, results__field_descriptor),
           (Data.ProtoLens.Tag 3, continuation__field_descriptor),
           (Data.ProtoLens.Tag 4, done__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbIndexResp'_unknownFields
        (\ x__ y__ -> x__ {_RpbIndexResp'_unknownFields = y__})
  defMessage
    = RpbIndexResp'_constructor
        {_RpbIndexResp'keys = Data.Vector.Generic.empty,
         _RpbIndexResp'results = Data.Vector.Generic.empty,
         _RpbIndexResp'continuation = Prelude.Nothing,
         _RpbIndexResp'done = Prelude.Nothing,
         _RpbIndexResp'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbIndexResp
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld Data.ByteString.ByteString
             -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld RpbPair
                -> Data.ProtoLens.Encoding.Bytes.Parser RpbIndexResp
        loop x mutable'keys mutable'results
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'keys <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.unsafeFreeze mutable'keys)
                      frozen'results <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                          (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                             mutable'results)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields
                           (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'keys")
                              frozen'keys
                              (Lens.Family2.set
                                 (Data.ProtoLens.Field.field @"vec'results") frozen'results x)))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.getBytes
                                              (Prelude.fromIntegral len))
                                        "keys"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'keys y)
                                loop x v mutable'results
                        18
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "results"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'results y)
                                loop x mutable'keys v
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "continuation"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"continuation") y x)
                                  mutable'keys
                                  mutable'results
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "done"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"done") y x)
                                  mutable'keys
                                  mutable'results
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'keys
                                  mutable'results
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'keys <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                Data.ProtoLens.Encoding.Growing.new
              mutable'results <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                   Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage mutable'keys mutable'results)
          "RpbIndexResp"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                (\ _v
                   -> (Data.Monoid.<>)
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                        ((\ bs
                            -> (Data.Monoid.<>)
                                 (Data.ProtoLens.Encoding.Bytes.putVarInt
                                    (Prelude.fromIntegral (Data.ByteString.length bs)))
                                 (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           _v))
                (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'keys") _x))
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                   (\ _v
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                           ((Prelude..)
                              (\ bs
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                         (Prelude.fromIntegral (Data.ByteString.length bs)))
                                      (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                              Data.ProtoLens.encodeMessage
                              _v))
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'results") _x))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'continuation") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                             ((\ bs
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                         (Prelude.fromIntegral (Data.ByteString.length bs)))
                                      (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'done") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt
                                   (\ b -> if b then 1 else 0)
                                   _v))
                      (Data.ProtoLens.Encoding.Wire.buildFieldSet
                         (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))
instance Control.DeepSeq.NFData RpbIndexResp where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbIndexResp'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_RpbIndexResp'keys x__)
                (Control.DeepSeq.deepseq
                   (_RpbIndexResp'results x__)
                   (Control.DeepSeq.deepseq
                      (_RpbIndexResp'continuation x__)
                      (Control.DeepSeq.deepseq (_RpbIndexResp'done x__) ()))))
{- | Fields :
     
         * 'Proto.Riak_Fields.bucket' @:: Lens' RpbLink Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'bucket' @:: Lens' RpbLink (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.key' @:: Lens' RpbLink Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'key' @:: Lens' RpbLink (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.tag' @:: Lens' RpbLink Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'tag' @:: Lens' RpbLink (Prelude.Maybe Data.ByteString.ByteString)@ -}
data RpbLink
  = RpbLink'_constructor {_RpbLink'bucket :: !(Prelude.Maybe Data.ByteString.ByteString),
                          _RpbLink'key :: !(Prelude.Maybe Data.ByteString.ByteString),
                          _RpbLink'tag :: !(Prelude.Maybe Data.ByteString.ByteString),
                          _RpbLink'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbLink where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbLink "bucket" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbLink'bucket (\ x__ y__ -> x__ {_RpbLink'bucket = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbLink "maybe'bucket" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbLink'bucket (\ x__ y__ -> x__ {_RpbLink'bucket = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbLink "key" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbLink'key (\ x__ y__ -> x__ {_RpbLink'key = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbLink "maybe'key" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbLink'key (\ x__ y__ -> x__ {_RpbLink'key = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbLink "tag" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbLink'tag (\ x__ y__ -> x__ {_RpbLink'tag = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbLink "maybe'tag" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbLink'tag (\ x__ y__ -> x__ {_RpbLink'tag = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbLink where
  messageName _ = Data.Text.pack "RpbLink"
  packedMessageDescriptor _
    = "\n\
      \\aRpbLink\DC2\SYN\n\
      \\ACKbucket\CAN\SOH \SOH(\fR\ACKbucket\DC2\DLE\n\
      \\ETXkey\CAN\STX \SOH(\fR\ETXkey\DC2\DLE\n\
      \\ETXtag\CAN\ETX \SOH(\fR\ETXtag"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        bucket__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "bucket"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'bucket")) ::
              Data.ProtoLens.FieldDescriptor RpbLink
        key__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "key"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'key")) ::
              Data.ProtoLens.FieldDescriptor RpbLink
        tag__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "tag"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'tag")) ::
              Data.ProtoLens.FieldDescriptor RpbLink
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, bucket__field_descriptor),
           (Data.ProtoLens.Tag 2, key__field_descriptor),
           (Data.ProtoLens.Tag 3, tag__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbLink'_unknownFields
        (\ x__ y__ -> x__ {_RpbLink'_unknownFields = y__})
  defMessage
    = RpbLink'_constructor
        {_RpbLink'bucket = Prelude.Nothing, _RpbLink'key = Prelude.Nothing,
         _RpbLink'tag = Prelude.Nothing, _RpbLink'_unknownFields = []}
  parseMessage
    = let
        loop :: RpbLink -> Data.ProtoLens.Encoding.Bytes.Parser RpbLink
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "bucket"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"bucket") y x)
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "key"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"key") y x)
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "tag"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"tag") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "RpbLink"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'bucket") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((\ bs
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt
                                   (Prelude.fromIntegral (Data.ByteString.length bs)))
                                (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'key") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'tag") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                             ((\ bs
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                         (Prelude.fromIntegral (Data.ByteString.length bs)))
                                      (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData RpbLink where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbLink'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_RpbLink'bucket x__)
                (Control.DeepSeq.deepseq
                   (_RpbLink'key x__)
                   (Control.DeepSeq.deepseq (_RpbLink'tag x__) ())))
{- | Fields :
     
         * 'Proto.Riak_Fields.timeout' @:: Lens' RpbListBucketsReq Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'timeout' @:: Lens' RpbListBucketsReq (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.stream' @:: Lens' RpbListBucketsReq Prelude.Bool@
         * 'Proto.Riak_Fields.maybe'stream' @:: Lens' RpbListBucketsReq (Prelude.Maybe Prelude.Bool)@
         * 'Proto.Riak_Fields.type'' @:: Lens' RpbListBucketsReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'type'' @:: Lens' RpbListBucketsReq (Prelude.Maybe Data.ByteString.ByteString)@ -}
data RpbListBucketsReq
  = RpbListBucketsReq'_constructor {_RpbListBucketsReq'timeout :: !(Prelude.Maybe Data.Word.Word32),
                                    _RpbListBucketsReq'stream :: !(Prelude.Maybe Prelude.Bool),
                                    _RpbListBucketsReq'type' :: !(Prelude.Maybe Data.ByteString.ByteString),
                                    _RpbListBucketsReq'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbListBucketsReq where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbListBucketsReq "timeout" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbListBucketsReq'timeout
           (\ x__ y__ -> x__ {_RpbListBucketsReq'timeout = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbListBucketsReq "maybe'timeout" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbListBucketsReq'timeout
           (\ x__ y__ -> x__ {_RpbListBucketsReq'timeout = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbListBucketsReq "stream" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbListBucketsReq'stream
           (\ x__ y__ -> x__ {_RpbListBucketsReq'stream = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbListBucketsReq "maybe'stream" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbListBucketsReq'stream
           (\ x__ y__ -> x__ {_RpbListBucketsReq'stream = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbListBucketsReq "type'" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbListBucketsReq'type'
           (\ x__ y__ -> x__ {_RpbListBucketsReq'type' = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbListBucketsReq "maybe'type'" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbListBucketsReq'type'
           (\ x__ y__ -> x__ {_RpbListBucketsReq'type' = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbListBucketsReq where
  messageName _ = Data.Text.pack "RpbListBucketsReq"
  packedMessageDescriptor _
    = "\n\
      \\DC1RpbListBucketsReq\DC2\CAN\n\
      \\atimeout\CAN\SOH \SOH(\rR\atimeout\DC2\SYN\n\
      \\ACKstream\CAN\STX \SOH(\bR\ACKstream\DC2\DC2\n\
      \\EOTtype\CAN\ETX \SOH(\fR\EOTtype"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        timeout__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "timeout"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'timeout")) ::
              Data.ProtoLens.FieldDescriptor RpbListBucketsReq
        stream__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "stream"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'stream")) ::
              Data.ProtoLens.FieldDescriptor RpbListBucketsReq
        type'__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "type"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'type'")) ::
              Data.ProtoLens.FieldDescriptor RpbListBucketsReq
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, timeout__field_descriptor),
           (Data.ProtoLens.Tag 2, stream__field_descriptor),
           (Data.ProtoLens.Tag 3, type'__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbListBucketsReq'_unknownFields
        (\ x__ y__ -> x__ {_RpbListBucketsReq'_unknownFields = y__})
  defMessage
    = RpbListBucketsReq'_constructor
        {_RpbListBucketsReq'timeout = Prelude.Nothing,
         _RpbListBucketsReq'stream = Prelude.Nothing,
         _RpbListBucketsReq'type' = Prelude.Nothing,
         _RpbListBucketsReq'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbListBucketsReq
          -> Data.ProtoLens.Encoding.Bytes.Parser RpbListBucketsReq
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "timeout"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"timeout") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "stream"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"stream") y x)
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "type"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"type'") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "RpbListBucketsReq"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'timeout") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       ((Prelude..)
                          Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'stream") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          ((Prelude..)
                             Data.ProtoLens.Encoding.Bytes.putVarInt
                             (\ b -> if b then 1 else 0)
                             _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'type'") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                             ((\ bs
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                         (Prelude.fromIntegral (Data.ByteString.length bs)))
                                      (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData RpbListBucketsReq where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbListBucketsReq'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_RpbListBucketsReq'timeout x__)
                (Control.DeepSeq.deepseq
                   (_RpbListBucketsReq'stream x__)
                   (Control.DeepSeq.deepseq (_RpbListBucketsReq'type' x__) ())))
{- | Fields :
     
         * 'Proto.Riak_Fields.buckets' @:: Lens' RpbListBucketsResp [Data.ByteString.ByteString]@
         * 'Proto.Riak_Fields.vec'buckets' @:: Lens' RpbListBucketsResp (Data.Vector.Vector Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.done' @:: Lens' RpbListBucketsResp Prelude.Bool@
         * 'Proto.Riak_Fields.maybe'done' @:: Lens' RpbListBucketsResp (Prelude.Maybe Prelude.Bool)@ -}
data RpbListBucketsResp
  = RpbListBucketsResp'_constructor {_RpbListBucketsResp'buckets :: !(Data.Vector.Vector Data.ByteString.ByteString),
                                     _RpbListBucketsResp'done :: !(Prelude.Maybe Prelude.Bool),
                                     _RpbListBucketsResp'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbListBucketsResp where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbListBucketsResp "buckets" [Data.ByteString.ByteString] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbListBucketsResp'buckets
           (\ x__ y__ -> x__ {_RpbListBucketsResp'buckets = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField RpbListBucketsResp "vec'buckets" (Data.Vector.Vector Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbListBucketsResp'buckets
           (\ x__ y__ -> x__ {_RpbListBucketsResp'buckets = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbListBucketsResp "done" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbListBucketsResp'done
           (\ x__ y__ -> x__ {_RpbListBucketsResp'done = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbListBucketsResp "maybe'done" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbListBucketsResp'done
           (\ x__ y__ -> x__ {_RpbListBucketsResp'done = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbListBucketsResp where
  messageName _ = Data.Text.pack "RpbListBucketsResp"
  packedMessageDescriptor _
    = "\n\
      \\DC2RpbListBucketsResp\DC2\CAN\n\
      \\abuckets\CAN\SOH \ETX(\fR\abuckets\DC2\DC2\n\
      \\EOTdone\CAN\STX \SOH(\bR\EOTdone"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        buckets__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "buckets"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"buckets")) ::
              Data.ProtoLens.FieldDescriptor RpbListBucketsResp
        done__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "done"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'done")) ::
              Data.ProtoLens.FieldDescriptor RpbListBucketsResp
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, buckets__field_descriptor),
           (Data.ProtoLens.Tag 2, done__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbListBucketsResp'_unknownFields
        (\ x__ y__ -> x__ {_RpbListBucketsResp'_unknownFields = y__})
  defMessage
    = RpbListBucketsResp'_constructor
        {_RpbListBucketsResp'buckets = Data.Vector.Generic.empty,
         _RpbListBucketsResp'done = Prelude.Nothing,
         _RpbListBucketsResp'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbListBucketsResp
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld Data.ByteString.ByteString
             -> Data.ProtoLens.Encoding.Bytes.Parser RpbListBucketsResp
        loop x mutable'buckets
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'buckets <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                          (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                             mutable'buckets)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields
                           (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'buckets") frozen'buckets x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.getBytes
                                              (Prelude.fromIntegral len))
                                        "buckets"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'buckets y)
                                loop x v
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "done"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"done") y x)
                                  mutable'buckets
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'buckets
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'buckets <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                   Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage mutable'buckets)
          "RpbListBucketsResp"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                (\ _v
                   -> (Data.Monoid.<>)
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                        ((\ bs
                            -> (Data.Monoid.<>)
                                 (Data.ProtoLens.Encoding.Bytes.putVarInt
                                    (Prelude.fromIntegral (Data.ByteString.length bs)))
                                 (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           _v))
                (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'buckets") _x))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'done") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          ((Prelude..)
                             Data.ProtoLens.Encoding.Bytes.putVarInt
                             (\ b -> if b then 1 else 0)
                             _v))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData RpbListBucketsResp where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbListBucketsResp'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_RpbListBucketsResp'buckets x__)
                (Control.DeepSeq.deepseq (_RpbListBucketsResp'done x__) ()))
{- | Fields :
     
         * 'Proto.Riak_Fields.bucket' @:: Lens' RpbListKeysReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.timeout' @:: Lens' RpbListKeysReq Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'timeout' @:: Lens' RpbListKeysReq (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.type'' @:: Lens' RpbListKeysReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'type'' @:: Lens' RpbListKeysReq (Prelude.Maybe Data.ByteString.ByteString)@ -}
data RpbListKeysReq
  = RpbListKeysReq'_constructor {_RpbListKeysReq'bucket :: !Data.ByteString.ByteString,
                                 _RpbListKeysReq'timeout :: !(Prelude.Maybe Data.Word.Word32),
                                 _RpbListKeysReq'type' :: !(Prelude.Maybe Data.ByteString.ByteString),
                                 _RpbListKeysReq'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbListKeysReq where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbListKeysReq "bucket" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbListKeysReq'bucket
           (\ x__ y__ -> x__ {_RpbListKeysReq'bucket = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbListKeysReq "timeout" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbListKeysReq'timeout
           (\ x__ y__ -> x__ {_RpbListKeysReq'timeout = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbListKeysReq "maybe'timeout" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbListKeysReq'timeout
           (\ x__ y__ -> x__ {_RpbListKeysReq'timeout = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbListKeysReq "type'" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbListKeysReq'type'
           (\ x__ y__ -> x__ {_RpbListKeysReq'type' = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbListKeysReq "maybe'type'" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbListKeysReq'type'
           (\ x__ y__ -> x__ {_RpbListKeysReq'type' = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbListKeysReq where
  messageName _ = Data.Text.pack "RpbListKeysReq"
  packedMessageDescriptor _
    = "\n\
      \\SORpbListKeysReq\DC2\SYN\n\
      \\ACKbucket\CAN\SOH \STX(\fR\ACKbucket\DC2\CAN\n\
      \\atimeout\CAN\STX \SOH(\rR\atimeout\DC2\DC2\n\
      \\EOTtype\CAN\ETX \SOH(\fR\EOTtype"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        bucket__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "bucket"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"bucket")) ::
              Data.ProtoLens.FieldDescriptor RpbListKeysReq
        timeout__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "timeout"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'timeout")) ::
              Data.ProtoLens.FieldDescriptor RpbListKeysReq
        type'__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "type"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'type'")) ::
              Data.ProtoLens.FieldDescriptor RpbListKeysReq
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, bucket__field_descriptor),
           (Data.ProtoLens.Tag 2, timeout__field_descriptor),
           (Data.ProtoLens.Tag 3, type'__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbListKeysReq'_unknownFields
        (\ x__ y__ -> x__ {_RpbListKeysReq'_unknownFields = y__})
  defMessage
    = RpbListKeysReq'_constructor
        {_RpbListKeysReq'bucket = Data.ProtoLens.fieldDefault,
         _RpbListKeysReq'timeout = Prelude.Nothing,
         _RpbListKeysReq'type' = Prelude.Nothing,
         _RpbListKeysReq'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbListKeysReq
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Bytes.Parser RpbListKeysReq
        loop x required'bucket
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing = (if required'bucket then (:) "bucket" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "bucket"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"bucket") y x)
                                  Prelude.False
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "timeout"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"timeout") y x)
                                  required'bucket
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "type"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"type'") y x)
                                  required'bucket
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'bucket
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True) "RpbListKeysReq"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((\ bs
                    -> (Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"bucket") _x)))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'timeout") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          ((Prelude..)
                             Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'type'") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                             ((\ bs
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                         (Prelude.fromIntegral (Data.ByteString.length bs)))
                                      (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData RpbListKeysReq where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbListKeysReq'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_RpbListKeysReq'bucket x__)
                (Control.DeepSeq.deepseq
                   (_RpbListKeysReq'timeout x__)
                   (Control.DeepSeq.deepseq (_RpbListKeysReq'type' x__) ())))
{- | Fields :
     
         * 'Proto.Riak_Fields.keys' @:: Lens' RpbListKeysResp [Data.ByteString.ByteString]@
         * 'Proto.Riak_Fields.vec'keys' @:: Lens' RpbListKeysResp (Data.Vector.Vector Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.done' @:: Lens' RpbListKeysResp Prelude.Bool@
         * 'Proto.Riak_Fields.maybe'done' @:: Lens' RpbListKeysResp (Prelude.Maybe Prelude.Bool)@ -}
data RpbListKeysResp
  = RpbListKeysResp'_constructor {_RpbListKeysResp'keys :: !(Data.Vector.Vector Data.ByteString.ByteString),
                                  _RpbListKeysResp'done :: !(Prelude.Maybe Prelude.Bool),
                                  _RpbListKeysResp'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbListKeysResp where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbListKeysResp "keys" [Data.ByteString.ByteString] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbListKeysResp'keys
           (\ x__ y__ -> x__ {_RpbListKeysResp'keys = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField RpbListKeysResp "vec'keys" (Data.Vector.Vector Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbListKeysResp'keys
           (\ x__ y__ -> x__ {_RpbListKeysResp'keys = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbListKeysResp "done" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbListKeysResp'done
           (\ x__ y__ -> x__ {_RpbListKeysResp'done = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbListKeysResp "maybe'done" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbListKeysResp'done
           (\ x__ y__ -> x__ {_RpbListKeysResp'done = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbListKeysResp where
  messageName _ = Data.Text.pack "RpbListKeysResp"
  packedMessageDescriptor _
    = "\n\
      \\SIRpbListKeysResp\DC2\DC2\n\
      \\EOTkeys\CAN\SOH \ETX(\fR\EOTkeys\DC2\DC2\n\
      \\EOTdone\CAN\STX \SOH(\bR\EOTdone"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        keys__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "keys"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"keys")) ::
              Data.ProtoLens.FieldDescriptor RpbListKeysResp
        done__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "done"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'done")) ::
              Data.ProtoLens.FieldDescriptor RpbListKeysResp
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, keys__field_descriptor),
           (Data.ProtoLens.Tag 2, done__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbListKeysResp'_unknownFields
        (\ x__ y__ -> x__ {_RpbListKeysResp'_unknownFields = y__})
  defMessage
    = RpbListKeysResp'_constructor
        {_RpbListKeysResp'keys = Data.Vector.Generic.empty,
         _RpbListKeysResp'done = Prelude.Nothing,
         _RpbListKeysResp'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbListKeysResp
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld Data.ByteString.ByteString
             -> Data.ProtoLens.Encoding.Bytes.Parser RpbListKeysResp
        loop x mutable'keys
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'keys <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.unsafeFreeze mutable'keys)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields
                           (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'keys") frozen'keys x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.getBytes
                                              (Prelude.fromIntegral len))
                                        "keys"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'keys y)
                                loop x v
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "done"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"done") y x)
                                  mutable'keys
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'keys
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'keys <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage mutable'keys)
          "RpbListKeysResp"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                (\ _v
                   -> (Data.Monoid.<>)
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                        ((\ bs
                            -> (Data.Monoid.<>)
                                 (Data.ProtoLens.Encoding.Bytes.putVarInt
                                    (Prelude.fromIntegral (Data.ByteString.length bs)))
                                 (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           _v))
                (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'keys") _x))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'done") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          ((Prelude..)
                             Data.ProtoLens.Encoding.Bytes.putVarInt
                             (\ b -> if b then 1 else 0)
                             _v))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData RpbListKeysResp where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbListKeysResp'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_RpbListKeysResp'keys x__)
                (Control.DeepSeq.deepseq (_RpbListKeysResp'done x__) ()))
{- | Fields :
     
         * 'Proto.Riak_Fields.request' @:: Lens' RpbMapRedReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.contentType' @:: Lens' RpbMapRedReq Data.ByteString.ByteString@ -}
data RpbMapRedReq
  = RpbMapRedReq'_constructor {_RpbMapRedReq'request :: !Data.ByteString.ByteString,
                               _RpbMapRedReq'contentType :: !Data.ByteString.ByteString,
                               _RpbMapRedReq'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbMapRedReq where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbMapRedReq "request" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbMapRedReq'request
           (\ x__ y__ -> x__ {_RpbMapRedReq'request = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbMapRedReq "contentType" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbMapRedReq'contentType
           (\ x__ y__ -> x__ {_RpbMapRedReq'contentType = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbMapRedReq where
  messageName _ = Data.Text.pack "RpbMapRedReq"
  packedMessageDescriptor _
    = "\n\
      \\fRpbMapRedReq\DC2\CAN\n\
      \\arequest\CAN\SOH \STX(\fR\arequest\DC2!\n\
      \\fcontent_type\CAN\STX \STX(\fR\vcontentType"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        request__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "request"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"request")) ::
              Data.ProtoLens.FieldDescriptor RpbMapRedReq
        contentType__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "content_type"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"contentType")) ::
              Data.ProtoLens.FieldDescriptor RpbMapRedReq
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, request__field_descriptor),
           (Data.ProtoLens.Tag 2, contentType__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbMapRedReq'_unknownFields
        (\ x__ y__ -> x__ {_RpbMapRedReq'_unknownFields = y__})
  defMessage
    = RpbMapRedReq'_constructor
        {_RpbMapRedReq'request = Data.ProtoLens.fieldDefault,
         _RpbMapRedReq'contentType = Data.ProtoLens.fieldDefault,
         _RpbMapRedReq'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbMapRedReq
          -> Prelude.Bool
             -> Prelude.Bool
                -> Data.ProtoLens.Encoding.Bytes.Parser RpbMapRedReq
        loop x required'contentType required'request
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'contentType then (:) "content_type" else Prelude.id)
                               ((if required'request then (:) "request" else Prelude.id) [])
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "request"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"request") y x)
                                  required'contentType
                                  Prelude.False
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "content_type"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"contentType") y x)
                                  Prelude.False
                                  required'request
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'contentType
                                  required'request
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True Prelude.True)
          "RpbMapRedReq"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((\ bs
                    -> (Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"request") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                   ((\ bs
                       -> (Data.Monoid.<>)
                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                               (Prelude.fromIntegral (Data.ByteString.length bs)))
                            (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                      (Lens.Family2.view
                         (Data.ProtoLens.Field.field @"contentType") _x)))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData RpbMapRedReq where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbMapRedReq'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_RpbMapRedReq'request x__)
                (Control.DeepSeq.deepseq (_RpbMapRedReq'contentType x__) ()))
{- | Fields :
     
         * 'Proto.Riak_Fields.phase' @:: Lens' RpbMapRedResp Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'phase' @:: Lens' RpbMapRedResp (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.response' @:: Lens' RpbMapRedResp Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'response' @:: Lens' RpbMapRedResp (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.done' @:: Lens' RpbMapRedResp Prelude.Bool@
         * 'Proto.Riak_Fields.maybe'done' @:: Lens' RpbMapRedResp (Prelude.Maybe Prelude.Bool)@ -}
data RpbMapRedResp
  = RpbMapRedResp'_constructor {_RpbMapRedResp'phase :: !(Prelude.Maybe Data.Word.Word32),
                                _RpbMapRedResp'response :: !(Prelude.Maybe Data.ByteString.ByteString),
                                _RpbMapRedResp'done :: !(Prelude.Maybe Prelude.Bool),
                                _RpbMapRedResp'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbMapRedResp where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbMapRedResp "phase" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbMapRedResp'phase
           (\ x__ y__ -> x__ {_RpbMapRedResp'phase = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbMapRedResp "maybe'phase" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbMapRedResp'phase
           (\ x__ y__ -> x__ {_RpbMapRedResp'phase = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbMapRedResp "response" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbMapRedResp'response
           (\ x__ y__ -> x__ {_RpbMapRedResp'response = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbMapRedResp "maybe'response" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbMapRedResp'response
           (\ x__ y__ -> x__ {_RpbMapRedResp'response = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbMapRedResp "done" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbMapRedResp'done (\ x__ y__ -> x__ {_RpbMapRedResp'done = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbMapRedResp "maybe'done" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbMapRedResp'done (\ x__ y__ -> x__ {_RpbMapRedResp'done = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbMapRedResp where
  messageName _ = Data.Text.pack "RpbMapRedResp"
  packedMessageDescriptor _
    = "\n\
      \\rRpbMapRedResp\DC2\DC4\n\
      \\ENQphase\CAN\SOH \SOH(\rR\ENQphase\DC2\SUB\n\
      \\bresponse\CAN\STX \SOH(\fR\bresponse\DC2\DC2\n\
      \\EOTdone\CAN\ETX \SOH(\bR\EOTdone"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        phase__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "phase"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'phase")) ::
              Data.ProtoLens.FieldDescriptor RpbMapRedResp
        response__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "response"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'response")) ::
              Data.ProtoLens.FieldDescriptor RpbMapRedResp
        done__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "done"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'done")) ::
              Data.ProtoLens.FieldDescriptor RpbMapRedResp
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, phase__field_descriptor),
           (Data.ProtoLens.Tag 2, response__field_descriptor),
           (Data.ProtoLens.Tag 3, done__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbMapRedResp'_unknownFields
        (\ x__ y__ -> x__ {_RpbMapRedResp'_unknownFields = y__})
  defMessage
    = RpbMapRedResp'_constructor
        {_RpbMapRedResp'phase = Prelude.Nothing,
         _RpbMapRedResp'response = Prelude.Nothing,
         _RpbMapRedResp'done = Prelude.Nothing,
         _RpbMapRedResp'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbMapRedResp -> Data.ProtoLens.Encoding.Bytes.Parser RpbMapRedResp
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        8 -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "phase"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"phase") y x)
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "response"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"response") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "done"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"done") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "RpbMapRedResp"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'phase") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 8)
                       ((Prelude..)
                          Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'response") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'done") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt
                                (\ b -> if b then 1 else 0)
                                _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData RpbMapRedResp where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbMapRedResp'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_RpbMapRedResp'phase x__)
                (Control.DeepSeq.deepseq
                   (_RpbMapRedResp'response x__)
                   (Control.DeepSeq.deepseq (_RpbMapRedResp'done x__) ())))
{- | Fields :
     
         * 'Proto.Riak_Fields.module'' @:: Lens' RpbModFun Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.function' @:: Lens' RpbModFun Data.ByteString.ByteString@ -}
data RpbModFun
  = RpbModFun'_constructor {_RpbModFun'module' :: !Data.ByteString.ByteString,
                            _RpbModFun'function :: !Data.ByteString.ByteString,
                            _RpbModFun'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbModFun where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbModFun "module'" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbModFun'module' (\ x__ y__ -> x__ {_RpbModFun'module' = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbModFun "function" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbModFun'function (\ x__ y__ -> x__ {_RpbModFun'function = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbModFun where
  messageName _ = Data.Text.pack "RpbModFun"
  packedMessageDescriptor _
    = "\n\
      \\tRpbModFun\DC2\SYN\n\
      \\ACKmodule\CAN\SOH \STX(\fR\ACKmodule\DC2\SUB\n\
      \\bfunction\CAN\STX \STX(\fR\bfunction"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        module'__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "module"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"module'")) ::
              Data.ProtoLens.FieldDescriptor RpbModFun
        function__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "function"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"function")) ::
              Data.ProtoLens.FieldDescriptor RpbModFun
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, module'__field_descriptor),
           (Data.ProtoLens.Tag 2, function__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbModFun'_unknownFields
        (\ x__ y__ -> x__ {_RpbModFun'_unknownFields = y__})
  defMessage
    = RpbModFun'_constructor
        {_RpbModFun'module' = Data.ProtoLens.fieldDefault,
         _RpbModFun'function = Data.ProtoLens.fieldDefault,
         _RpbModFun'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbModFun
          -> Prelude.Bool
             -> Prelude.Bool -> Data.ProtoLens.Encoding.Bytes.Parser RpbModFun
        loop x required'function required'module'
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'function then (:) "function" else Prelude.id)
                               ((if required'module' then (:) "module" else Prelude.id) [])
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "module"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"module'") y x)
                                  required'function
                                  Prelude.False
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "function"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"function") y x)
                                  Prelude.False
                                  required'module'
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'function
                                  required'module'
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True Prelude.True)
          "RpbModFun"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((\ bs
                    -> (Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"module'") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                   ((\ bs
                       -> (Data.Monoid.<>)
                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                               (Prelude.fromIntegral (Data.ByteString.length bs)))
                            (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"function") _x)))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData RpbModFun where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbModFun'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_RpbModFun'module' x__)
                (Control.DeepSeq.deepseq (_RpbModFun'function x__) ()))
{- | Fields :
     
         * 'Proto.Riak_Fields.key' @:: Lens' RpbPair Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.value' @:: Lens' RpbPair Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'value' @:: Lens' RpbPair (Prelude.Maybe Data.ByteString.ByteString)@ -}
data RpbPair
  = RpbPair'_constructor {_RpbPair'key :: !Data.ByteString.ByteString,
                          _RpbPair'value :: !(Prelude.Maybe Data.ByteString.ByteString),
                          _RpbPair'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbPair where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbPair "key" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbPair'key (\ x__ y__ -> x__ {_RpbPair'key = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbPair "value" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbPair'value (\ x__ y__ -> x__ {_RpbPair'value = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbPair "maybe'value" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbPair'value (\ x__ y__ -> x__ {_RpbPair'value = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbPair where
  messageName _ = Data.Text.pack "RpbPair"
  packedMessageDescriptor _
    = "\n\
      \\aRpbPair\DC2\DLE\n\
      \\ETXkey\CAN\SOH \STX(\fR\ETXkey\DC2\DC4\n\
      \\ENQvalue\CAN\STX \SOH(\fR\ENQvalue"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        key__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "key"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"key")) ::
              Data.ProtoLens.FieldDescriptor RpbPair
        value__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "value"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'value")) ::
              Data.ProtoLens.FieldDescriptor RpbPair
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, key__field_descriptor),
           (Data.ProtoLens.Tag 2, value__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbPair'_unknownFields
        (\ x__ y__ -> x__ {_RpbPair'_unknownFields = y__})
  defMessage
    = RpbPair'_constructor
        {_RpbPair'key = Data.ProtoLens.fieldDefault,
         _RpbPair'value = Prelude.Nothing, _RpbPair'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbPair
          -> Prelude.Bool -> Data.ProtoLens.Encoding.Bytes.Parser RpbPair
        loop x required'key
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing = (if required'key then (:) "key" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "key"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"key") y x)
                                  Prelude.False
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "value"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"value") y x)
                                  required'key
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'key
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True) "RpbPair"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((\ bs
                    -> (Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"key") _x)))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'value") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             _v))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData RpbPair where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbPair'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_RpbPair'key x__)
                (Control.DeepSeq.deepseq (_RpbPair'value x__) ()))
{- | Fields :
      -}
data RpbPingReq
  = RpbPingReq'_constructor {_RpbPingReq'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbPingReq where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message RpbPingReq where
  messageName _ = Data.Text.pack "RpbPingReq"
  packedMessageDescriptor _
    = "\n\
      \\n\
      \RpbPingReq"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag = let in Data.Map.fromList []
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbPingReq'_unknownFields
        (\ x__ y__ -> x__ {_RpbPingReq'_unknownFields = y__})
  defMessage
    = RpbPingReq'_constructor {_RpbPingReq'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbPingReq -> Data.ProtoLens.Encoding.Bytes.Parser RpbPingReq
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of {
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x) }
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "RpbPingReq"
  buildMessage
    = \ _x
        -> Data.ProtoLens.Encoding.Wire.buildFieldSet
             (Lens.Family2.view Data.ProtoLens.unknownFields _x)
instance Control.DeepSeq.NFData RpbPingReq where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq (_RpbPingReq'_unknownFields x__) ()
{- | Fields :
      -}
data RpbPingResp
  = RpbPingResp'_constructor {_RpbPingResp'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbPingResp where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message RpbPingResp where
  messageName _ = Data.Text.pack "RpbPingResp"
  packedMessageDescriptor _
    = "\n\
      \\vRpbPingResp"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag = let in Data.Map.fromList []
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbPingResp'_unknownFields
        (\ x__ y__ -> x__ {_RpbPingResp'_unknownFields = y__})
  defMessage
    = RpbPingResp'_constructor {_RpbPingResp'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbPingResp -> Data.ProtoLens.Encoding.Bytes.Parser RpbPingResp
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of {
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x) }
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "RpbPingResp"
  buildMessage
    = \ _x
        -> Data.ProtoLens.Encoding.Wire.buildFieldSet
             (Lens.Family2.view Data.ProtoLens.unknownFields _x)
instance Control.DeepSeq.NFData RpbPingResp where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq (_RpbPingResp'_unknownFields x__) ()
{- | Fields :
     
         * 'Proto.Riak_Fields.bucket' @:: Lens' RpbPutReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.key' @:: Lens' RpbPutReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'key' @:: Lens' RpbPutReq (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.vclock' @:: Lens' RpbPutReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'vclock' @:: Lens' RpbPutReq (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.content' @:: Lens' RpbPutReq RpbContent@
         * 'Proto.Riak_Fields.w' @:: Lens' RpbPutReq Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'w' @:: Lens' RpbPutReq (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.dw' @:: Lens' RpbPutReq Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'dw' @:: Lens' RpbPutReq (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.returnBody' @:: Lens' RpbPutReq Prelude.Bool@
         * 'Proto.Riak_Fields.maybe'returnBody' @:: Lens' RpbPutReq (Prelude.Maybe Prelude.Bool)@
         * 'Proto.Riak_Fields.pw' @:: Lens' RpbPutReq Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'pw' @:: Lens' RpbPutReq (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.ifNotModified' @:: Lens' RpbPutReq Prelude.Bool@
         * 'Proto.Riak_Fields.maybe'ifNotModified' @:: Lens' RpbPutReq (Prelude.Maybe Prelude.Bool)@
         * 'Proto.Riak_Fields.ifNoneMatch' @:: Lens' RpbPutReq Prelude.Bool@
         * 'Proto.Riak_Fields.maybe'ifNoneMatch' @:: Lens' RpbPutReq (Prelude.Maybe Prelude.Bool)@
         * 'Proto.Riak_Fields.returnHead' @:: Lens' RpbPutReq Prelude.Bool@
         * 'Proto.Riak_Fields.maybe'returnHead' @:: Lens' RpbPutReq (Prelude.Maybe Prelude.Bool)@
         * 'Proto.Riak_Fields.timeout' @:: Lens' RpbPutReq Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'timeout' @:: Lens' RpbPutReq (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.asis' @:: Lens' RpbPutReq Prelude.Bool@
         * 'Proto.Riak_Fields.maybe'asis' @:: Lens' RpbPutReq (Prelude.Maybe Prelude.Bool)@
         * 'Proto.Riak_Fields.sloppyQuorum' @:: Lens' RpbPutReq Prelude.Bool@
         * 'Proto.Riak_Fields.maybe'sloppyQuorum' @:: Lens' RpbPutReq (Prelude.Maybe Prelude.Bool)@
         * 'Proto.Riak_Fields.nVal' @:: Lens' RpbPutReq Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'nVal' @:: Lens' RpbPutReq (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.type'' @:: Lens' RpbPutReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'type'' @:: Lens' RpbPutReq (Prelude.Maybe Data.ByteString.ByteString)@ -}
data RpbPutReq
  = RpbPutReq'_constructor {_RpbPutReq'bucket :: !Data.ByteString.ByteString,
                            _RpbPutReq'key :: !(Prelude.Maybe Data.ByteString.ByteString),
                            _RpbPutReq'vclock :: !(Prelude.Maybe Data.ByteString.ByteString),
                            _RpbPutReq'content :: !RpbContent,
                            _RpbPutReq'w :: !(Prelude.Maybe Data.Word.Word32),
                            _RpbPutReq'dw :: !(Prelude.Maybe Data.Word.Word32),
                            _RpbPutReq'returnBody :: !(Prelude.Maybe Prelude.Bool),
                            _RpbPutReq'pw :: !(Prelude.Maybe Data.Word.Word32),
                            _RpbPutReq'ifNotModified :: !(Prelude.Maybe Prelude.Bool),
                            _RpbPutReq'ifNoneMatch :: !(Prelude.Maybe Prelude.Bool),
                            _RpbPutReq'returnHead :: !(Prelude.Maybe Prelude.Bool),
                            _RpbPutReq'timeout :: !(Prelude.Maybe Data.Word.Word32),
                            _RpbPutReq'asis :: !(Prelude.Maybe Prelude.Bool),
                            _RpbPutReq'sloppyQuorum :: !(Prelude.Maybe Prelude.Bool),
                            _RpbPutReq'nVal :: !(Prelude.Maybe Data.Word.Word32),
                            _RpbPutReq'type' :: !(Prelude.Maybe Data.ByteString.ByteString),
                            _RpbPutReq'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbPutReq where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbPutReq "bucket" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbPutReq'bucket (\ x__ y__ -> x__ {_RpbPutReq'bucket = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbPutReq "key" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbPutReq'key (\ x__ y__ -> x__ {_RpbPutReq'key = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbPutReq "maybe'key" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbPutReq'key (\ x__ y__ -> x__ {_RpbPutReq'key = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbPutReq "vclock" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbPutReq'vclock (\ x__ y__ -> x__ {_RpbPutReq'vclock = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbPutReq "maybe'vclock" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbPutReq'vclock (\ x__ y__ -> x__ {_RpbPutReq'vclock = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbPutReq "content" RpbContent where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbPutReq'content (\ x__ y__ -> x__ {_RpbPutReq'content = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbPutReq "w" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbPutReq'w (\ x__ y__ -> x__ {_RpbPutReq'w = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbPutReq "maybe'w" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbPutReq'w (\ x__ y__ -> x__ {_RpbPutReq'w = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbPutReq "dw" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbPutReq'dw (\ x__ y__ -> x__ {_RpbPutReq'dw = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbPutReq "maybe'dw" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbPutReq'dw (\ x__ y__ -> x__ {_RpbPutReq'dw = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbPutReq "returnBody" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbPutReq'returnBody
           (\ x__ y__ -> x__ {_RpbPutReq'returnBody = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbPutReq "maybe'returnBody" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbPutReq'returnBody
           (\ x__ y__ -> x__ {_RpbPutReq'returnBody = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbPutReq "pw" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbPutReq'pw (\ x__ y__ -> x__ {_RpbPutReq'pw = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbPutReq "maybe'pw" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbPutReq'pw (\ x__ y__ -> x__ {_RpbPutReq'pw = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbPutReq "ifNotModified" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbPutReq'ifNotModified
           (\ x__ y__ -> x__ {_RpbPutReq'ifNotModified = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbPutReq "maybe'ifNotModified" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbPutReq'ifNotModified
           (\ x__ y__ -> x__ {_RpbPutReq'ifNotModified = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbPutReq "ifNoneMatch" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbPutReq'ifNoneMatch
           (\ x__ y__ -> x__ {_RpbPutReq'ifNoneMatch = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbPutReq "maybe'ifNoneMatch" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbPutReq'ifNoneMatch
           (\ x__ y__ -> x__ {_RpbPutReq'ifNoneMatch = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbPutReq "returnHead" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbPutReq'returnHead
           (\ x__ y__ -> x__ {_RpbPutReq'returnHead = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbPutReq "maybe'returnHead" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbPutReq'returnHead
           (\ x__ y__ -> x__ {_RpbPutReq'returnHead = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbPutReq "timeout" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbPutReq'timeout (\ x__ y__ -> x__ {_RpbPutReq'timeout = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbPutReq "maybe'timeout" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbPutReq'timeout (\ x__ y__ -> x__ {_RpbPutReq'timeout = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbPutReq "asis" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbPutReq'asis (\ x__ y__ -> x__ {_RpbPutReq'asis = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbPutReq "maybe'asis" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbPutReq'asis (\ x__ y__ -> x__ {_RpbPutReq'asis = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbPutReq "sloppyQuorum" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbPutReq'sloppyQuorum
           (\ x__ y__ -> x__ {_RpbPutReq'sloppyQuorum = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbPutReq "maybe'sloppyQuorum" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbPutReq'sloppyQuorum
           (\ x__ y__ -> x__ {_RpbPutReq'sloppyQuorum = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbPutReq "nVal" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbPutReq'nVal (\ x__ y__ -> x__ {_RpbPutReq'nVal = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbPutReq "maybe'nVal" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbPutReq'nVal (\ x__ y__ -> x__ {_RpbPutReq'nVal = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbPutReq "type'" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbPutReq'type' (\ x__ y__ -> x__ {_RpbPutReq'type' = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbPutReq "maybe'type'" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbPutReq'type' (\ x__ y__ -> x__ {_RpbPutReq'type' = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbPutReq where
  messageName _ = Data.Text.pack "RpbPutReq"
  packedMessageDescriptor _
    = "\n\
      \\tRpbPutReq\DC2\SYN\n\
      \\ACKbucket\CAN\SOH \STX(\fR\ACKbucket\DC2\DLE\n\
      \\ETXkey\CAN\STX \SOH(\fR\ETXkey\DC2\SYN\n\
      \\ACKvclock\CAN\ETX \SOH(\fR\ACKvclock\DC2%\n\
      \\acontent\CAN\EOT \STX(\v2\v.RpbContentR\acontent\DC2\f\n\
      \\SOHw\CAN\ENQ \SOH(\rR\SOHw\DC2\SO\n\
      \\STXdw\CAN\ACK \SOH(\rR\STXdw\DC2\US\n\
      \\vreturn_body\CAN\a \SOH(\bR\n\
      \returnBody\DC2\SO\n\
      \\STXpw\CAN\b \SOH(\rR\STXpw\DC2&\n\
      \\SIif_not_modified\CAN\t \SOH(\bR\rifNotModified\DC2\"\n\
      \\rif_none_match\CAN\n\
      \ \SOH(\bR\vifNoneMatch\DC2\US\n\
      \\vreturn_head\CAN\v \SOH(\bR\n\
      \returnHead\DC2\CAN\n\
      \\atimeout\CAN\f \SOH(\rR\atimeout\DC2\DC2\n\
      \\EOTasis\CAN\r \SOH(\bR\EOTasis\DC2#\n\
      \\rsloppy_quorum\CAN\SO \SOH(\bR\fsloppyQuorum\DC2\DC3\n\
      \\ENQn_val\CAN\SI \SOH(\rR\EOTnVal\DC2\DC2\n\
      \\EOTtype\CAN\DLE \SOH(\fR\EOTtype"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        bucket__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "bucket"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"bucket")) ::
              Data.ProtoLens.FieldDescriptor RpbPutReq
        key__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "key"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'key")) ::
              Data.ProtoLens.FieldDescriptor RpbPutReq
        vclock__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "vclock"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'vclock")) ::
              Data.ProtoLens.FieldDescriptor RpbPutReq
        content__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "content"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor RpbContent)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"content")) ::
              Data.ProtoLens.FieldDescriptor RpbPutReq
        w__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "w"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'w")) ::
              Data.ProtoLens.FieldDescriptor RpbPutReq
        dw__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "dw"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'dw")) ::
              Data.ProtoLens.FieldDescriptor RpbPutReq
        returnBody__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "return_body"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'returnBody")) ::
              Data.ProtoLens.FieldDescriptor RpbPutReq
        pw__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "pw"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'pw")) ::
              Data.ProtoLens.FieldDescriptor RpbPutReq
        ifNotModified__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "if_not_modified"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ifNotModified")) ::
              Data.ProtoLens.FieldDescriptor RpbPutReq
        ifNoneMatch__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "if_none_match"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'ifNoneMatch")) ::
              Data.ProtoLens.FieldDescriptor RpbPutReq
        returnHead__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "return_head"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'returnHead")) ::
              Data.ProtoLens.FieldDescriptor RpbPutReq
        timeout__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "timeout"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'timeout")) ::
              Data.ProtoLens.FieldDescriptor RpbPutReq
        asis__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "asis"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'asis")) ::
              Data.ProtoLens.FieldDescriptor RpbPutReq
        sloppyQuorum__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "sloppy_quorum"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'sloppyQuorum")) ::
              Data.ProtoLens.FieldDescriptor RpbPutReq
        nVal__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "n_val"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'nVal")) ::
              Data.ProtoLens.FieldDescriptor RpbPutReq
        type'__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "type"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'type'")) ::
              Data.ProtoLens.FieldDescriptor RpbPutReq
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, bucket__field_descriptor),
           (Data.ProtoLens.Tag 2, key__field_descriptor),
           (Data.ProtoLens.Tag 3, vclock__field_descriptor),
           (Data.ProtoLens.Tag 4, content__field_descriptor),
           (Data.ProtoLens.Tag 5, w__field_descriptor),
           (Data.ProtoLens.Tag 6, dw__field_descriptor),
           (Data.ProtoLens.Tag 7, returnBody__field_descriptor),
           (Data.ProtoLens.Tag 8, pw__field_descriptor),
           (Data.ProtoLens.Tag 9, ifNotModified__field_descriptor),
           (Data.ProtoLens.Tag 10, ifNoneMatch__field_descriptor),
           (Data.ProtoLens.Tag 11, returnHead__field_descriptor),
           (Data.ProtoLens.Tag 12, timeout__field_descriptor),
           (Data.ProtoLens.Tag 13, asis__field_descriptor),
           (Data.ProtoLens.Tag 14, sloppyQuorum__field_descriptor),
           (Data.ProtoLens.Tag 15, nVal__field_descriptor),
           (Data.ProtoLens.Tag 16, type'__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbPutReq'_unknownFields
        (\ x__ y__ -> x__ {_RpbPutReq'_unknownFields = y__})
  defMessage
    = RpbPutReq'_constructor
        {_RpbPutReq'bucket = Data.ProtoLens.fieldDefault,
         _RpbPutReq'key = Prelude.Nothing,
         _RpbPutReq'vclock = Prelude.Nothing,
         _RpbPutReq'content = Data.ProtoLens.defMessage,
         _RpbPutReq'w = Prelude.Nothing, _RpbPutReq'dw = Prelude.Nothing,
         _RpbPutReq'returnBody = Prelude.Nothing,
         _RpbPutReq'pw = Prelude.Nothing,
         _RpbPutReq'ifNotModified = Prelude.Nothing,
         _RpbPutReq'ifNoneMatch = Prelude.Nothing,
         _RpbPutReq'returnHead = Prelude.Nothing,
         _RpbPutReq'timeout = Prelude.Nothing,
         _RpbPutReq'asis = Prelude.Nothing,
         _RpbPutReq'sloppyQuorum = Prelude.Nothing,
         _RpbPutReq'nVal = Prelude.Nothing,
         _RpbPutReq'type' = Prelude.Nothing, _RpbPutReq'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbPutReq
          -> Prelude.Bool
             -> Prelude.Bool -> Data.ProtoLens.Encoding.Bytes.Parser RpbPutReq
        loop x required'bucket required'content
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'bucket then (:) "bucket" else Prelude.id)
                               ((if required'content then (:) "content" else Prelude.id) [])
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "bucket"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"bucket") y x)
                                  Prelude.False
                                  required'content
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "key"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"key") y x)
                                  required'bucket
                                  required'content
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "vclock"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"vclock") y x)
                                  required'bucket
                                  required'content
                        34
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "content"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"content") y x)
                                  required'bucket
                                  Prelude.False
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "w"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"w") y x)
                                  required'bucket
                                  required'content
                        48
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "dw"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"dw") y x)
                                  required'bucket
                                  required'content
                        56
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "return_body"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"returnBody") y x)
                                  required'bucket
                                  required'content
                        64
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "pw"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"pw") y x)
                                  required'bucket
                                  required'content
                        72
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "if_not_modified"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"ifNotModified") y x)
                                  required'bucket
                                  required'content
                        80
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "if_none_match"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"ifNoneMatch") y x)
                                  required'bucket
                                  required'content
                        88
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "return_head"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"returnHead") y x)
                                  required'bucket
                                  required'content
                        96
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "timeout"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"timeout") y x)
                                  required'bucket
                                  required'content
                        104
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "asis"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"asis") y x)
                                  required'bucket
                                  required'content
                        112
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "sloppy_quorum"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"sloppyQuorum") y x)
                                  required'bucket
                                  required'content
                        120
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "n_val"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"nVal") y x)
                                  required'bucket
                                  required'content
                        130
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "type"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"type'") y x)
                                  required'bucket
                                  required'content
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'bucket
                                  required'content
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True Prelude.True)
          "RpbPutReq"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((\ bs
                    -> (Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"bucket") _x)))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'key") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'vclock") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                             ((\ bs
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                         (Prelude.fromIntegral (Data.ByteString.length bs)))
                                      (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                _v))
                   ((Data.Monoid.<>)
                      ((Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                         ((Prelude..)
                            (\ bs
                               -> (Data.Monoid.<>)
                                    (Data.ProtoLens.Encoding.Bytes.putVarInt
                                       (Prelude.fromIntegral (Data.ByteString.length bs)))
                                    (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                            Data.ProtoLens.encodeMessage
                            (Lens.Family2.view (Data.ProtoLens.Field.field @"content") _x)))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'w") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putVarInt
                                      Prelude.fromIntegral
                                      _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'dw") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 48)
                                      ((Prelude..)
                                         Data.ProtoLens.Encoding.Bytes.putVarInt
                                         Prelude.fromIntegral
                                         _v))
                            ((Data.Monoid.<>)
                               (case
                                    Lens.Family2.view
                                      (Data.ProtoLens.Field.field @"maybe'returnBody") _x
                                of
                                  Prelude.Nothing -> Data.Monoid.mempty
                                  (Prelude.Just _v)
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 56)
                                         ((Prelude..)
                                            Data.ProtoLens.Encoding.Bytes.putVarInt
                                            (\ b -> if b then 1 else 0)
                                            _v))
                               ((Data.Monoid.<>)
                                  (case
                                       Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'pw") _x
                                   of
                                     Prelude.Nothing -> Data.Monoid.mempty
                                     (Prelude.Just _v)
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt 64)
                                            ((Prelude..)
                                               Data.ProtoLens.Encoding.Bytes.putVarInt
                                               Prelude.fromIntegral
                                               _v))
                                  ((Data.Monoid.<>)
                                     (case
                                          Lens.Family2.view
                                            (Data.ProtoLens.Field.field @"maybe'ifNotModified") _x
                                      of
                                        Prelude.Nothing -> Data.Monoid.mempty
                                        (Prelude.Just _v)
                                          -> (Data.Monoid.<>)
                                               (Data.ProtoLens.Encoding.Bytes.putVarInt 72)
                                               ((Prelude..)
                                                  Data.ProtoLens.Encoding.Bytes.putVarInt
                                                  (\ b -> if b then 1 else 0)
                                                  _v))
                                     ((Data.Monoid.<>)
                                        (case
                                             Lens.Family2.view
                                               (Data.ProtoLens.Field.field @"maybe'ifNoneMatch") _x
                                         of
                                           Prelude.Nothing -> Data.Monoid.mempty
                                           (Prelude.Just _v)
                                             -> (Data.Monoid.<>)
                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt 80)
                                                  ((Prelude..)
                                                     Data.ProtoLens.Encoding.Bytes.putVarInt
                                                     (\ b -> if b then 1 else 0)
                                                     _v))
                                        ((Data.Monoid.<>)
                                           (case
                                                Lens.Family2.view
                                                  (Data.ProtoLens.Field.field @"maybe'returnHead")
                                                  _x
                                            of
                                              Prelude.Nothing -> Data.Monoid.mempty
                                              (Prelude.Just _v)
                                                -> (Data.Monoid.<>)
                                                     (Data.ProtoLens.Encoding.Bytes.putVarInt 88)
                                                     ((Prelude..)
                                                        Data.ProtoLens.Encoding.Bytes.putVarInt
                                                        (\ b -> if b then 1 else 0)
                                                        _v))
                                           ((Data.Monoid.<>)
                                              (case
                                                   Lens.Family2.view
                                                     (Data.ProtoLens.Field.field @"maybe'timeout")
                                                     _x
                                               of
                                                 Prelude.Nothing -> Data.Monoid.mempty
                                                 (Prelude.Just _v)
                                                   -> (Data.Monoid.<>)
                                                        (Data.ProtoLens.Encoding.Bytes.putVarInt 96)
                                                        ((Prelude..)
                                                           Data.ProtoLens.Encoding.Bytes.putVarInt
                                                           Prelude.fromIntegral
                                                           _v))
                                              ((Data.Monoid.<>)
                                                 (case
                                                      Lens.Family2.view
                                                        (Data.ProtoLens.Field.field @"maybe'asis")
                                                        _x
                                                  of
                                                    Prelude.Nothing -> Data.Monoid.mempty
                                                    (Prelude.Just _v)
                                                      -> (Data.Monoid.<>)
                                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                              104)
                                                           ((Prelude..)
                                                              Data.ProtoLens.Encoding.Bytes.putVarInt
                                                              (\ b -> if b then 1 else 0)
                                                              _v))
                                                 ((Data.Monoid.<>)
                                                    (case
                                                         Lens.Family2.view
                                                           (Data.ProtoLens.Field.field
                                                              @"maybe'sloppyQuorum")
                                                           _x
                                                     of
                                                       Prelude.Nothing -> Data.Monoid.mempty
                                                       (Prelude.Just _v)
                                                         -> (Data.Monoid.<>)
                                                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                 112)
                                                              ((Prelude..)
                                                                 Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                 (\ b -> if b then 1 else 0)
                                                                 _v))
                                                    ((Data.Monoid.<>)
                                                       (case
                                                            Lens.Family2.view
                                                              (Data.ProtoLens.Field.field
                                                                 @"maybe'nVal")
                                                              _x
                                                        of
                                                          Prelude.Nothing -> Data.Monoid.mempty
                                                          (Prelude.Just _v)
                                                            -> (Data.Monoid.<>)
                                                                 (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                    120)
                                                                 ((Prelude..)
                                                                    Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                    Prelude.fromIntegral
                                                                    _v))
                                                       ((Data.Monoid.<>)
                                                          (case
                                                               Lens.Family2.view
                                                                 (Data.ProtoLens.Field.field
                                                                    @"maybe'type'")
                                                                 _x
                                                           of
                                                             Prelude.Nothing -> Data.Monoid.mempty
                                                             (Prelude.Just _v)
                                                               -> (Data.Monoid.<>)
                                                                    (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                       130)
                                                                    ((\ bs
                                                                        -> (Data.Monoid.<>)
                                                                             (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                                                (Prelude.fromIntegral
                                                                                   (Data.ByteString.length
                                                                                      bs)))
                                                                             (Data.ProtoLens.Encoding.Bytes.putBytes
                                                                                bs))
                                                                       _v))
                                                          (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                                             (Lens.Family2.view
                                                                Data.ProtoLens.unknownFields
                                                                _x)))))))))))))))))
instance Control.DeepSeq.NFData RpbPutReq where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbPutReq'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_RpbPutReq'bucket x__)
                (Control.DeepSeq.deepseq
                   (_RpbPutReq'key x__)
                   (Control.DeepSeq.deepseq
                      (_RpbPutReq'vclock x__)
                      (Control.DeepSeq.deepseq
                         (_RpbPutReq'content x__)
                         (Control.DeepSeq.deepseq
                            (_RpbPutReq'w x__)
                            (Control.DeepSeq.deepseq
                               (_RpbPutReq'dw x__)
                               (Control.DeepSeq.deepseq
                                  (_RpbPutReq'returnBody x__)
                                  (Control.DeepSeq.deepseq
                                     (_RpbPutReq'pw x__)
                                     (Control.DeepSeq.deepseq
                                        (_RpbPutReq'ifNotModified x__)
                                        (Control.DeepSeq.deepseq
                                           (_RpbPutReq'ifNoneMatch x__)
                                           (Control.DeepSeq.deepseq
                                              (_RpbPutReq'returnHead x__)
                                              (Control.DeepSeq.deepseq
                                                 (_RpbPutReq'timeout x__)
                                                 (Control.DeepSeq.deepseq
                                                    (_RpbPutReq'asis x__)
                                                    (Control.DeepSeq.deepseq
                                                       (_RpbPutReq'sloppyQuorum x__)
                                                       (Control.DeepSeq.deepseq
                                                          (_RpbPutReq'nVal x__)
                                                          (Control.DeepSeq.deepseq
                                                             (_RpbPutReq'type' x__)
                                                             ()))))))))))))))))
{- | Fields :
     
         * 'Proto.Riak_Fields.content' @:: Lens' RpbPutResp [RpbContent]@
         * 'Proto.Riak_Fields.vec'content' @:: Lens' RpbPutResp (Data.Vector.Vector RpbContent)@
         * 'Proto.Riak_Fields.vclock' @:: Lens' RpbPutResp Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'vclock' @:: Lens' RpbPutResp (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.key' @:: Lens' RpbPutResp Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'key' @:: Lens' RpbPutResp (Prelude.Maybe Data.ByteString.ByteString)@ -}
data RpbPutResp
  = RpbPutResp'_constructor {_RpbPutResp'content :: !(Data.Vector.Vector RpbContent),
                             _RpbPutResp'vclock :: !(Prelude.Maybe Data.ByteString.ByteString),
                             _RpbPutResp'key :: !(Prelude.Maybe Data.ByteString.ByteString),
                             _RpbPutResp'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbPutResp where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbPutResp "content" [RpbContent] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbPutResp'content (\ x__ y__ -> x__ {_RpbPutResp'content = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField RpbPutResp "vec'content" (Data.Vector.Vector RpbContent) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbPutResp'content (\ x__ y__ -> x__ {_RpbPutResp'content = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbPutResp "vclock" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbPutResp'vclock (\ x__ y__ -> x__ {_RpbPutResp'vclock = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbPutResp "maybe'vclock" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbPutResp'vclock (\ x__ y__ -> x__ {_RpbPutResp'vclock = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbPutResp "key" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbPutResp'key (\ x__ y__ -> x__ {_RpbPutResp'key = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbPutResp "maybe'key" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbPutResp'key (\ x__ y__ -> x__ {_RpbPutResp'key = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbPutResp where
  messageName _ = Data.Text.pack "RpbPutResp"
  packedMessageDescriptor _
    = "\n\
      \\n\
      \RpbPutResp\DC2%\n\
      \\acontent\CAN\SOH \ETX(\v2\v.RpbContentR\acontent\DC2\SYN\n\
      \\ACKvclock\CAN\STX \SOH(\fR\ACKvclock\DC2\DLE\n\
      \\ETXkey\CAN\ETX \SOH(\fR\ETXkey"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        content__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "content"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor RpbContent)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"content")) ::
              Data.ProtoLens.FieldDescriptor RpbPutResp
        vclock__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "vclock"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'vclock")) ::
              Data.ProtoLens.FieldDescriptor RpbPutResp
        key__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "key"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'key")) ::
              Data.ProtoLens.FieldDescriptor RpbPutResp
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, content__field_descriptor),
           (Data.ProtoLens.Tag 2, vclock__field_descriptor),
           (Data.ProtoLens.Tag 3, key__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbPutResp'_unknownFields
        (\ x__ y__ -> x__ {_RpbPutResp'_unknownFields = y__})
  defMessage
    = RpbPutResp'_constructor
        {_RpbPutResp'content = Data.Vector.Generic.empty,
         _RpbPutResp'vclock = Prelude.Nothing,
         _RpbPutResp'key = Prelude.Nothing, _RpbPutResp'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbPutResp
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld RpbContent
             -> Data.ProtoLens.Encoding.Bytes.Parser RpbPutResp
        loop x mutable'content
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'content <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                          (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                             mutable'content)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields
                           (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'content") frozen'content x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "content"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'content y)
                                loop x v
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "vclock"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"vclock") y x)
                                  mutable'content
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "key"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"key") y x)
                                  mutable'content
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'content
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'content <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                   Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage mutable'content)
          "RpbPutResp"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                (\ _v
                   -> (Data.Monoid.<>)
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                        ((Prelude..)
                           (\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Data.ProtoLens.encodeMessage
                           _v))
                (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'content") _x))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'vclock") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'key") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                             ((\ bs
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                         (Prelude.fromIntegral (Data.ByteString.length bs)))
                                      (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData RpbPutResp where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbPutResp'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_RpbPutResp'content x__)
                (Control.DeepSeq.deepseq
                   (_RpbPutResp'vclock x__)
                   (Control.DeepSeq.deepseq (_RpbPutResp'key x__) ())))
{- | Fields :
     
         * 'Proto.Riak_Fields.bucket' @:: Lens' RpbResetBucketReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.type'' @:: Lens' RpbResetBucketReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'type'' @:: Lens' RpbResetBucketReq (Prelude.Maybe Data.ByteString.ByteString)@ -}
data RpbResetBucketReq
  = RpbResetBucketReq'_constructor {_RpbResetBucketReq'bucket :: !Data.ByteString.ByteString,
                                    _RpbResetBucketReq'type' :: !(Prelude.Maybe Data.ByteString.ByteString),
                                    _RpbResetBucketReq'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbResetBucketReq where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbResetBucketReq "bucket" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbResetBucketReq'bucket
           (\ x__ y__ -> x__ {_RpbResetBucketReq'bucket = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbResetBucketReq "type'" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbResetBucketReq'type'
           (\ x__ y__ -> x__ {_RpbResetBucketReq'type' = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbResetBucketReq "maybe'type'" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbResetBucketReq'type'
           (\ x__ y__ -> x__ {_RpbResetBucketReq'type' = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbResetBucketReq where
  messageName _ = Data.Text.pack "RpbResetBucketReq"
  packedMessageDescriptor _
    = "\n\
      \\DC1RpbResetBucketReq\DC2\SYN\n\
      \\ACKbucket\CAN\SOH \STX(\fR\ACKbucket\DC2\DC2\n\
      \\EOTtype\CAN\STX \SOH(\fR\EOTtype"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        bucket__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "bucket"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"bucket")) ::
              Data.ProtoLens.FieldDescriptor RpbResetBucketReq
        type'__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "type"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'type'")) ::
              Data.ProtoLens.FieldDescriptor RpbResetBucketReq
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, bucket__field_descriptor),
           (Data.ProtoLens.Tag 2, type'__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbResetBucketReq'_unknownFields
        (\ x__ y__ -> x__ {_RpbResetBucketReq'_unknownFields = y__})
  defMessage
    = RpbResetBucketReq'_constructor
        {_RpbResetBucketReq'bucket = Data.ProtoLens.fieldDefault,
         _RpbResetBucketReq'type' = Prelude.Nothing,
         _RpbResetBucketReq'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbResetBucketReq
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Bytes.Parser RpbResetBucketReq
        loop x required'bucket
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing = (if required'bucket then (:) "bucket" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "bucket"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"bucket") y x)
                                  Prelude.False
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "type"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"type'") y x)
                                  required'bucket
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'bucket
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True)
          "RpbResetBucketReq"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((\ bs
                    -> (Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"bucket") _x)))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'type'") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             _v))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData RpbResetBucketReq where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbResetBucketReq'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_RpbResetBucketReq'bucket x__)
                (Control.DeepSeq.deepseq (_RpbResetBucketReq'type' x__) ()))
{- | Fields :
      -}
data RpbResetBucketResp
  = RpbResetBucketResp'_constructor {_RpbResetBucketResp'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbResetBucketResp where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message RpbResetBucketResp where
  messageName _ = Data.Text.pack "RpbResetBucketResp"
  packedMessageDescriptor _
    = "\n\
      \\DC2RpbResetBucketResp"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag = let in Data.Map.fromList []
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbResetBucketResp'_unknownFields
        (\ x__ y__ -> x__ {_RpbResetBucketResp'_unknownFields = y__})
  defMessage
    = RpbResetBucketResp'_constructor
        {_RpbResetBucketResp'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbResetBucketResp
          -> Data.ProtoLens.Encoding.Bytes.Parser RpbResetBucketResp
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of {
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x) }
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "RpbResetBucketResp"
  buildMessage
    = \ _x
        -> Data.ProtoLens.Encoding.Wire.buildFieldSet
             (Lens.Family2.view Data.ProtoLens.unknownFields _x)
instance Control.DeepSeq.NFData RpbResetBucketResp where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbResetBucketResp'_unknownFields x__) ()
{- | Fields :
     
         * 'Proto.Riak_Fields.fields' @:: Lens' RpbSearchDoc [RpbPair]@
         * 'Proto.Riak_Fields.vec'fields' @:: Lens' RpbSearchDoc (Data.Vector.Vector RpbPair)@ -}
data RpbSearchDoc
  = RpbSearchDoc'_constructor {_RpbSearchDoc'fields :: !(Data.Vector.Vector RpbPair),
                               _RpbSearchDoc'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbSearchDoc where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbSearchDoc "fields" [RpbPair] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbSearchDoc'fields
           (\ x__ y__ -> x__ {_RpbSearchDoc'fields = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField RpbSearchDoc "vec'fields" (Data.Vector.Vector RpbPair) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbSearchDoc'fields
           (\ x__ y__ -> x__ {_RpbSearchDoc'fields = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbSearchDoc where
  messageName _ = Data.Text.pack "RpbSearchDoc"
  packedMessageDescriptor _
    = "\n\
      \\fRpbSearchDoc\DC2 \n\
      \\ACKfields\CAN\SOH \ETX(\v2\b.RpbPairR\ACKfields"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        fields__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "fields"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor RpbPair)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"fields")) ::
              Data.ProtoLens.FieldDescriptor RpbSearchDoc
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, fields__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbSearchDoc'_unknownFields
        (\ x__ y__ -> x__ {_RpbSearchDoc'_unknownFields = y__})
  defMessage
    = RpbSearchDoc'_constructor
        {_RpbSearchDoc'fields = Data.Vector.Generic.empty,
         _RpbSearchDoc'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbSearchDoc
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld RpbPair
             -> Data.ProtoLens.Encoding.Bytes.Parser RpbSearchDoc
        loop x mutable'fields
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'fields <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                         (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                            mutable'fields)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields
                           (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'fields") frozen'fields x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "fields"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'fields y)
                                loop x v
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'fields
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'fields <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                  Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage mutable'fields)
          "RpbSearchDoc"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                (\ _v
                   -> (Data.Monoid.<>)
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                        ((Prelude..)
                           (\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Data.ProtoLens.encodeMessage
                           _v))
                (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'fields") _x))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData RpbSearchDoc where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbSearchDoc'_unknownFields x__)
             (Control.DeepSeq.deepseq (_RpbSearchDoc'fields x__) ())
{- | Fields :
     
         * 'Proto.Riak_Fields.q' @:: Lens' RpbSearchQueryReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.index' @:: Lens' RpbSearchQueryReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.rows' @:: Lens' RpbSearchQueryReq Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'rows' @:: Lens' RpbSearchQueryReq (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.start' @:: Lens' RpbSearchQueryReq Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'start' @:: Lens' RpbSearchQueryReq (Prelude.Maybe Data.Word.Word32)@
         * 'Proto.Riak_Fields.sort' @:: Lens' RpbSearchQueryReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'sort' @:: Lens' RpbSearchQueryReq (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.filter' @:: Lens' RpbSearchQueryReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'filter' @:: Lens' RpbSearchQueryReq (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.df' @:: Lens' RpbSearchQueryReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'df' @:: Lens' RpbSearchQueryReq (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.op' @:: Lens' RpbSearchQueryReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'op' @:: Lens' RpbSearchQueryReq (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.fl' @:: Lens' RpbSearchQueryReq [Data.ByteString.ByteString]@
         * 'Proto.Riak_Fields.vec'fl' @:: Lens' RpbSearchQueryReq (Data.Vector.Vector Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.presort' @:: Lens' RpbSearchQueryReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'presort' @:: Lens' RpbSearchQueryReq (Prelude.Maybe Data.ByteString.ByteString)@ -}
data RpbSearchQueryReq
  = RpbSearchQueryReq'_constructor {_RpbSearchQueryReq'q :: !Data.ByteString.ByteString,
                                    _RpbSearchQueryReq'index :: !Data.ByteString.ByteString,
                                    _RpbSearchQueryReq'rows :: !(Prelude.Maybe Data.Word.Word32),
                                    _RpbSearchQueryReq'start :: !(Prelude.Maybe Data.Word.Word32),
                                    _RpbSearchQueryReq'sort :: !(Prelude.Maybe Data.ByteString.ByteString),
                                    _RpbSearchQueryReq'filter :: !(Prelude.Maybe Data.ByteString.ByteString),
                                    _RpbSearchQueryReq'df :: !(Prelude.Maybe Data.ByteString.ByteString),
                                    _RpbSearchQueryReq'op :: !(Prelude.Maybe Data.ByteString.ByteString),
                                    _RpbSearchQueryReq'fl :: !(Data.Vector.Vector Data.ByteString.ByteString),
                                    _RpbSearchQueryReq'presort :: !(Prelude.Maybe Data.ByteString.ByteString),
                                    _RpbSearchQueryReq'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbSearchQueryReq where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbSearchQueryReq "q" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbSearchQueryReq'q
           (\ x__ y__ -> x__ {_RpbSearchQueryReq'q = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbSearchQueryReq "index" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbSearchQueryReq'index
           (\ x__ y__ -> x__ {_RpbSearchQueryReq'index = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbSearchQueryReq "rows" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbSearchQueryReq'rows
           (\ x__ y__ -> x__ {_RpbSearchQueryReq'rows = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbSearchQueryReq "maybe'rows" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbSearchQueryReq'rows
           (\ x__ y__ -> x__ {_RpbSearchQueryReq'rows = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbSearchQueryReq "start" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbSearchQueryReq'start
           (\ x__ y__ -> x__ {_RpbSearchQueryReq'start = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbSearchQueryReq "maybe'start" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbSearchQueryReq'start
           (\ x__ y__ -> x__ {_RpbSearchQueryReq'start = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbSearchQueryReq "sort" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbSearchQueryReq'sort
           (\ x__ y__ -> x__ {_RpbSearchQueryReq'sort = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbSearchQueryReq "maybe'sort" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbSearchQueryReq'sort
           (\ x__ y__ -> x__ {_RpbSearchQueryReq'sort = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbSearchQueryReq "filter" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbSearchQueryReq'filter
           (\ x__ y__ -> x__ {_RpbSearchQueryReq'filter = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbSearchQueryReq "maybe'filter" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbSearchQueryReq'filter
           (\ x__ y__ -> x__ {_RpbSearchQueryReq'filter = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbSearchQueryReq "df" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbSearchQueryReq'df
           (\ x__ y__ -> x__ {_RpbSearchQueryReq'df = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbSearchQueryReq "maybe'df" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbSearchQueryReq'df
           (\ x__ y__ -> x__ {_RpbSearchQueryReq'df = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbSearchQueryReq "op" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbSearchQueryReq'op
           (\ x__ y__ -> x__ {_RpbSearchQueryReq'op = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbSearchQueryReq "maybe'op" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbSearchQueryReq'op
           (\ x__ y__ -> x__ {_RpbSearchQueryReq'op = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbSearchQueryReq "fl" [Data.ByteString.ByteString] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbSearchQueryReq'fl
           (\ x__ y__ -> x__ {_RpbSearchQueryReq'fl = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField RpbSearchQueryReq "vec'fl" (Data.Vector.Vector Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbSearchQueryReq'fl
           (\ x__ y__ -> x__ {_RpbSearchQueryReq'fl = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbSearchQueryReq "presort" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbSearchQueryReq'presort
           (\ x__ y__ -> x__ {_RpbSearchQueryReq'presort = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbSearchQueryReq "maybe'presort" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbSearchQueryReq'presort
           (\ x__ y__ -> x__ {_RpbSearchQueryReq'presort = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbSearchQueryReq where
  messageName _ = Data.Text.pack "RpbSearchQueryReq"
  packedMessageDescriptor _
    = "\n\
      \\DC1RpbSearchQueryReq\DC2\f\n\
      \\SOHq\CAN\SOH \STX(\fR\SOHq\DC2\DC4\n\
      \\ENQindex\CAN\STX \STX(\fR\ENQindex\DC2\DC2\n\
      \\EOTrows\CAN\ETX \SOH(\rR\EOTrows\DC2\DC4\n\
      \\ENQstart\CAN\EOT \SOH(\rR\ENQstart\DC2\DC2\n\
      \\EOTsort\CAN\ENQ \SOH(\fR\EOTsort\DC2\SYN\n\
      \\ACKfilter\CAN\ACK \SOH(\fR\ACKfilter\DC2\SO\n\
      \\STXdf\CAN\a \SOH(\fR\STXdf\DC2\SO\n\
      \\STXop\CAN\b \SOH(\fR\STXop\DC2\SO\n\
      \\STXfl\CAN\t \ETX(\fR\STXfl\DC2\CAN\n\
      \\apresort\CAN\n\
      \ \SOH(\fR\apresort"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        q__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "q"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"q")) ::
              Data.ProtoLens.FieldDescriptor RpbSearchQueryReq
        index__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "index"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"index")) ::
              Data.ProtoLens.FieldDescriptor RpbSearchQueryReq
        rows__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "rows"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'rows")) ::
              Data.ProtoLens.FieldDescriptor RpbSearchQueryReq
        start__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "start"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'start")) ::
              Data.ProtoLens.FieldDescriptor RpbSearchQueryReq
        sort__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "sort"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'sort")) ::
              Data.ProtoLens.FieldDescriptor RpbSearchQueryReq
        filter__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "filter"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'filter")) ::
              Data.ProtoLens.FieldDescriptor RpbSearchQueryReq
        df__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "df"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'df")) ::
              Data.ProtoLens.FieldDescriptor RpbSearchQueryReq
        op__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "op"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'op")) ::
              Data.ProtoLens.FieldDescriptor RpbSearchQueryReq
        fl__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "fl"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"fl")) ::
              Data.ProtoLens.FieldDescriptor RpbSearchQueryReq
        presort__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "presort"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'presort")) ::
              Data.ProtoLens.FieldDescriptor RpbSearchQueryReq
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, q__field_descriptor),
           (Data.ProtoLens.Tag 2, index__field_descriptor),
           (Data.ProtoLens.Tag 3, rows__field_descriptor),
           (Data.ProtoLens.Tag 4, start__field_descriptor),
           (Data.ProtoLens.Tag 5, sort__field_descriptor),
           (Data.ProtoLens.Tag 6, filter__field_descriptor),
           (Data.ProtoLens.Tag 7, df__field_descriptor),
           (Data.ProtoLens.Tag 8, op__field_descriptor),
           (Data.ProtoLens.Tag 9, fl__field_descriptor),
           (Data.ProtoLens.Tag 10, presort__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbSearchQueryReq'_unknownFields
        (\ x__ y__ -> x__ {_RpbSearchQueryReq'_unknownFields = y__})
  defMessage
    = RpbSearchQueryReq'_constructor
        {_RpbSearchQueryReq'q = Data.ProtoLens.fieldDefault,
         _RpbSearchQueryReq'index = Data.ProtoLens.fieldDefault,
         _RpbSearchQueryReq'rows = Prelude.Nothing,
         _RpbSearchQueryReq'start = Prelude.Nothing,
         _RpbSearchQueryReq'sort = Prelude.Nothing,
         _RpbSearchQueryReq'filter = Prelude.Nothing,
         _RpbSearchQueryReq'df = Prelude.Nothing,
         _RpbSearchQueryReq'op = Prelude.Nothing,
         _RpbSearchQueryReq'fl = Data.Vector.Generic.empty,
         _RpbSearchQueryReq'presort = Prelude.Nothing,
         _RpbSearchQueryReq'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbSearchQueryReq
          -> Prelude.Bool
             -> Prelude.Bool
                -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld Data.ByteString.ByteString
                   -> Data.ProtoLens.Encoding.Bytes.Parser RpbSearchQueryReq
        loop x required'index required'q mutable'fl
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'fl <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                     (Data.ProtoLens.Encoding.Growing.unsafeFreeze mutable'fl)
                      (let
                         missing
                           = (if required'index then (:) "index" else Prelude.id)
                               ((if required'q then (:) "q" else Prelude.id) [])
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields
                           (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'fl") frozen'fl x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "q"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"q") y x)
                                  required'index
                                  Prelude.False
                                  mutable'fl
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "index"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"index") y x)
                                  Prelude.False
                                  required'q
                                  mutable'fl
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "rows"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"rows") y x)
                                  required'index
                                  required'q
                                  mutable'fl
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "start"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"start") y x)
                                  required'index
                                  required'q
                                  mutable'fl
                        42
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "sort"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"sort") y x)
                                  required'index
                                  required'q
                                  mutable'fl
                        50
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "filter"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"filter") y x)
                                  required'index
                                  required'q
                                  mutable'fl
                        58
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "df"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"df") y x)
                                  required'index
                                  required'q
                                  mutable'fl
                        66
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "op"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"op") y x)
                                  required'index
                                  required'q
                                  mutable'fl
                        74
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.getBytes
                                              (Prelude.fromIntegral len))
                                        "fl"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'fl y)
                                loop x required'index required'q v
                        82
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "presort"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"presort") y x)
                                  required'index
                                  required'q
                                  mutable'fl
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'index
                                  required'q
                                  mutable'fl
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'fl <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                              Data.ProtoLens.Encoding.Growing.new
              loop
                Data.ProtoLens.defMessage Prelude.True Prelude.True mutable'fl)
          "RpbSearchQueryReq"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((\ bs
                    -> (Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"q") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                   ((\ bs
                       -> (Data.Monoid.<>)
                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                               (Prelude.fromIntegral (Data.ByteString.length bs)))
                            (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"index") _x)))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'rows") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'start") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'sort") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 42)
                                   ((\ bs
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                                               (Prelude.fromIntegral (Data.ByteString.length bs)))
                                            (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                      _v))
                         ((Data.Monoid.<>)
                            (case
                                 Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'filter") _x
                             of
                               Prelude.Nothing -> Data.Monoid.mempty
                               (Prelude.Just _v)
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt 50)
                                      ((\ bs
                                          -> (Data.Monoid.<>)
                                               (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                  (Prelude.fromIntegral
                                                     (Data.ByteString.length bs)))
                                               (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                         _v))
                            ((Data.Monoid.<>)
                               (case
                                    Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'df") _x
                                of
                                  Prelude.Nothing -> Data.Monoid.mempty
                                  (Prelude.Just _v)
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt 58)
                                         ((\ bs
                                             -> (Data.Monoid.<>)
                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                     (Prelude.fromIntegral
                                                        (Data.ByteString.length bs)))
                                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                            _v))
                               ((Data.Monoid.<>)
                                  (case
                                       Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'op") _x
                                   of
                                     Prelude.Nothing -> Data.Monoid.mempty
                                     (Prelude.Just _v)
                                       -> (Data.Monoid.<>)
                                            (Data.ProtoLens.Encoding.Bytes.putVarInt 66)
                                            ((\ bs
                                                -> (Data.Monoid.<>)
                                                     (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                        (Prelude.fromIntegral
                                                           (Data.ByteString.length bs)))
                                                     (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                               _v))
                                  ((Data.Monoid.<>)
                                     (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                                        (\ _v
                                           -> (Data.Monoid.<>)
                                                (Data.ProtoLens.Encoding.Bytes.putVarInt 74)
                                                ((\ bs
                                                    -> (Data.Monoid.<>)
                                                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                            (Prelude.fromIntegral
                                                               (Data.ByteString.length bs)))
                                                         (Data.ProtoLens.Encoding.Bytes.putBytes
                                                            bs))
                                                   _v))
                                        (Lens.Family2.view
                                           (Data.ProtoLens.Field.field @"vec'fl") _x))
                                     ((Data.Monoid.<>)
                                        (case
                                             Lens.Family2.view
                                               (Data.ProtoLens.Field.field @"maybe'presort") _x
                                         of
                                           Prelude.Nothing -> Data.Monoid.mempty
                                           (Prelude.Just _v)
                                             -> (Data.Monoid.<>)
                                                  (Data.ProtoLens.Encoding.Bytes.putVarInt 82)
                                                  ((\ bs
                                                      -> (Data.Monoid.<>)
                                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                                              (Prelude.fromIntegral
                                                                 (Data.ByteString.length bs)))
                                                           (Data.ProtoLens.Encoding.Bytes.putBytes
                                                              bs))
                                                     _v))
                                        (Data.ProtoLens.Encoding.Wire.buildFieldSet
                                           (Lens.Family2.view
                                              Data.ProtoLens.unknownFields _x)))))))))))
instance Control.DeepSeq.NFData RpbSearchQueryReq where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbSearchQueryReq'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_RpbSearchQueryReq'q x__)
                (Control.DeepSeq.deepseq
                   (_RpbSearchQueryReq'index x__)
                   (Control.DeepSeq.deepseq
                      (_RpbSearchQueryReq'rows x__)
                      (Control.DeepSeq.deepseq
                         (_RpbSearchQueryReq'start x__)
                         (Control.DeepSeq.deepseq
                            (_RpbSearchQueryReq'sort x__)
                            (Control.DeepSeq.deepseq
                               (_RpbSearchQueryReq'filter x__)
                               (Control.DeepSeq.deepseq
                                  (_RpbSearchQueryReq'df x__)
                                  (Control.DeepSeq.deepseq
                                     (_RpbSearchQueryReq'op x__)
                                     (Control.DeepSeq.deepseq
                                        (_RpbSearchQueryReq'fl x__)
                                        (Control.DeepSeq.deepseq
                                           (_RpbSearchQueryReq'presort x__) ()))))))))))
{- | Fields :
     
         * 'Proto.Riak_Fields.docs' @:: Lens' RpbSearchQueryResp [RpbSearchDoc]@
         * 'Proto.Riak_Fields.vec'docs' @:: Lens' RpbSearchQueryResp (Data.Vector.Vector RpbSearchDoc)@
         * 'Proto.Riak_Fields.maxScore' @:: Lens' RpbSearchQueryResp Prelude.Float@
         * 'Proto.Riak_Fields.maybe'maxScore' @:: Lens' RpbSearchQueryResp (Prelude.Maybe Prelude.Float)@
         * 'Proto.Riak_Fields.numFound' @:: Lens' RpbSearchQueryResp Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'numFound' @:: Lens' RpbSearchQueryResp (Prelude.Maybe Data.Word.Word32)@ -}
data RpbSearchQueryResp
  = RpbSearchQueryResp'_constructor {_RpbSearchQueryResp'docs :: !(Data.Vector.Vector RpbSearchDoc),
                                     _RpbSearchQueryResp'maxScore :: !(Prelude.Maybe Prelude.Float),
                                     _RpbSearchQueryResp'numFound :: !(Prelude.Maybe Data.Word.Word32),
                                     _RpbSearchQueryResp'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbSearchQueryResp where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbSearchQueryResp "docs" [RpbSearchDoc] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbSearchQueryResp'docs
           (\ x__ y__ -> x__ {_RpbSearchQueryResp'docs = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField RpbSearchQueryResp "vec'docs" (Data.Vector.Vector RpbSearchDoc) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbSearchQueryResp'docs
           (\ x__ y__ -> x__ {_RpbSearchQueryResp'docs = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbSearchQueryResp "maxScore" Prelude.Float where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbSearchQueryResp'maxScore
           (\ x__ y__ -> x__ {_RpbSearchQueryResp'maxScore = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbSearchQueryResp "maybe'maxScore" (Prelude.Maybe Prelude.Float) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbSearchQueryResp'maxScore
           (\ x__ y__ -> x__ {_RpbSearchQueryResp'maxScore = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbSearchQueryResp "numFound" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbSearchQueryResp'numFound
           (\ x__ y__ -> x__ {_RpbSearchQueryResp'numFound = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbSearchQueryResp "maybe'numFound" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbSearchQueryResp'numFound
           (\ x__ y__ -> x__ {_RpbSearchQueryResp'numFound = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbSearchQueryResp where
  messageName _ = Data.Text.pack "RpbSearchQueryResp"
  packedMessageDescriptor _
    = "\n\
      \\DC2RpbSearchQueryResp\DC2!\n\
      \\EOTdocs\CAN\SOH \ETX(\v2\r.RpbSearchDocR\EOTdocs\DC2\ESC\n\
      \\tmax_score\CAN\STX \SOH(\STXR\bmaxScore\DC2\ESC\n\
      \\tnum_found\CAN\ETX \SOH(\rR\bnumFound"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        docs__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "docs"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor RpbSearchDoc)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"docs")) ::
              Data.ProtoLens.FieldDescriptor RpbSearchQueryResp
        maxScore__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "max_score"
              (Data.ProtoLens.ScalarField Data.ProtoLens.FloatField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Float)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'maxScore")) ::
              Data.ProtoLens.FieldDescriptor RpbSearchQueryResp
        numFound__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "num_found"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'numFound")) ::
              Data.ProtoLens.FieldDescriptor RpbSearchQueryResp
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, docs__field_descriptor),
           (Data.ProtoLens.Tag 2, maxScore__field_descriptor),
           (Data.ProtoLens.Tag 3, numFound__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbSearchQueryResp'_unknownFields
        (\ x__ y__ -> x__ {_RpbSearchQueryResp'_unknownFields = y__})
  defMessage
    = RpbSearchQueryResp'_constructor
        {_RpbSearchQueryResp'docs = Data.Vector.Generic.empty,
         _RpbSearchQueryResp'maxScore = Prelude.Nothing,
         _RpbSearchQueryResp'numFound = Prelude.Nothing,
         _RpbSearchQueryResp'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbSearchQueryResp
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld RpbSearchDoc
             -> Data.ProtoLens.Encoding.Bytes.Parser RpbSearchQueryResp
        loop x mutable'docs
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'docs <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.unsafeFreeze mutable'docs)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields
                           (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'docs") frozen'docs x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "docs"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'docs y)
                                loop x v
                        21
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Data.ProtoLens.Encoding.Bytes.wordToFloat
                                          Data.ProtoLens.Encoding.Bytes.getFixed32)
                                       "max_score"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"maxScore") y x)
                                  mutable'docs
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "num_found"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"numFound") y x)
                                  mutable'docs
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'docs
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'docs <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage mutable'docs)
          "RpbSearchQueryResp"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                (\ _v
                   -> (Data.Monoid.<>)
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                        ((Prelude..)
                           (\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Data.ProtoLens.encodeMessage
                           _v))
                (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'docs") _x))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'maxScore") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 21)
                          ((Prelude..)
                             Data.ProtoLens.Encoding.Bytes.putFixed32
                             Data.ProtoLens.Encoding.Bytes.floatToWord
                             _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'numFound") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData RpbSearchQueryResp where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbSearchQueryResp'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_RpbSearchQueryResp'docs x__)
                (Control.DeepSeq.deepseq
                   (_RpbSearchQueryResp'maxScore x__)
                   (Control.DeepSeq.deepseq (_RpbSearchQueryResp'numFound x__) ())))
{- | Fields :
     
         * 'Proto.Riak_Fields.bucket' @:: Lens' RpbSetBucketReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.props' @:: Lens' RpbSetBucketReq RpbBucketProps@
         * 'Proto.Riak_Fields.type'' @:: Lens' RpbSetBucketReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'type'' @:: Lens' RpbSetBucketReq (Prelude.Maybe Data.ByteString.ByteString)@ -}
data RpbSetBucketReq
  = RpbSetBucketReq'_constructor {_RpbSetBucketReq'bucket :: !Data.ByteString.ByteString,
                                  _RpbSetBucketReq'props :: !RpbBucketProps,
                                  _RpbSetBucketReq'type' :: !(Prelude.Maybe Data.ByteString.ByteString),
                                  _RpbSetBucketReq'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbSetBucketReq where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbSetBucketReq "bucket" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbSetBucketReq'bucket
           (\ x__ y__ -> x__ {_RpbSetBucketReq'bucket = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbSetBucketReq "props" RpbBucketProps where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbSetBucketReq'props
           (\ x__ y__ -> x__ {_RpbSetBucketReq'props = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbSetBucketReq "type'" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbSetBucketReq'type'
           (\ x__ y__ -> x__ {_RpbSetBucketReq'type' = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbSetBucketReq "maybe'type'" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbSetBucketReq'type'
           (\ x__ y__ -> x__ {_RpbSetBucketReq'type' = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbSetBucketReq where
  messageName _ = Data.Text.pack "RpbSetBucketReq"
  packedMessageDescriptor _
    = "\n\
      \\SIRpbSetBucketReq\DC2\SYN\n\
      \\ACKbucket\CAN\SOH \STX(\fR\ACKbucket\DC2%\n\
      \\ENQprops\CAN\STX \STX(\v2\SI.RpbBucketPropsR\ENQprops\DC2\DC2\n\
      \\EOTtype\CAN\ETX \SOH(\fR\EOTtype"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        bucket__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "bucket"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"bucket")) ::
              Data.ProtoLens.FieldDescriptor RpbSetBucketReq
        props__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "props"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor RpbBucketProps)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"props")) ::
              Data.ProtoLens.FieldDescriptor RpbSetBucketReq
        type'__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "type"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'type'")) ::
              Data.ProtoLens.FieldDescriptor RpbSetBucketReq
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, bucket__field_descriptor),
           (Data.ProtoLens.Tag 2, props__field_descriptor),
           (Data.ProtoLens.Tag 3, type'__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbSetBucketReq'_unknownFields
        (\ x__ y__ -> x__ {_RpbSetBucketReq'_unknownFields = y__})
  defMessage
    = RpbSetBucketReq'_constructor
        {_RpbSetBucketReq'bucket = Data.ProtoLens.fieldDefault,
         _RpbSetBucketReq'props = Data.ProtoLens.defMessage,
         _RpbSetBucketReq'type' = Prelude.Nothing,
         _RpbSetBucketReq'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbSetBucketReq
          -> Prelude.Bool
             -> Prelude.Bool
                -> Data.ProtoLens.Encoding.Bytes.Parser RpbSetBucketReq
        loop x required'bucket required'props
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'bucket then (:) "bucket" else Prelude.id)
                               ((if required'props then (:) "props" else Prelude.id) [])
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "bucket"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"bucket") y x)
                                  Prelude.False
                                  required'props
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "props"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"props") y x)
                                  required'bucket
                                  Prelude.False
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "type"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"type'") y x)
                                  required'bucket
                                  required'props
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'bucket
                                  required'props
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True Prelude.True)
          "RpbSetBucketReq"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((\ bs
                    -> (Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"bucket") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                   ((Prelude..)
                      (\ bs
                         -> (Data.Monoid.<>)
                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                              (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                      Data.ProtoLens.encodeMessage
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"props") _x)))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'type'") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                             ((\ bs
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                         (Prelude.fromIntegral (Data.ByteString.length bs)))
                                      (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData RpbSetBucketReq where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbSetBucketReq'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_RpbSetBucketReq'bucket x__)
                (Control.DeepSeq.deepseq
                   (_RpbSetBucketReq'props x__)
                   (Control.DeepSeq.deepseq (_RpbSetBucketReq'type' x__) ())))
{- | Fields :
      -}
data RpbSetBucketResp
  = RpbSetBucketResp'_constructor {_RpbSetBucketResp'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbSetBucketResp where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message RpbSetBucketResp where
  messageName _ = Data.Text.pack "RpbSetBucketResp"
  packedMessageDescriptor _
    = "\n\
      \\DLERpbSetBucketResp"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag = let in Data.Map.fromList []
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbSetBucketResp'_unknownFields
        (\ x__ y__ -> x__ {_RpbSetBucketResp'_unknownFields = y__})
  defMessage
    = RpbSetBucketResp'_constructor
        {_RpbSetBucketResp'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbSetBucketResp
          -> Data.ProtoLens.Encoding.Bytes.Parser RpbSetBucketResp
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of {
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x) }
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "RpbSetBucketResp"
  buildMessage
    = \ _x
        -> Data.ProtoLens.Encoding.Wire.buildFieldSet
             (Lens.Family2.view Data.ProtoLens.unknownFields _x)
instance Control.DeepSeq.NFData RpbSetBucketResp where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbSetBucketResp'_unknownFields x__) ()
{- | Fields :
     
         * 'Proto.Riak_Fields.type'' @:: Lens' RpbSetBucketTypeReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.props' @:: Lens' RpbSetBucketTypeReq RpbBucketProps@ -}
data RpbSetBucketTypeReq
  = RpbSetBucketTypeReq'_constructor {_RpbSetBucketTypeReq'type' :: !Data.ByteString.ByteString,
                                      _RpbSetBucketTypeReq'props :: !RpbBucketProps,
                                      _RpbSetBucketTypeReq'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbSetBucketTypeReq where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbSetBucketTypeReq "type'" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbSetBucketTypeReq'type'
           (\ x__ y__ -> x__ {_RpbSetBucketTypeReq'type' = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbSetBucketTypeReq "props" RpbBucketProps where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbSetBucketTypeReq'props
           (\ x__ y__ -> x__ {_RpbSetBucketTypeReq'props = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbSetBucketTypeReq where
  messageName _ = Data.Text.pack "RpbSetBucketTypeReq"
  packedMessageDescriptor _
    = "\n\
      \\DC3RpbSetBucketTypeReq\DC2\DC2\n\
      \\EOTtype\CAN\SOH \STX(\fR\EOTtype\DC2%\n\
      \\ENQprops\CAN\STX \STX(\v2\SI.RpbBucketPropsR\ENQprops"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        type'__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "type"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"type'")) ::
              Data.ProtoLens.FieldDescriptor RpbSetBucketTypeReq
        props__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "props"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor RpbBucketProps)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"props")) ::
              Data.ProtoLens.FieldDescriptor RpbSetBucketTypeReq
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, type'__field_descriptor),
           (Data.ProtoLens.Tag 2, props__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbSetBucketTypeReq'_unknownFields
        (\ x__ y__ -> x__ {_RpbSetBucketTypeReq'_unknownFields = y__})
  defMessage
    = RpbSetBucketTypeReq'_constructor
        {_RpbSetBucketTypeReq'type' = Data.ProtoLens.fieldDefault,
         _RpbSetBucketTypeReq'props = Data.ProtoLens.defMessage,
         _RpbSetBucketTypeReq'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbSetBucketTypeReq
          -> Prelude.Bool
             -> Prelude.Bool
                -> Data.ProtoLens.Encoding.Bytes.Parser RpbSetBucketTypeReq
        loop x required'props required'type'
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'props then (:) "props" else Prelude.id)
                               ((if required'type' then (:) "type" else Prelude.id) [])
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "type"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"type'") y x)
                                  required'props
                                  Prelude.False
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "props"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"props") y x)
                                  Prelude.False
                                  required'type'
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'props
                                  required'type'
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True Prelude.True)
          "RpbSetBucketTypeReq"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((\ bs
                    -> (Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"type'") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                   ((Prelude..)
                      (\ bs
                         -> (Data.Monoid.<>)
                              (Data.ProtoLens.Encoding.Bytes.putVarInt
                                 (Prelude.fromIntegral (Data.ByteString.length bs)))
                              (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                      Data.ProtoLens.encodeMessage
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"props") _x)))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData RpbSetBucketTypeReq where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbSetBucketTypeReq'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_RpbSetBucketTypeReq'type' x__)
                (Control.DeepSeq.deepseq (_RpbSetBucketTypeReq'props x__) ()))
{- | Fields :
     
         * 'Proto.Riak_Fields.clientId' @:: Lens' RpbSetClientIdReq Data.ByteString.ByteString@ -}
data RpbSetClientIdReq
  = RpbSetClientIdReq'_constructor {_RpbSetClientIdReq'clientId :: !Data.ByteString.ByteString,
                                    _RpbSetClientIdReq'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbSetClientIdReq where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbSetClientIdReq "clientId" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbSetClientIdReq'clientId
           (\ x__ y__ -> x__ {_RpbSetClientIdReq'clientId = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbSetClientIdReq where
  messageName _ = Data.Text.pack "RpbSetClientIdReq"
  packedMessageDescriptor _
    = "\n\
      \\DC1RpbSetClientIdReq\DC2\ESC\n\
      \\tclient_id\CAN\SOH \STX(\fR\bclientId"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        clientId__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "client_id"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"clientId")) ::
              Data.ProtoLens.FieldDescriptor RpbSetClientIdReq
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, clientId__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbSetClientIdReq'_unknownFields
        (\ x__ y__ -> x__ {_RpbSetClientIdReq'_unknownFields = y__})
  defMessage
    = RpbSetClientIdReq'_constructor
        {_RpbSetClientIdReq'clientId = Data.ProtoLens.fieldDefault,
         _RpbSetClientIdReq'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbSetClientIdReq
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Bytes.Parser RpbSetClientIdReq
        loop x required'clientId
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'clientId then (:) "client_id" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "client_id"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"clientId") y x)
                                  Prelude.False
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'clientId
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True)
          "RpbSetClientIdReq"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((\ bs
                    -> (Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"clientId") _x)))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData RpbSetClientIdReq where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbSetClientIdReq'_unknownFields x__)
             (Control.DeepSeq.deepseq (_RpbSetClientIdReq'clientId x__) ())
{- | Fields :
     
         * 'Proto.Riak_Fields.name' @:: Lens' RpbYokozunaIndex Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.schema' @:: Lens' RpbYokozunaIndex Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'schema' @:: Lens' RpbYokozunaIndex (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.nVal' @:: Lens' RpbYokozunaIndex Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'nVal' @:: Lens' RpbYokozunaIndex (Prelude.Maybe Data.Word.Word32)@ -}
data RpbYokozunaIndex
  = RpbYokozunaIndex'_constructor {_RpbYokozunaIndex'name :: !Data.ByteString.ByteString,
                                   _RpbYokozunaIndex'schema :: !(Prelude.Maybe Data.ByteString.ByteString),
                                   _RpbYokozunaIndex'nVal :: !(Prelude.Maybe Data.Word.Word32),
                                   _RpbYokozunaIndex'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbYokozunaIndex where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbYokozunaIndex "name" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbYokozunaIndex'name
           (\ x__ y__ -> x__ {_RpbYokozunaIndex'name = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbYokozunaIndex "schema" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbYokozunaIndex'schema
           (\ x__ y__ -> x__ {_RpbYokozunaIndex'schema = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbYokozunaIndex "maybe'schema" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbYokozunaIndex'schema
           (\ x__ y__ -> x__ {_RpbYokozunaIndex'schema = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbYokozunaIndex "nVal" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbYokozunaIndex'nVal
           (\ x__ y__ -> x__ {_RpbYokozunaIndex'nVal = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbYokozunaIndex "maybe'nVal" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbYokozunaIndex'nVal
           (\ x__ y__ -> x__ {_RpbYokozunaIndex'nVal = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbYokozunaIndex where
  messageName _ = Data.Text.pack "RpbYokozunaIndex"
  packedMessageDescriptor _
    = "\n\
      \\DLERpbYokozunaIndex\DC2\DC2\n\
      \\EOTname\CAN\SOH \STX(\fR\EOTname\DC2\SYN\n\
      \\ACKschema\CAN\STX \SOH(\fR\ACKschema\DC2\DC3\n\
      \\ENQn_val\CAN\ETX \SOH(\rR\EOTnVal"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        name__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "name"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"name")) ::
              Data.ProtoLens.FieldDescriptor RpbYokozunaIndex
        schema__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "schema"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'schema")) ::
              Data.ProtoLens.FieldDescriptor RpbYokozunaIndex
        nVal__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "n_val"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'nVal")) ::
              Data.ProtoLens.FieldDescriptor RpbYokozunaIndex
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, name__field_descriptor),
           (Data.ProtoLens.Tag 2, schema__field_descriptor),
           (Data.ProtoLens.Tag 3, nVal__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbYokozunaIndex'_unknownFields
        (\ x__ y__ -> x__ {_RpbYokozunaIndex'_unknownFields = y__})
  defMessage
    = RpbYokozunaIndex'_constructor
        {_RpbYokozunaIndex'name = Data.ProtoLens.fieldDefault,
         _RpbYokozunaIndex'schema = Prelude.Nothing,
         _RpbYokozunaIndex'nVal = Prelude.Nothing,
         _RpbYokozunaIndex'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbYokozunaIndex
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Bytes.Parser RpbYokozunaIndex
        loop x required'name
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing = (if required'name then (:) "name" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "name"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"name") y x)
                                  Prelude.False
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "schema"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"schema") y x)
                                  required'name
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "n_val"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"nVal") y x)
                                  required'name
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'name
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True) "RpbYokozunaIndex"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((\ bs
                    -> (Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"name") _x)))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'schema") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'nVal") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData RpbYokozunaIndex where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbYokozunaIndex'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_RpbYokozunaIndex'name x__)
                (Control.DeepSeq.deepseq
                   (_RpbYokozunaIndex'schema x__)
                   (Control.DeepSeq.deepseq (_RpbYokozunaIndex'nVal x__) ())))
{- | Fields :
     
         * 'Proto.Riak_Fields.name' @:: Lens' RpbYokozunaIndexDeleteReq Data.ByteString.ByteString@ -}
data RpbYokozunaIndexDeleteReq
  = RpbYokozunaIndexDeleteReq'_constructor {_RpbYokozunaIndexDeleteReq'name :: !Data.ByteString.ByteString,
                                            _RpbYokozunaIndexDeleteReq'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbYokozunaIndexDeleteReq where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbYokozunaIndexDeleteReq "name" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbYokozunaIndexDeleteReq'name
           (\ x__ y__ -> x__ {_RpbYokozunaIndexDeleteReq'name = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbYokozunaIndexDeleteReq where
  messageName _ = Data.Text.pack "RpbYokozunaIndexDeleteReq"
  packedMessageDescriptor _
    = "\n\
      \\EMRpbYokozunaIndexDeleteReq\DC2\DC2\n\
      \\EOTname\CAN\SOH \STX(\fR\EOTname"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        name__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "name"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"name")) ::
              Data.ProtoLens.FieldDescriptor RpbYokozunaIndexDeleteReq
      in
        Data.Map.fromList [(Data.ProtoLens.Tag 1, name__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbYokozunaIndexDeleteReq'_unknownFields
        (\ x__ y__
           -> x__ {_RpbYokozunaIndexDeleteReq'_unknownFields = y__})
  defMessage
    = RpbYokozunaIndexDeleteReq'_constructor
        {_RpbYokozunaIndexDeleteReq'name = Data.ProtoLens.fieldDefault,
         _RpbYokozunaIndexDeleteReq'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbYokozunaIndexDeleteReq
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Bytes.Parser RpbYokozunaIndexDeleteReq
        loop x required'name
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing = (if required'name then (:) "name" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "name"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"name") y x)
                                  Prelude.False
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'name
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True)
          "RpbYokozunaIndexDeleteReq"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((\ bs
                    -> (Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"name") _x)))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData RpbYokozunaIndexDeleteReq where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbYokozunaIndexDeleteReq'_unknownFields x__)
             (Control.DeepSeq.deepseq (_RpbYokozunaIndexDeleteReq'name x__) ())
{- | Fields :
     
         * 'Proto.Riak_Fields.name' @:: Lens' RpbYokozunaIndexGetReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'name' @:: Lens' RpbYokozunaIndexGetReq (Prelude.Maybe Data.ByteString.ByteString)@ -}
data RpbYokozunaIndexGetReq
  = RpbYokozunaIndexGetReq'_constructor {_RpbYokozunaIndexGetReq'name :: !(Prelude.Maybe Data.ByteString.ByteString),
                                         _RpbYokozunaIndexGetReq'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbYokozunaIndexGetReq where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbYokozunaIndexGetReq "name" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbYokozunaIndexGetReq'name
           (\ x__ y__ -> x__ {_RpbYokozunaIndexGetReq'name = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbYokozunaIndexGetReq "maybe'name" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbYokozunaIndexGetReq'name
           (\ x__ y__ -> x__ {_RpbYokozunaIndexGetReq'name = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbYokozunaIndexGetReq where
  messageName _ = Data.Text.pack "RpbYokozunaIndexGetReq"
  packedMessageDescriptor _
    = "\n\
      \\SYNRpbYokozunaIndexGetReq\DC2\DC2\n\
      \\EOTname\CAN\SOH \SOH(\fR\EOTname"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        name__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "name"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'name")) ::
              Data.ProtoLens.FieldDescriptor RpbYokozunaIndexGetReq
      in
        Data.Map.fromList [(Data.ProtoLens.Tag 1, name__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbYokozunaIndexGetReq'_unknownFields
        (\ x__ y__ -> x__ {_RpbYokozunaIndexGetReq'_unknownFields = y__})
  defMessage
    = RpbYokozunaIndexGetReq'_constructor
        {_RpbYokozunaIndexGetReq'name = Prelude.Nothing,
         _RpbYokozunaIndexGetReq'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbYokozunaIndexGetReq
          -> Data.ProtoLens.Encoding.Bytes.Parser RpbYokozunaIndexGetReq
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "name"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"name") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "RpbYokozunaIndexGetReq"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'name") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((\ bs
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt
                                   (Prelude.fromIntegral (Data.ByteString.length bs)))
                                (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          _v))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData RpbYokozunaIndexGetReq where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbYokozunaIndexGetReq'_unknownFields x__)
             (Control.DeepSeq.deepseq (_RpbYokozunaIndexGetReq'name x__) ())
{- | Fields :
     
         * 'Proto.Riak_Fields.index' @:: Lens' RpbYokozunaIndexGetResp [RpbYokozunaIndex]@
         * 'Proto.Riak_Fields.vec'index' @:: Lens' RpbYokozunaIndexGetResp (Data.Vector.Vector RpbYokozunaIndex)@ -}
data RpbYokozunaIndexGetResp
  = RpbYokozunaIndexGetResp'_constructor {_RpbYokozunaIndexGetResp'index :: !(Data.Vector.Vector RpbYokozunaIndex),
                                          _RpbYokozunaIndexGetResp'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbYokozunaIndexGetResp where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbYokozunaIndexGetResp "index" [RpbYokozunaIndex] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbYokozunaIndexGetResp'index
           (\ x__ y__ -> x__ {_RpbYokozunaIndexGetResp'index = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField RpbYokozunaIndexGetResp "vec'index" (Data.Vector.Vector RpbYokozunaIndex) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbYokozunaIndexGetResp'index
           (\ x__ y__ -> x__ {_RpbYokozunaIndexGetResp'index = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbYokozunaIndexGetResp where
  messageName _ = Data.Text.pack "RpbYokozunaIndexGetResp"
  packedMessageDescriptor _
    = "\n\
      \\ETBRpbYokozunaIndexGetResp\DC2'\n\
      \\ENQindex\CAN\SOH \ETX(\v2\DC1.RpbYokozunaIndexR\ENQindex"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        index__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "index"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor RpbYokozunaIndex)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"index")) ::
              Data.ProtoLens.FieldDescriptor RpbYokozunaIndexGetResp
      in
        Data.Map.fromList [(Data.ProtoLens.Tag 1, index__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbYokozunaIndexGetResp'_unknownFields
        (\ x__ y__ -> x__ {_RpbYokozunaIndexGetResp'_unknownFields = y__})
  defMessage
    = RpbYokozunaIndexGetResp'_constructor
        {_RpbYokozunaIndexGetResp'index = Data.Vector.Generic.empty,
         _RpbYokozunaIndexGetResp'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbYokozunaIndexGetResp
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld RpbYokozunaIndex
             -> Data.ProtoLens.Encoding.Bytes.Parser RpbYokozunaIndexGetResp
        loop x mutable'index
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'index <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                        (Data.ProtoLens.Encoding.Growing.unsafeFreeze mutable'index)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields
                           (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'index") frozen'index x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "index"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'index y)
                                loop x v
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'index
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'index <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                 Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage mutable'index)
          "RpbYokozunaIndexGetResp"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                (\ _v
                   -> (Data.Monoid.<>)
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                        ((Prelude..)
                           (\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Data.ProtoLens.encodeMessage
                           _v))
                (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'index") _x))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData RpbYokozunaIndexGetResp where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbYokozunaIndexGetResp'_unknownFields x__)
             (Control.DeepSeq.deepseq (_RpbYokozunaIndexGetResp'index x__) ())
{- | Fields :
     
         * 'Proto.Riak_Fields.index' @:: Lens' RpbYokozunaIndexPutReq RpbYokozunaIndex@
         * 'Proto.Riak_Fields.timeout' @:: Lens' RpbYokozunaIndexPutReq Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'timeout' @:: Lens' RpbYokozunaIndexPutReq (Prelude.Maybe Data.Word.Word32)@ -}
data RpbYokozunaIndexPutReq
  = RpbYokozunaIndexPutReq'_constructor {_RpbYokozunaIndexPutReq'index :: !RpbYokozunaIndex,
                                         _RpbYokozunaIndexPutReq'timeout :: !(Prelude.Maybe Data.Word.Word32),
                                         _RpbYokozunaIndexPutReq'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbYokozunaIndexPutReq where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbYokozunaIndexPutReq "index" RpbYokozunaIndex where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbYokozunaIndexPutReq'index
           (\ x__ y__ -> x__ {_RpbYokozunaIndexPutReq'index = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbYokozunaIndexPutReq "timeout" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbYokozunaIndexPutReq'timeout
           (\ x__ y__ -> x__ {_RpbYokozunaIndexPutReq'timeout = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbYokozunaIndexPutReq "maybe'timeout" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbYokozunaIndexPutReq'timeout
           (\ x__ y__ -> x__ {_RpbYokozunaIndexPutReq'timeout = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbYokozunaIndexPutReq where
  messageName _ = Data.Text.pack "RpbYokozunaIndexPutReq"
  packedMessageDescriptor _
    = "\n\
      \\SYNRpbYokozunaIndexPutReq\DC2'\n\
      \\ENQindex\CAN\SOH \STX(\v2\DC1.RpbYokozunaIndexR\ENQindex\DC2\CAN\n\
      \\atimeout\CAN\STX \SOH(\rR\atimeout"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        index__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "index"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor RpbYokozunaIndex)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"index")) ::
              Data.ProtoLens.FieldDescriptor RpbYokozunaIndexPutReq
        timeout__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "timeout"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'timeout")) ::
              Data.ProtoLens.FieldDescriptor RpbYokozunaIndexPutReq
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, index__field_descriptor),
           (Data.ProtoLens.Tag 2, timeout__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbYokozunaIndexPutReq'_unknownFields
        (\ x__ y__ -> x__ {_RpbYokozunaIndexPutReq'_unknownFields = y__})
  defMessage
    = RpbYokozunaIndexPutReq'_constructor
        {_RpbYokozunaIndexPutReq'index = Data.ProtoLens.defMessage,
         _RpbYokozunaIndexPutReq'timeout = Prelude.Nothing,
         _RpbYokozunaIndexPutReq'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbYokozunaIndexPutReq
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Bytes.Parser RpbYokozunaIndexPutReq
        loop x required'index
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing = (if required'index then (:) "index" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "index"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"index") y x)
                                  Prelude.False
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "timeout"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"timeout") y x)
                                  required'index
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'index
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True)
          "RpbYokozunaIndexPutReq"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((Prelude..)
                   (\ bs
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   Data.ProtoLens.encodeMessage
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"index") _x)))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'timeout") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          ((Prelude..)
                             Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData RpbYokozunaIndexPutReq where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbYokozunaIndexPutReq'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_RpbYokozunaIndexPutReq'index x__)
                (Control.DeepSeq.deepseq (_RpbYokozunaIndexPutReq'timeout x__) ()))
{- | Fields :
     
         * 'Proto.Riak_Fields.name' @:: Lens' RpbYokozunaSchema Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.content' @:: Lens' RpbYokozunaSchema Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'content' @:: Lens' RpbYokozunaSchema (Prelude.Maybe Data.ByteString.ByteString)@ -}
data RpbYokozunaSchema
  = RpbYokozunaSchema'_constructor {_RpbYokozunaSchema'name :: !Data.ByteString.ByteString,
                                    _RpbYokozunaSchema'content :: !(Prelude.Maybe Data.ByteString.ByteString),
                                    _RpbYokozunaSchema'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbYokozunaSchema where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbYokozunaSchema "name" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbYokozunaSchema'name
           (\ x__ y__ -> x__ {_RpbYokozunaSchema'name = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField RpbYokozunaSchema "content" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbYokozunaSchema'content
           (\ x__ y__ -> x__ {_RpbYokozunaSchema'content = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField RpbYokozunaSchema "maybe'content" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbYokozunaSchema'content
           (\ x__ y__ -> x__ {_RpbYokozunaSchema'content = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbYokozunaSchema where
  messageName _ = Data.Text.pack "RpbYokozunaSchema"
  packedMessageDescriptor _
    = "\n\
      \\DC1RpbYokozunaSchema\DC2\DC2\n\
      \\EOTname\CAN\SOH \STX(\fR\EOTname\DC2\CAN\n\
      \\acontent\CAN\STX \SOH(\fR\acontent"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        name__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "name"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"name")) ::
              Data.ProtoLens.FieldDescriptor RpbYokozunaSchema
        content__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "content"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'content")) ::
              Data.ProtoLens.FieldDescriptor RpbYokozunaSchema
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, name__field_descriptor),
           (Data.ProtoLens.Tag 2, content__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbYokozunaSchema'_unknownFields
        (\ x__ y__ -> x__ {_RpbYokozunaSchema'_unknownFields = y__})
  defMessage
    = RpbYokozunaSchema'_constructor
        {_RpbYokozunaSchema'name = Data.ProtoLens.fieldDefault,
         _RpbYokozunaSchema'content = Prelude.Nothing,
         _RpbYokozunaSchema'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbYokozunaSchema
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Bytes.Parser RpbYokozunaSchema
        loop x required'name
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing = (if required'name then (:) "name" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "name"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"name") y x)
                                  Prelude.False
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "content"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"content") y x)
                                  required'name
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'name
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True)
          "RpbYokozunaSchema"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((\ bs
                    -> (Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"name") _x)))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'content") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                          ((\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                             _v))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData RpbYokozunaSchema where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbYokozunaSchema'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_RpbYokozunaSchema'name x__)
                (Control.DeepSeq.deepseq (_RpbYokozunaSchema'content x__) ()))
{- | Fields :
     
         * 'Proto.Riak_Fields.name' @:: Lens' RpbYokozunaSchemaGetReq Data.ByteString.ByteString@ -}
data RpbYokozunaSchemaGetReq
  = RpbYokozunaSchemaGetReq'_constructor {_RpbYokozunaSchemaGetReq'name :: !Data.ByteString.ByteString,
                                          _RpbYokozunaSchemaGetReq'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbYokozunaSchemaGetReq where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbYokozunaSchemaGetReq "name" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbYokozunaSchemaGetReq'name
           (\ x__ y__ -> x__ {_RpbYokozunaSchemaGetReq'name = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbYokozunaSchemaGetReq where
  messageName _ = Data.Text.pack "RpbYokozunaSchemaGetReq"
  packedMessageDescriptor _
    = "\n\
      \\ETBRpbYokozunaSchemaGetReq\DC2\DC2\n\
      \\EOTname\CAN\SOH \STX(\fR\EOTname"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        name__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "name"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"name")) ::
              Data.ProtoLens.FieldDescriptor RpbYokozunaSchemaGetReq
      in
        Data.Map.fromList [(Data.ProtoLens.Tag 1, name__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbYokozunaSchemaGetReq'_unknownFields
        (\ x__ y__ -> x__ {_RpbYokozunaSchemaGetReq'_unknownFields = y__})
  defMessage
    = RpbYokozunaSchemaGetReq'_constructor
        {_RpbYokozunaSchemaGetReq'name = Data.ProtoLens.fieldDefault,
         _RpbYokozunaSchemaGetReq'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbYokozunaSchemaGetReq
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Bytes.Parser RpbYokozunaSchemaGetReq
        loop x required'name
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing = (if required'name then (:) "name" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "name"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"name") y x)
                                  Prelude.False
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'name
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True)
          "RpbYokozunaSchemaGetReq"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((\ bs
                    -> (Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"name") _x)))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData RpbYokozunaSchemaGetReq where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbYokozunaSchemaGetReq'_unknownFields x__)
             (Control.DeepSeq.deepseq (_RpbYokozunaSchemaGetReq'name x__) ())
{- | Fields :
     
         * 'Proto.Riak_Fields.schema' @:: Lens' RpbYokozunaSchemaGetResp RpbYokozunaSchema@ -}
data RpbYokozunaSchemaGetResp
  = RpbYokozunaSchemaGetResp'_constructor {_RpbYokozunaSchemaGetResp'schema :: !RpbYokozunaSchema,
                                           _RpbYokozunaSchemaGetResp'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbYokozunaSchemaGetResp where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbYokozunaSchemaGetResp "schema" RpbYokozunaSchema where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbYokozunaSchemaGetResp'schema
           (\ x__ y__ -> x__ {_RpbYokozunaSchemaGetResp'schema = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbYokozunaSchemaGetResp where
  messageName _ = Data.Text.pack "RpbYokozunaSchemaGetResp"
  packedMessageDescriptor _
    = "\n\
      \\CANRpbYokozunaSchemaGetResp\DC2*\n\
      \\ACKschema\CAN\SOH \STX(\v2\DC2.RpbYokozunaSchemaR\ACKschema"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        schema__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "schema"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor RpbYokozunaSchema)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"schema")) ::
              Data.ProtoLens.FieldDescriptor RpbYokozunaSchemaGetResp
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, schema__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbYokozunaSchemaGetResp'_unknownFields
        (\ x__ y__ -> x__ {_RpbYokozunaSchemaGetResp'_unknownFields = y__})
  defMessage
    = RpbYokozunaSchemaGetResp'_constructor
        {_RpbYokozunaSchemaGetResp'schema = Data.ProtoLens.defMessage,
         _RpbYokozunaSchemaGetResp'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbYokozunaSchemaGetResp
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Bytes.Parser RpbYokozunaSchemaGetResp
        loop x required'schema
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing = (if required'schema then (:) "schema" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "schema"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"schema") y x)
                                  Prelude.False
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'schema
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True)
          "RpbYokozunaSchemaGetResp"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((Prelude..)
                   (\ bs
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   Data.ProtoLens.encodeMessage
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"schema") _x)))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData RpbYokozunaSchemaGetResp where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbYokozunaSchemaGetResp'_unknownFields x__)
             (Control.DeepSeq.deepseq (_RpbYokozunaSchemaGetResp'schema x__) ())
{- | Fields :
     
         * 'Proto.Riak_Fields.schema' @:: Lens' RpbYokozunaSchemaPutReq RpbYokozunaSchema@ -}
data RpbYokozunaSchemaPutReq
  = RpbYokozunaSchemaPutReq'_constructor {_RpbYokozunaSchemaPutReq'schema :: !RpbYokozunaSchema,
                                          _RpbYokozunaSchemaPutReq'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show RpbYokozunaSchemaPutReq where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField RpbYokozunaSchemaPutReq "schema" RpbYokozunaSchema where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _RpbYokozunaSchemaPutReq'schema
           (\ x__ y__ -> x__ {_RpbYokozunaSchemaPutReq'schema = y__}))
        Prelude.id
instance Data.ProtoLens.Message RpbYokozunaSchemaPutReq where
  messageName _ = Data.Text.pack "RpbYokozunaSchemaPutReq"
  packedMessageDescriptor _
    = "\n\
      \\ETBRpbYokozunaSchemaPutReq\DC2*\n\
      \\ACKschema\CAN\SOH \STX(\v2\DC2.RpbYokozunaSchemaR\ACKschema"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        schema__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "schema"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor RpbYokozunaSchema)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"schema")) ::
              Data.ProtoLens.FieldDescriptor RpbYokozunaSchemaPutReq
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, schema__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _RpbYokozunaSchemaPutReq'_unknownFields
        (\ x__ y__ -> x__ {_RpbYokozunaSchemaPutReq'_unknownFields = y__})
  defMessage
    = RpbYokozunaSchemaPutReq'_constructor
        {_RpbYokozunaSchemaPutReq'schema = Data.ProtoLens.defMessage,
         _RpbYokozunaSchemaPutReq'_unknownFields = []}
  parseMessage
    = let
        loop ::
          RpbYokozunaSchemaPutReq
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Bytes.Parser RpbYokozunaSchemaPutReq
        loop x required'schema
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing = (if required'schema then (:) "schema" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "schema"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"schema") y x)
                                  Prelude.False
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'schema
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True)
          "RpbYokozunaSchemaPutReq"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((Prelude..)
                   (\ bs
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   Data.ProtoLens.encodeMessage
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"schema") _x)))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData RpbYokozunaSchemaPutReq where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_RpbYokozunaSchemaPutReq'_unknownFields x__)
             (Control.DeepSeq.deepseq (_RpbYokozunaSchemaPutReq'schema x__) ())
{- | Fields :
     
         * 'Proto.Riak_Fields.adds' @:: Lens' SetOp [Data.ByteString.ByteString]@
         * 'Proto.Riak_Fields.vec'adds' @:: Lens' SetOp (Data.Vector.Vector Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.removes' @:: Lens' SetOp [Data.ByteString.ByteString]@
         * 'Proto.Riak_Fields.vec'removes' @:: Lens' SetOp (Data.Vector.Vector Data.ByteString.ByteString)@ -}
data SetOp
  = SetOp'_constructor {_SetOp'adds :: !(Data.Vector.Vector Data.ByteString.ByteString),
                        _SetOp'removes :: !(Data.Vector.Vector Data.ByteString.ByteString),
                        _SetOp'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show SetOp where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField SetOp "adds" [Data.ByteString.ByteString] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SetOp'adds (\ x__ y__ -> x__ {_SetOp'adds = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField SetOp "vec'adds" (Data.Vector.Vector Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SetOp'adds (\ x__ y__ -> x__ {_SetOp'adds = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField SetOp "removes" [Data.ByteString.ByteString] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SetOp'removes (\ x__ y__ -> x__ {_SetOp'removes = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField SetOp "vec'removes" (Data.Vector.Vector Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _SetOp'removes (\ x__ y__ -> x__ {_SetOp'removes = y__}))
        Prelude.id
instance Data.ProtoLens.Message SetOp where
  messageName _ = Data.Text.pack "SetOp"
  packedMessageDescriptor _
    = "\n\
      \\ENQSetOp\DC2\DC2\n\
      \\EOTadds\CAN\SOH \ETX(\fR\EOTadds\DC2\CAN\n\
      \\aremoves\CAN\STX \ETX(\fR\aremoves"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        adds__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "adds"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"adds")) ::
              Data.ProtoLens.FieldDescriptor SetOp
        removes__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "removes"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"removes")) ::
              Data.ProtoLens.FieldDescriptor SetOp
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, adds__field_descriptor),
           (Data.ProtoLens.Tag 2, removes__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _SetOp'_unknownFields
        (\ x__ y__ -> x__ {_SetOp'_unknownFields = y__})
  defMessage
    = SetOp'_constructor
        {_SetOp'adds = Data.Vector.Generic.empty,
         _SetOp'removes = Data.Vector.Generic.empty,
         _SetOp'_unknownFields = []}
  parseMessage
    = let
        loop ::
          SetOp
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld Data.ByteString.ByteString
             -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld Data.ByteString.ByteString
                -> Data.ProtoLens.Encoding.Bytes.Parser SetOp
        loop x mutable'adds mutable'removes
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'adds <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.unsafeFreeze mutable'adds)
                      frozen'removes <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                          (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                             mutable'removes)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields
                           (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'adds")
                              frozen'adds
                              (Lens.Family2.set
                                 (Data.ProtoLens.Field.field @"vec'removes") frozen'removes x)))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.getBytes
                                              (Prelude.fromIntegral len))
                                        "adds"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'adds y)
                                loop x v mutable'removes
                        18
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.getBytes
                                              (Prelude.fromIntegral len))
                                        "removes"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'removes y)
                                loop x mutable'adds v
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'adds
                                  mutable'removes
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'adds <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                Data.ProtoLens.Encoding.Growing.new
              mutable'removes <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                   Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage mutable'adds mutable'removes)
          "SetOp"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                (\ _v
                   -> (Data.Monoid.<>)
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                        ((\ bs
                            -> (Data.Monoid.<>)
                                 (Data.ProtoLens.Encoding.Bytes.putVarInt
                                    (Prelude.fromIntegral (Data.ByteString.length bs)))
                                 (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           _v))
                (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'adds") _x))
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                   (\ _v
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                           ((\ bs
                               -> (Data.Monoid.<>)
                                    (Data.ProtoLens.Encoding.Bytes.putVarInt
                                       (Prelude.fromIntegral (Data.ByteString.length bs)))
                                    (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                              _v))
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'removes") _x))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData SetOp where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_SetOp'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_SetOp'adds x__)
                (Control.DeepSeq.deepseq (_SetOp'removes x__) ()))
{- | Fields :
     
         * 'Proto.Riak_Fields.varcharValue' @:: Lens' TsCell Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'varcharValue' @:: Lens' TsCell (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.sint64Value' @:: Lens' TsCell Data.Int.Int64@
         * 'Proto.Riak_Fields.maybe'sint64Value' @:: Lens' TsCell (Prelude.Maybe Data.Int.Int64)@
         * 'Proto.Riak_Fields.timestampValue' @:: Lens' TsCell Data.Int.Int64@
         * 'Proto.Riak_Fields.maybe'timestampValue' @:: Lens' TsCell (Prelude.Maybe Data.Int.Int64)@
         * 'Proto.Riak_Fields.booleanValue' @:: Lens' TsCell Prelude.Bool@
         * 'Proto.Riak_Fields.maybe'booleanValue' @:: Lens' TsCell (Prelude.Maybe Prelude.Bool)@
         * 'Proto.Riak_Fields.doubleValue' @:: Lens' TsCell Prelude.Double@
         * 'Proto.Riak_Fields.maybe'doubleValue' @:: Lens' TsCell (Prelude.Maybe Prelude.Double)@ -}
data TsCell
  = TsCell'_constructor {_TsCell'varcharValue :: !(Prelude.Maybe Data.ByteString.ByteString),
                         _TsCell'sint64Value :: !(Prelude.Maybe Data.Int.Int64),
                         _TsCell'timestampValue :: !(Prelude.Maybe Data.Int.Int64),
                         _TsCell'booleanValue :: !(Prelude.Maybe Prelude.Bool),
                         _TsCell'doubleValue :: !(Prelude.Maybe Prelude.Double),
                         _TsCell'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show TsCell where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField TsCell "varcharValue" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsCell'varcharValue
           (\ x__ y__ -> x__ {_TsCell'varcharValue = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField TsCell "maybe'varcharValue" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsCell'varcharValue
           (\ x__ y__ -> x__ {_TsCell'varcharValue = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField TsCell "sint64Value" Data.Int.Int64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsCell'sint64Value (\ x__ y__ -> x__ {_TsCell'sint64Value = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField TsCell "maybe'sint64Value" (Prelude.Maybe Data.Int.Int64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsCell'sint64Value (\ x__ y__ -> x__ {_TsCell'sint64Value = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField TsCell "timestampValue" Data.Int.Int64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsCell'timestampValue
           (\ x__ y__ -> x__ {_TsCell'timestampValue = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField TsCell "maybe'timestampValue" (Prelude.Maybe Data.Int.Int64) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsCell'timestampValue
           (\ x__ y__ -> x__ {_TsCell'timestampValue = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField TsCell "booleanValue" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsCell'booleanValue
           (\ x__ y__ -> x__ {_TsCell'booleanValue = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField TsCell "maybe'booleanValue" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsCell'booleanValue
           (\ x__ y__ -> x__ {_TsCell'booleanValue = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField TsCell "doubleValue" Prelude.Double where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsCell'doubleValue (\ x__ y__ -> x__ {_TsCell'doubleValue = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField TsCell "maybe'doubleValue" (Prelude.Maybe Prelude.Double) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsCell'doubleValue (\ x__ y__ -> x__ {_TsCell'doubleValue = y__}))
        Prelude.id
instance Data.ProtoLens.Message TsCell where
  messageName _ = Data.Text.pack "TsCell"
  packedMessageDescriptor _
    = "\n\
      \\ACKTsCell\DC2#\n\
      \\rvarchar_value\CAN\SOH \SOH(\fR\fvarcharValue\DC2!\n\
      \\fsint64_value\CAN\STX \SOH(\DC2R\vsint64Value\DC2'\n\
      \\SItimestamp_value\CAN\ETX \SOH(\DC2R\SOtimestampValue\DC2#\n\
      \\rboolean_value\CAN\EOT \SOH(\bR\fbooleanValue\DC2!\n\
      \\fdouble_value\CAN\ENQ \SOH(\SOHR\vdoubleValue"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        varcharValue__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "varchar_value"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'varcharValue")) ::
              Data.ProtoLens.FieldDescriptor TsCell
        sint64Value__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "sint64_value"
              (Data.ProtoLens.ScalarField Data.ProtoLens.SInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'sint64Value")) ::
              Data.ProtoLens.FieldDescriptor TsCell
        timestampValue__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "timestamp_value"
              (Data.ProtoLens.ScalarField Data.ProtoLens.SInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'timestampValue")) ::
              Data.ProtoLens.FieldDescriptor TsCell
        booleanValue__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "boolean_value"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'booleanValue")) ::
              Data.ProtoLens.FieldDescriptor TsCell
        doubleValue__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "double_value"
              (Data.ProtoLens.ScalarField Data.ProtoLens.DoubleField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Double)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'doubleValue")) ::
              Data.ProtoLens.FieldDescriptor TsCell
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, varcharValue__field_descriptor),
           (Data.ProtoLens.Tag 2, sint64Value__field_descriptor),
           (Data.ProtoLens.Tag 3, timestampValue__field_descriptor),
           (Data.ProtoLens.Tag 4, booleanValue__field_descriptor),
           (Data.ProtoLens.Tag 5, doubleValue__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _TsCell'_unknownFields
        (\ x__ y__ -> x__ {_TsCell'_unknownFields = y__})
  defMessage
    = TsCell'_constructor
        {_TsCell'varcharValue = Prelude.Nothing,
         _TsCell'sint64Value = Prelude.Nothing,
         _TsCell'timestampValue = Prelude.Nothing,
         _TsCell'booleanValue = Prelude.Nothing,
         _TsCell'doubleValue = Prelude.Nothing, _TsCell'_unknownFields = []}
  parseMessage
    = let
        loop :: TsCell -> Data.ProtoLens.Encoding.Bytes.Parser TsCell
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "varchar_value"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"varcharValue") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Data.ProtoLens.Encoding.Bytes.wordToSignedInt64
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "sint64_value"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"sint64Value") y x)
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Data.ProtoLens.Encoding.Bytes.wordToSignedInt64
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "timestamp_value"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"timestampValue") y x)
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "boolean_value"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"booleanValue") y x)
                        41
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Data.ProtoLens.Encoding.Bytes.wordToDouble
                                          Data.ProtoLens.Encoding.Bytes.getFixed64)
                                       "double_value"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"doubleValue") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "TsCell"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view
                    (Data.ProtoLens.Field.field @"maybe'varcharValue") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((\ bs
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt
                                   (Prelude.fromIntegral (Data.ByteString.length bs)))
                                (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view
                       (Data.ProtoLens.Field.field @"maybe'sint64Value") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          ((Prelude..)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                             Data.ProtoLens.Encoding.Bytes.signedInt64ToWord
                             _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'timestampValue") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                                Data.ProtoLens.Encoding.Bytes.signedInt64ToWord
                                _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view
                             (Data.ProtoLens.Field.field @"maybe'booleanValue") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt
                                   (\ b -> if b then 1 else 0)
                                   _v))
                      ((Data.Monoid.<>)
                         (case
                              Lens.Family2.view
                                (Data.ProtoLens.Field.field @"maybe'doubleValue") _x
                          of
                            Prelude.Nothing -> Data.Monoid.mempty
                            (Prelude.Just _v)
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt 41)
                                   ((Prelude..)
                                      Data.ProtoLens.Encoding.Bytes.putFixed64
                                      Data.ProtoLens.Encoding.Bytes.doubleToWord
                                      _v))
                         (Data.ProtoLens.Encoding.Wire.buildFieldSet
                            (Lens.Family2.view Data.ProtoLens.unknownFields _x))))))
instance Control.DeepSeq.NFData TsCell where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_TsCell'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_TsCell'varcharValue x__)
                (Control.DeepSeq.deepseq
                   (_TsCell'sint64Value x__)
                   (Control.DeepSeq.deepseq
                      (_TsCell'timestampValue x__)
                      (Control.DeepSeq.deepseq
                         (_TsCell'booleanValue x__)
                         (Control.DeepSeq.deepseq (_TsCell'doubleValue x__) ())))))
{- | Fields :
     
         * 'Proto.Riak_Fields.name' @:: Lens' TsColumnDescription Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.type'' @:: Lens' TsColumnDescription TsColumnType@ -}
data TsColumnDescription
  = TsColumnDescription'_constructor {_TsColumnDescription'name :: !Data.ByteString.ByteString,
                                      _TsColumnDescription'type' :: !TsColumnType,
                                      _TsColumnDescription'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show TsColumnDescription where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField TsColumnDescription "name" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsColumnDescription'name
           (\ x__ y__ -> x__ {_TsColumnDescription'name = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField TsColumnDescription "type'" TsColumnType where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsColumnDescription'type'
           (\ x__ y__ -> x__ {_TsColumnDescription'type' = y__}))
        Prelude.id
instance Data.ProtoLens.Message TsColumnDescription where
  messageName _ = Data.Text.pack "TsColumnDescription"
  packedMessageDescriptor _
    = "\n\
      \\DC3TsColumnDescription\DC2\DC2\n\
      \\EOTname\CAN\SOH \STX(\fR\EOTname\DC2!\n\
      \\EOTtype\CAN\STX \STX(\SO2\r.TsColumnTypeR\EOTtype"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        name__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "name"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"name")) ::
              Data.ProtoLens.FieldDescriptor TsColumnDescription
        type'__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "type"
              (Data.ProtoLens.ScalarField Data.ProtoLens.EnumField ::
                 Data.ProtoLens.FieldTypeDescriptor TsColumnType)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"type'")) ::
              Data.ProtoLens.FieldDescriptor TsColumnDescription
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, name__field_descriptor),
           (Data.ProtoLens.Tag 2, type'__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _TsColumnDescription'_unknownFields
        (\ x__ y__ -> x__ {_TsColumnDescription'_unknownFields = y__})
  defMessage
    = TsColumnDescription'_constructor
        {_TsColumnDescription'name = Data.ProtoLens.fieldDefault,
         _TsColumnDescription'type' = Data.ProtoLens.fieldDefault,
         _TsColumnDescription'_unknownFields = []}
  parseMessage
    = let
        loop ::
          TsColumnDescription
          -> Prelude.Bool
             -> Prelude.Bool
                -> Data.ProtoLens.Encoding.Bytes.Parser TsColumnDescription
        loop x required'name required'type'
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'name then (:) "name" else Prelude.id)
                               ((if required'type' then (:) "type" else Prelude.id) [])
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "name"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"name") y x)
                                  Prelude.False
                                  required'type'
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.toEnum
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "type"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"type'") y x)
                                  required'name
                                  Prelude.False
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'name
                                  required'type'
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True Prelude.True)
          "TsColumnDescription"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((\ bs
                    -> (Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"name") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                   ((Prelude..)
                      ((Prelude..)
                         Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                      Prelude.fromEnum
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"type'") _x)))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData TsColumnDescription where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_TsColumnDescription'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_TsColumnDescription'name x__)
                (Control.DeepSeq.deepseq (_TsColumnDescription'type' x__) ()))
data TsColumnType
  = VARCHAR | SINT64 | DOUBLE | TIMESTAMP | BOOLEAN | BLOB
  deriving stock (Prelude.Show, Prelude.Eq, Prelude.Ord)
instance Data.ProtoLens.MessageEnum TsColumnType where
  maybeToEnum 0 = Prelude.Just VARCHAR
  maybeToEnum 1 = Prelude.Just SINT64
  maybeToEnum 2 = Prelude.Just DOUBLE
  maybeToEnum 3 = Prelude.Just TIMESTAMP
  maybeToEnum 4 = Prelude.Just BOOLEAN
  maybeToEnum 5 = Prelude.Just BLOB
  maybeToEnum _ = Prelude.Nothing
  showEnum VARCHAR = "VARCHAR"
  showEnum SINT64 = "SINT64"
  showEnum DOUBLE = "DOUBLE"
  showEnum TIMESTAMP = "TIMESTAMP"
  showEnum BOOLEAN = "BOOLEAN"
  showEnum BLOB = "BLOB"
  readEnum k
    | (Prelude.==) k "VARCHAR" = Prelude.Just VARCHAR
    | (Prelude.==) k "SINT64" = Prelude.Just SINT64
    | (Prelude.==) k "DOUBLE" = Prelude.Just DOUBLE
    | (Prelude.==) k "TIMESTAMP" = Prelude.Just TIMESTAMP
    | (Prelude.==) k "BOOLEAN" = Prelude.Just BOOLEAN
    | (Prelude.==) k "BLOB" = Prelude.Just BLOB
    | Prelude.otherwise
    = (Prelude.>>=) (Text.Read.readMaybe k) Data.ProtoLens.maybeToEnum
instance Prelude.Bounded TsColumnType where
  minBound = VARCHAR
  maxBound = BLOB
instance Prelude.Enum TsColumnType where
  toEnum k__
    = Prelude.maybe
        (Prelude.error
           ((Prelude.++)
              "toEnum: unknown value for enum TsColumnType: "
              (Prelude.show k__)))
        Prelude.id
        (Data.ProtoLens.maybeToEnum k__)
  fromEnum VARCHAR = 0
  fromEnum SINT64 = 1
  fromEnum DOUBLE = 2
  fromEnum TIMESTAMP = 3
  fromEnum BOOLEAN = 4
  fromEnum BLOB = 5
  succ BLOB
    = Prelude.error
        "TsColumnType.succ: bad argument BLOB. This value would be out of bounds."
  succ VARCHAR = SINT64
  succ SINT64 = DOUBLE
  succ DOUBLE = TIMESTAMP
  succ TIMESTAMP = BOOLEAN
  succ BOOLEAN = BLOB
  pred VARCHAR
    = Prelude.error
        "TsColumnType.pred: bad argument VARCHAR. This value would be out of bounds."
  pred SINT64 = VARCHAR
  pred DOUBLE = SINT64
  pred TIMESTAMP = DOUBLE
  pred BOOLEAN = TIMESTAMP
  pred BLOB = BOOLEAN
  enumFrom = Data.ProtoLens.Message.Enum.messageEnumFrom
  enumFromTo = Data.ProtoLens.Message.Enum.messageEnumFromTo
  enumFromThen = Data.ProtoLens.Message.Enum.messageEnumFromThen
  enumFromThenTo = Data.ProtoLens.Message.Enum.messageEnumFromThenTo
instance Data.ProtoLens.FieldDefault TsColumnType where
  fieldDefault = VARCHAR
instance Control.DeepSeq.NFData TsColumnType where
  rnf x__ = Prelude.seq x__ ()
{- | Fields :
     
         * 'Proto.Riak_Fields.ip' @:: Lens' TsCoverageEntry Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.port' @:: Lens' TsCoverageEntry Data.Word.Word32@
         * 'Proto.Riak_Fields.coverContext' @:: Lens' TsCoverageEntry Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.range' @:: Lens' TsCoverageEntry TsRange@
         * 'Proto.Riak_Fields.maybe'range' @:: Lens' TsCoverageEntry (Prelude.Maybe TsRange)@ -}
data TsCoverageEntry
  = TsCoverageEntry'_constructor {_TsCoverageEntry'ip :: !Data.ByteString.ByteString,
                                  _TsCoverageEntry'port :: !Data.Word.Word32,
                                  _TsCoverageEntry'coverContext :: !Data.ByteString.ByteString,
                                  _TsCoverageEntry'range :: !(Prelude.Maybe TsRange),
                                  _TsCoverageEntry'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show TsCoverageEntry where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField TsCoverageEntry "ip" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsCoverageEntry'ip (\ x__ y__ -> x__ {_TsCoverageEntry'ip = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField TsCoverageEntry "port" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsCoverageEntry'port
           (\ x__ y__ -> x__ {_TsCoverageEntry'port = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField TsCoverageEntry "coverContext" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsCoverageEntry'coverContext
           (\ x__ y__ -> x__ {_TsCoverageEntry'coverContext = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField TsCoverageEntry "range" TsRange where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsCoverageEntry'range
           (\ x__ y__ -> x__ {_TsCoverageEntry'range = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField TsCoverageEntry "maybe'range" (Prelude.Maybe TsRange) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsCoverageEntry'range
           (\ x__ y__ -> x__ {_TsCoverageEntry'range = y__}))
        Prelude.id
instance Data.ProtoLens.Message TsCoverageEntry where
  messageName _ = Data.Text.pack "TsCoverageEntry"
  packedMessageDescriptor _
    = "\n\
      \\SITsCoverageEntry\DC2\SO\n\
      \\STXip\CAN\SOH \STX(\fR\STXip\DC2\DC2\n\
      \\EOTport\CAN\STX \STX(\rR\EOTport\DC2#\n\
      \\rcover_context\CAN\ETX \STX(\fR\fcoverContext\DC2\RS\n\
      \\ENQrange\CAN\EOT \SOH(\v2\b.TsRangeR\ENQrange"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        ip__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "ip"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"ip")) ::
              Data.ProtoLens.FieldDescriptor TsCoverageEntry
        port__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "port"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"port")) ::
              Data.ProtoLens.FieldDescriptor TsCoverageEntry
        coverContext__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "cover_context"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"coverContext")) ::
              Data.ProtoLens.FieldDescriptor TsCoverageEntry
        range__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "range"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor TsRange)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'range")) ::
              Data.ProtoLens.FieldDescriptor TsCoverageEntry
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, ip__field_descriptor),
           (Data.ProtoLens.Tag 2, port__field_descriptor),
           (Data.ProtoLens.Tag 3, coverContext__field_descriptor),
           (Data.ProtoLens.Tag 4, range__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _TsCoverageEntry'_unknownFields
        (\ x__ y__ -> x__ {_TsCoverageEntry'_unknownFields = y__})
  defMessage
    = TsCoverageEntry'_constructor
        {_TsCoverageEntry'ip = Data.ProtoLens.fieldDefault,
         _TsCoverageEntry'port = Data.ProtoLens.fieldDefault,
         _TsCoverageEntry'coverContext = Data.ProtoLens.fieldDefault,
         _TsCoverageEntry'range = Prelude.Nothing,
         _TsCoverageEntry'_unknownFields = []}
  parseMessage
    = let
        loop ::
          TsCoverageEntry
          -> Prelude.Bool
             -> Prelude.Bool
                -> Prelude.Bool
                   -> Data.ProtoLens.Encoding.Bytes.Parser TsCoverageEntry
        loop x required'coverContext required'ip required'port
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'coverContext then
                                  (:) "cover_context"
                              else
                                  Prelude.id)
                               ((if required'ip then (:) "ip" else Prelude.id)
                                  ((if required'port then (:) "port" else Prelude.id) []))
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "ip"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"ip") y x)
                                  required'coverContext
                                  Prelude.False
                                  required'port
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "port"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"port") y x)
                                  required'coverContext
                                  required'ip
                                  Prelude.False
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "cover_context"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"coverContext") y x)
                                  Prelude.False
                                  required'ip
                                  required'port
                        34
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "range"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"range") y x)
                                  required'coverContext
                                  required'ip
                                  required'port
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'coverContext
                                  required'ip
                                  required'port
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop
                Data.ProtoLens.defMessage Prelude.True Prelude.True Prelude.True)
          "TsCoverageEntry"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((\ bs
                    -> (Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"ip") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                   ((Prelude..)
                      Data.ProtoLens.Encoding.Bytes.putVarInt
                      Prelude.fromIntegral
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"port") _x)))
                ((Data.Monoid.<>)
                   ((Data.Monoid.<>)
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                      ((\ bs
                          -> (Data.Monoid.<>)
                               (Data.ProtoLens.Encoding.Bytes.putVarInt
                                  (Prelude.fromIntegral (Data.ByteString.length bs)))
                               (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                         (Lens.Family2.view
                            (Data.ProtoLens.Field.field @"coverContext") _x)))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'range") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                                ((Prelude..)
                                   (\ bs
                                      -> (Data.Monoid.<>)
                                           (Data.ProtoLens.Encoding.Bytes.putVarInt
                                              (Prelude.fromIntegral (Data.ByteString.length bs)))
                                           (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                   Data.ProtoLens.encodeMessage
                                   _v))
                      (Data.ProtoLens.Encoding.Wire.buildFieldSet
                         (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))
instance Control.DeepSeq.NFData TsCoverageEntry where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_TsCoverageEntry'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_TsCoverageEntry'ip x__)
                (Control.DeepSeq.deepseq
                   (_TsCoverageEntry'port x__)
                   (Control.DeepSeq.deepseq
                      (_TsCoverageEntry'coverContext x__)
                      (Control.DeepSeq.deepseq (_TsCoverageEntry'range x__) ()))))
{- | Fields :
     
         * 'Proto.Riak_Fields.query' @:: Lens' TsCoverageReq TsInterpolation@
         * 'Proto.Riak_Fields.maybe'query' @:: Lens' TsCoverageReq (Prelude.Maybe TsInterpolation)@
         * 'Proto.Riak_Fields.table' @:: Lens' TsCoverageReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.replaceCover' @:: Lens' TsCoverageReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'replaceCover' @:: Lens' TsCoverageReq (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.unavailableCover' @:: Lens' TsCoverageReq [Data.ByteString.ByteString]@
         * 'Proto.Riak_Fields.vec'unavailableCover' @:: Lens' TsCoverageReq (Data.Vector.Vector Data.ByteString.ByteString)@ -}
data TsCoverageReq
  = TsCoverageReq'_constructor {_TsCoverageReq'query :: !(Prelude.Maybe TsInterpolation),
                                _TsCoverageReq'table :: !Data.ByteString.ByteString,
                                _TsCoverageReq'replaceCover :: !(Prelude.Maybe Data.ByteString.ByteString),
                                _TsCoverageReq'unavailableCover :: !(Data.Vector.Vector Data.ByteString.ByteString),
                                _TsCoverageReq'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show TsCoverageReq where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField TsCoverageReq "query" TsInterpolation where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsCoverageReq'query
           (\ x__ y__ -> x__ {_TsCoverageReq'query = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField TsCoverageReq "maybe'query" (Prelude.Maybe TsInterpolation) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsCoverageReq'query
           (\ x__ y__ -> x__ {_TsCoverageReq'query = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField TsCoverageReq "table" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsCoverageReq'table
           (\ x__ y__ -> x__ {_TsCoverageReq'table = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField TsCoverageReq "replaceCover" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsCoverageReq'replaceCover
           (\ x__ y__ -> x__ {_TsCoverageReq'replaceCover = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField TsCoverageReq "maybe'replaceCover" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsCoverageReq'replaceCover
           (\ x__ y__ -> x__ {_TsCoverageReq'replaceCover = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField TsCoverageReq "unavailableCover" [Data.ByteString.ByteString] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsCoverageReq'unavailableCover
           (\ x__ y__ -> x__ {_TsCoverageReq'unavailableCover = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField TsCoverageReq "vec'unavailableCover" (Data.Vector.Vector Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsCoverageReq'unavailableCover
           (\ x__ y__ -> x__ {_TsCoverageReq'unavailableCover = y__}))
        Prelude.id
instance Data.ProtoLens.Message TsCoverageReq where
  messageName _ = Data.Text.pack "TsCoverageReq"
  packedMessageDescriptor _
    = "\n\
      \\rTsCoverageReq\DC2&\n\
      \\ENQquery\CAN\SOH \SOH(\v2\DLE.TsInterpolationR\ENQquery\DC2\DC4\n\
      \\ENQtable\CAN\STX \STX(\fR\ENQtable\DC2#\n\
      \\rreplace_cover\CAN\ETX \SOH(\fR\freplaceCover\DC2+\n\
      \\DC1unavailable_cover\CAN\EOT \ETX(\fR\DLEunavailableCover"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        query__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "query"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor TsInterpolation)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'query")) ::
              Data.ProtoLens.FieldDescriptor TsCoverageReq
        table__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "table"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"table")) ::
              Data.ProtoLens.FieldDescriptor TsCoverageReq
        replaceCover__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "replace_cover"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'replaceCover")) ::
              Data.ProtoLens.FieldDescriptor TsCoverageReq
        unavailableCover__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "unavailable_cover"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"unavailableCover")) ::
              Data.ProtoLens.FieldDescriptor TsCoverageReq
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, query__field_descriptor),
           (Data.ProtoLens.Tag 2, table__field_descriptor),
           (Data.ProtoLens.Tag 3, replaceCover__field_descriptor),
           (Data.ProtoLens.Tag 4, unavailableCover__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _TsCoverageReq'_unknownFields
        (\ x__ y__ -> x__ {_TsCoverageReq'_unknownFields = y__})
  defMessage
    = TsCoverageReq'_constructor
        {_TsCoverageReq'query = Prelude.Nothing,
         _TsCoverageReq'table = Data.ProtoLens.fieldDefault,
         _TsCoverageReq'replaceCover = Prelude.Nothing,
         _TsCoverageReq'unavailableCover = Data.Vector.Generic.empty,
         _TsCoverageReq'_unknownFields = []}
  parseMessage
    = let
        loop ::
          TsCoverageReq
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld Data.ByteString.ByteString
                -> Data.ProtoLens.Encoding.Bytes.Parser TsCoverageReq
        loop x required'table mutable'unavailableCover
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'unavailableCover <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                   (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                      mutable'unavailableCover)
                      (let
                         missing = (if required'table then (:) "table" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields
                           (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'unavailableCover")
                              frozen'unavailableCover
                              x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "query"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"query") y x)
                                  required'table
                                  mutable'unavailableCover
                        18
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "table"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"table") y x)
                                  Prelude.False
                                  mutable'unavailableCover
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "replace_cover"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"replaceCover") y x)
                                  required'table
                                  mutable'unavailableCover
                        34
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.getBytes
                                              (Prelude.fromIntegral len))
                                        "unavailable_cover"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append
                                          mutable'unavailableCover y)
                                loop x required'table v
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'table
                                  mutable'unavailableCover
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'unavailableCover <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                            Data.ProtoLens.Encoding.Growing.new
              loop
                Data.ProtoLens.defMessage Prelude.True mutable'unavailableCover)
          "TsCoverageReq"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'query") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.ProtoLens.encodeMessage
                          _v))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                   ((\ bs
                       -> (Data.Monoid.<>)
                            (Data.ProtoLens.Encoding.Bytes.putVarInt
                               (Prelude.fromIntegral (Data.ByteString.length bs)))
                            (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"table") _x)))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'replaceCover") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                             ((\ bs
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                         (Prelude.fromIntegral (Data.ByteString.length bs)))
                                      (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                _v))
                   ((Data.Monoid.<>)
                      (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                         (\ _v
                            -> (Data.Monoid.<>)
                                 (Data.ProtoLens.Encoding.Bytes.putVarInt 34)
                                 ((\ bs
                                     -> (Data.Monoid.<>)
                                          (Data.ProtoLens.Encoding.Bytes.putVarInt
                                             (Prelude.fromIntegral (Data.ByteString.length bs)))
                                          (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                    _v))
                         (Lens.Family2.view
                            (Data.ProtoLens.Field.field @"vec'unavailableCover") _x))
                      (Data.ProtoLens.Encoding.Wire.buildFieldSet
                         (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))
instance Control.DeepSeq.NFData TsCoverageReq where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_TsCoverageReq'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_TsCoverageReq'query x__)
                (Control.DeepSeq.deepseq
                   (_TsCoverageReq'table x__)
                   (Control.DeepSeq.deepseq
                      (_TsCoverageReq'replaceCover x__)
                      (Control.DeepSeq.deepseq
                         (_TsCoverageReq'unavailableCover x__) ()))))
{- | Fields :
     
         * 'Proto.Riak_Fields.entries' @:: Lens' TsCoverageResp [TsCoverageEntry]@
         * 'Proto.Riak_Fields.vec'entries' @:: Lens' TsCoverageResp (Data.Vector.Vector TsCoverageEntry)@ -}
data TsCoverageResp
  = TsCoverageResp'_constructor {_TsCoverageResp'entries :: !(Data.Vector.Vector TsCoverageEntry),
                                 _TsCoverageResp'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show TsCoverageResp where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField TsCoverageResp "entries" [TsCoverageEntry] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsCoverageResp'entries
           (\ x__ y__ -> x__ {_TsCoverageResp'entries = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField TsCoverageResp "vec'entries" (Data.Vector.Vector TsCoverageEntry) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsCoverageResp'entries
           (\ x__ y__ -> x__ {_TsCoverageResp'entries = y__}))
        Prelude.id
instance Data.ProtoLens.Message TsCoverageResp where
  messageName _ = Data.Text.pack "TsCoverageResp"
  packedMessageDescriptor _
    = "\n\
      \\SOTsCoverageResp\DC2*\n\
      \\aentries\CAN\SOH \ETX(\v2\DLE.TsCoverageEntryR\aentries"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        entries__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "entries"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor TsCoverageEntry)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"entries")) ::
              Data.ProtoLens.FieldDescriptor TsCoverageResp
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, entries__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _TsCoverageResp'_unknownFields
        (\ x__ y__ -> x__ {_TsCoverageResp'_unknownFields = y__})
  defMessage
    = TsCoverageResp'_constructor
        {_TsCoverageResp'entries = Data.Vector.Generic.empty,
         _TsCoverageResp'_unknownFields = []}
  parseMessage
    = let
        loop ::
          TsCoverageResp
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld TsCoverageEntry
             -> Data.ProtoLens.Encoding.Bytes.Parser TsCoverageResp
        loop x mutable'entries
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'entries <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                          (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                             mutable'entries)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields
                           (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'entries") frozen'entries x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "entries"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'entries y)
                                loop x v
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'entries
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'entries <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                   Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage mutable'entries)
          "TsCoverageResp"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                (\ _v
                   -> (Data.Monoid.<>)
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                        ((Prelude..)
                           (\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Data.ProtoLens.encodeMessage
                           _v))
                (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'entries") _x))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData TsCoverageResp where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_TsCoverageResp'_unknownFields x__)
             (Control.DeepSeq.deepseq (_TsCoverageResp'entries x__) ())
{- | Fields :
     
         * 'Proto.Riak_Fields.table' @:: Lens' TsDelReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.key' @:: Lens' TsDelReq [TsCell]@
         * 'Proto.Riak_Fields.vec'key' @:: Lens' TsDelReq (Data.Vector.Vector TsCell)@
         * 'Proto.Riak_Fields.vclock' @:: Lens' TsDelReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'vclock' @:: Lens' TsDelReq (Prelude.Maybe Data.ByteString.ByteString)@
         * 'Proto.Riak_Fields.timeout' @:: Lens' TsDelReq Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'timeout' @:: Lens' TsDelReq (Prelude.Maybe Data.Word.Word32)@ -}
data TsDelReq
  = TsDelReq'_constructor {_TsDelReq'table :: !Data.ByteString.ByteString,
                           _TsDelReq'key :: !(Data.Vector.Vector TsCell),
                           _TsDelReq'vclock :: !(Prelude.Maybe Data.ByteString.ByteString),
                           _TsDelReq'timeout :: !(Prelude.Maybe Data.Word.Word32),
                           _TsDelReq'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show TsDelReq where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField TsDelReq "table" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsDelReq'table (\ x__ y__ -> x__ {_TsDelReq'table = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField TsDelReq "key" [TsCell] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsDelReq'key (\ x__ y__ -> x__ {_TsDelReq'key = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField TsDelReq "vec'key" (Data.Vector.Vector TsCell) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsDelReq'key (\ x__ y__ -> x__ {_TsDelReq'key = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField TsDelReq "vclock" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsDelReq'vclock (\ x__ y__ -> x__ {_TsDelReq'vclock = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField TsDelReq "maybe'vclock" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsDelReq'vclock (\ x__ y__ -> x__ {_TsDelReq'vclock = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField TsDelReq "timeout" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsDelReq'timeout (\ x__ y__ -> x__ {_TsDelReq'timeout = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField TsDelReq "maybe'timeout" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsDelReq'timeout (\ x__ y__ -> x__ {_TsDelReq'timeout = y__}))
        Prelude.id
instance Data.ProtoLens.Message TsDelReq where
  messageName _ = Data.Text.pack "TsDelReq"
  packedMessageDescriptor _
    = "\n\
      \\bTsDelReq\DC2\DC4\n\
      \\ENQtable\CAN\SOH \STX(\fR\ENQtable\DC2\EM\n\
      \\ETXkey\CAN\STX \ETX(\v2\a.TsCellR\ETXkey\DC2\SYN\n\
      \\ACKvclock\CAN\ETX \SOH(\fR\ACKvclock\DC2\CAN\n\
      \\atimeout\CAN\EOT \SOH(\rR\atimeout"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        table__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "table"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"table")) ::
              Data.ProtoLens.FieldDescriptor TsDelReq
        key__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "key"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor TsCell)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"key")) ::
              Data.ProtoLens.FieldDescriptor TsDelReq
        vclock__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "vclock"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'vclock")) ::
              Data.ProtoLens.FieldDescriptor TsDelReq
        timeout__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "timeout"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'timeout")) ::
              Data.ProtoLens.FieldDescriptor TsDelReq
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, table__field_descriptor),
           (Data.ProtoLens.Tag 2, key__field_descriptor),
           (Data.ProtoLens.Tag 3, vclock__field_descriptor),
           (Data.ProtoLens.Tag 4, timeout__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _TsDelReq'_unknownFields
        (\ x__ y__ -> x__ {_TsDelReq'_unknownFields = y__})
  defMessage
    = TsDelReq'_constructor
        {_TsDelReq'table = Data.ProtoLens.fieldDefault,
         _TsDelReq'key = Data.Vector.Generic.empty,
         _TsDelReq'vclock = Prelude.Nothing,
         _TsDelReq'timeout = Prelude.Nothing, _TsDelReq'_unknownFields = []}
  parseMessage
    = let
        loop ::
          TsDelReq
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld TsCell
                -> Data.ProtoLens.Encoding.Bytes.Parser TsDelReq
        loop x required'table mutable'key
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'key <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                      (Data.ProtoLens.Encoding.Growing.unsafeFreeze mutable'key)
                      (let
                         missing = (if required'table then (:) "table" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields
                           (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'key") frozen'key x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "table"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"table") y x)
                                  Prelude.False
                                  mutable'key
                        18
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "key"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'key y)
                                loop x required'table v
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "vclock"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"vclock") y x)
                                  required'table
                                  mutable'key
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "timeout"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"timeout") y x)
                                  required'table
                                  mutable'key
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'table
                                  mutable'key
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'key <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                               Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage Prelude.True mutable'key)
          "TsDelReq"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((\ bs
                    -> (Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"table") _x)))
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                   (\ _v
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                           ((Prelude..)
                              (\ bs
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                         (Prelude.fromIntegral (Data.ByteString.length bs)))
                                      (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                              Data.ProtoLens.encodeMessage
                              _v))
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'key") _x))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'vclock") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                             ((\ bs
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                         (Prelude.fromIntegral (Data.ByteString.length bs)))
                                      (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                _v))
                   ((Data.Monoid.<>)
                      (case
                           Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'timeout") _x
                       of
                         Prelude.Nothing -> Data.Monoid.mempty
                         (Prelude.Just _v)
                           -> (Data.Monoid.<>)
                                (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                                ((Prelude..)
                                   Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                      (Data.ProtoLens.Encoding.Wire.buildFieldSet
                         (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))
instance Control.DeepSeq.NFData TsDelReq where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_TsDelReq'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_TsDelReq'table x__)
                (Control.DeepSeq.deepseq
                   (_TsDelReq'key x__)
                   (Control.DeepSeq.deepseq
                      (_TsDelReq'vclock x__)
                      (Control.DeepSeq.deepseq (_TsDelReq'timeout x__) ()))))
{- | Fields :
      -}
data TsDelResp
  = TsDelResp'_constructor {_TsDelResp'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show TsDelResp where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message TsDelResp where
  messageName _ = Data.Text.pack "TsDelResp"
  packedMessageDescriptor _
    = "\n\
      \\tTsDelResp"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag = let in Data.Map.fromList []
  unknownFields
    = Lens.Family2.Unchecked.lens
        _TsDelResp'_unknownFields
        (\ x__ y__ -> x__ {_TsDelResp'_unknownFields = y__})
  defMessage
    = TsDelResp'_constructor {_TsDelResp'_unknownFields = []}
  parseMessage
    = let
        loop :: TsDelResp -> Data.ProtoLens.Encoding.Bytes.Parser TsDelResp
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of {
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x) }
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "TsDelResp"
  buildMessage
    = \ _x
        -> Data.ProtoLens.Encoding.Wire.buildFieldSet
             (Lens.Family2.view Data.ProtoLens.unknownFields _x)
instance Control.DeepSeq.NFData TsDelResp where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq (_TsDelResp'_unknownFields x__) ()
{- | Fields :
     
         * 'Proto.Riak_Fields.table' @:: Lens' TsGetReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.key' @:: Lens' TsGetReq [TsCell]@
         * 'Proto.Riak_Fields.vec'key' @:: Lens' TsGetReq (Data.Vector.Vector TsCell)@
         * 'Proto.Riak_Fields.timeout' @:: Lens' TsGetReq Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'timeout' @:: Lens' TsGetReq (Prelude.Maybe Data.Word.Word32)@ -}
data TsGetReq
  = TsGetReq'_constructor {_TsGetReq'table :: !Data.ByteString.ByteString,
                           _TsGetReq'key :: !(Data.Vector.Vector TsCell),
                           _TsGetReq'timeout :: !(Prelude.Maybe Data.Word.Word32),
                           _TsGetReq'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show TsGetReq where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField TsGetReq "table" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsGetReq'table (\ x__ y__ -> x__ {_TsGetReq'table = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField TsGetReq "key" [TsCell] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsGetReq'key (\ x__ y__ -> x__ {_TsGetReq'key = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField TsGetReq "vec'key" (Data.Vector.Vector TsCell) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsGetReq'key (\ x__ y__ -> x__ {_TsGetReq'key = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField TsGetReq "timeout" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsGetReq'timeout (\ x__ y__ -> x__ {_TsGetReq'timeout = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField TsGetReq "maybe'timeout" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsGetReq'timeout (\ x__ y__ -> x__ {_TsGetReq'timeout = y__}))
        Prelude.id
instance Data.ProtoLens.Message TsGetReq where
  messageName _ = Data.Text.pack "TsGetReq"
  packedMessageDescriptor _
    = "\n\
      \\bTsGetReq\DC2\DC4\n\
      \\ENQtable\CAN\SOH \STX(\fR\ENQtable\DC2\EM\n\
      \\ETXkey\CAN\STX \ETX(\v2\a.TsCellR\ETXkey\DC2\CAN\n\
      \\atimeout\CAN\ETX \SOH(\rR\atimeout"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        table__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "table"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"table")) ::
              Data.ProtoLens.FieldDescriptor TsGetReq
        key__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "key"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor TsCell)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"key")) ::
              Data.ProtoLens.FieldDescriptor TsGetReq
        timeout__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "timeout"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'timeout")) ::
              Data.ProtoLens.FieldDescriptor TsGetReq
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, table__field_descriptor),
           (Data.ProtoLens.Tag 2, key__field_descriptor),
           (Data.ProtoLens.Tag 3, timeout__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _TsGetReq'_unknownFields
        (\ x__ y__ -> x__ {_TsGetReq'_unknownFields = y__})
  defMessage
    = TsGetReq'_constructor
        {_TsGetReq'table = Data.ProtoLens.fieldDefault,
         _TsGetReq'key = Data.Vector.Generic.empty,
         _TsGetReq'timeout = Prelude.Nothing, _TsGetReq'_unknownFields = []}
  parseMessage
    = let
        loop ::
          TsGetReq
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld TsCell
                -> Data.ProtoLens.Encoding.Bytes.Parser TsGetReq
        loop x required'table mutable'key
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'key <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                      (Data.ProtoLens.Encoding.Growing.unsafeFreeze mutable'key)
                      (let
                         missing = (if required'table then (:) "table" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields
                           (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'key") frozen'key x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "table"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"table") y x)
                                  Prelude.False
                                  mutable'key
                        18
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "key"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'key y)
                                loop x required'table v
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "timeout"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"timeout") y x)
                                  required'table
                                  mutable'key
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'table
                                  mutable'key
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'key <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                               Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage Prelude.True mutable'key)
          "TsGetReq"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((\ bs
                    -> (Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"table") _x)))
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                   (\ _v
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                           ((Prelude..)
                              (\ bs
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                         (Prelude.fromIntegral (Data.ByteString.length bs)))
                                      (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                              Data.ProtoLens.encodeMessage
                              _v))
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'key") _x))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'timeout") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData TsGetReq where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_TsGetReq'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_TsGetReq'table x__)
                (Control.DeepSeq.deepseq
                   (_TsGetReq'key x__)
                   (Control.DeepSeq.deepseq (_TsGetReq'timeout x__) ())))
{- | Fields :
     
         * 'Proto.Riak_Fields.columns' @:: Lens' TsGetResp [TsColumnDescription]@
         * 'Proto.Riak_Fields.vec'columns' @:: Lens' TsGetResp (Data.Vector.Vector TsColumnDescription)@
         * 'Proto.Riak_Fields.rows' @:: Lens' TsGetResp [TsRow]@
         * 'Proto.Riak_Fields.vec'rows' @:: Lens' TsGetResp (Data.Vector.Vector TsRow)@ -}
data TsGetResp
  = TsGetResp'_constructor {_TsGetResp'columns :: !(Data.Vector.Vector TsColumnDescription),
                            _TsGetResp'rows :: !(Data.Vector.Vector TsRow),
                            _TsGetResp'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show TsGetResp where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField TsGetResp "columns" [TsColumnDescription] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsGetResp'columns (\ x__ y__ -> x__ {_TsGetResp'columns = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField TsGetResp "vec'columns" (Data.Vector.Vector TsColumnDescription) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsGetResp'columns (\ x__ y__ -> x__ {_TsGetResp'columns = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField TsGetResp "rows" [TsRow] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsGetResp'rows (\ x__ y__ -> x__ {_TsGetResp'rows = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField TsGetResp "vec'rows" (Data.Vector.Vector TsRow) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsGetResp'rows (\ x__ y__ -> x__ {_TsGetResp'rows = y__}))
        Prelude.id
instance Data.ProtoLens.Message TsGetResp where
  messageName _ = Data.Text.pack "TsGetResp"
  packedMessageDescriptor _
    = "\n\
      \\tTsGetResp\DC2.\n\
      \\acolumns\CAN\SOH \ETX(\v2\DC4.TsColumnDescriptionR\acolumns\DC2\SUB\n\
      \\EOTrows\CAN\STX \ETX(\v2\ACK.TsRowR\EOTrows"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        columns__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "columns"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor TsColumnDescription)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"columns")) ::
              Data.ProtoLens.FieldDescriptor TsGetResp
        rows__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "rows"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor TsRow)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"rows")) ::
              Data.ProtoLens.FieldDescriptor TsGetResp
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, columns__field_descriptor),
           (Data.ProtoLens.Tag 2, rows__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _TsGetResp'_unknownFields
        (\ x__ y__ -> x__ {_TsGetResp'_unknownFields = y__})
  defMessage
    = TsGetResp'_constructor
        {_TsGetResp'columns = Data.Vector.Generic.empty,
         _TsGetResp'rows = Data.Vector.Generic.empty,
         _TsGetResp'_unknownFields = []}
  parseMessage
    = let
        loop ::
          TsGetResp
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld TsColumnDescription
             -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld TsRow
                -> Data.ProtoLens.Encoding.Bytes.Parser TsGetResp
        loop x mutable'columns mutable'rows
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'columns <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                          (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                             mutable'columns)
                      frozen'rows <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.unsafeFreeze mutable'rows)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields
                           (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'columns")
                              frozen'columns
                              (Lens.Family2.set
                                 (Data.ProtoLens.Field.field @"vec'rows") frozen'rows x)))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "columns"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'columns y)
                                loop x v mutable'rows
                        18
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "rows"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'rows y)
                                loop x mutable'columns v
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'columns
                                  mutable'rows
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'columns <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                   Data.ProtoLens.Encoding.Growing.new
              mutable'rows <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage mutable'columns mutable'rows)
          "TsGetResp"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                (\ _v
                   -> (Data.Monoid.<>)
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                        ((Prelude..)
                           (\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Data.ProtoLens.encodeMessage
                           _v))
                (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'columns") _x))
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                   (\ _v
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                           ((Prelude..)
                              (\ bs
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                         (Prelude.fromIntegral (Data.ByteString.length bs)))
                                      (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                              Data.ProtoLens.encodeMessage
                              _v))
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'rows") _x))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData TsGetResp where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_TsGetResp'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_TsGetResp'columns x__)
                (Control.DeepSeq.deepseq (_TsGetResp'rows x__) ()))
{- | Fields :
     
         * 'Proto.Riak_Fields.base' @:: Lens' TsInterpolation Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.interpolations' @:: Lens' TsInterpolation [RpbPair]@
         * 'Proto.Riak_Fields.vec'interpolations' @:: Lens' TsInterpolation (Data.Vector.Vector RpbPair)@ -}
data TsInterpolation
  = TsInterpolation'_constructor {_TsInterpolation'base :: !Data.ByteString.ByteString,
                                  _TsInterpolation'interpolations :: !(Data.Vector.Vector RpbPair),
                                  _TsInterpolation'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show TsInterpolation where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField TsInterpolation "base" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsInterpolation'base
           (\ x__ y__ -> x__ {_TsInterpolation'base = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField TsInterpolation "interpolations" [RpbPair] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsInterpolation'interpolations
           (\ x__ y__ -> x__ {_TsInterpolation'interpolations = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField TsInterpolation "vec'interpolations" (Data.Vector.Vector RpbPair) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsInterpolation'interpolations
           (\ x__ y__ -> x__ {_TsInterpolation'interpolations = y__}))
        Prelude.id
instance Data.ProtoLens.Message TsInterpolation where
  messageName _ = Data.Text.pack "TsInterpolation"
  packedMessageDescriptor _
    = "\n\
      \\SITsInterpolation\DC2\DC2\n\
      \\EOTbase\CAN\SOH \STX(\fR\EOTbase\DC20\n\
      \\SOinterpolations\CAN\STX \ETX(\v2\b.RpbPairR\SOinterpolations"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        base__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "base"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"base")) ::
              Data.ProtoLens.FieldDescriptor TsInterpolation
        interpolations__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "interpolations"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor RpbPair)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked
                 (Data.ProtoLens.Field.field @"interpolations")) ::
              Data.ProtoLens.FieldDescriptor TsInterpolation
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, base__field_descriptor),
           (Data.ProtoLens.Tag 2, interpolations__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _TsInterpolation'_unknownFields
        (\ x__ y__ -> x__ {_TsInterpolation'_unknownFields = y__})
  defMessage
    = TsInterpolation'_constructor
        {_TsInterpolation'base = Data.ProtoLens.fieldDefault,
         _TsInterpolation'interpolations = Data.Vector.Generic.empty,
         _TsInterpolation'_unknownFields = []}
  parseMessage
    = let
        loop ::
          TsInterpolation
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld RpbPair
                -> Data.ProtoLens.Encoding.Bytes.Parser TsInterpolation
        loop x required'base mutable'interpolations
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'interpolations <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                                 (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                                    mutable'interpolations)
                      (let
                         missing = (if required'base then (:) "base" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields
                           (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'interpolations")
                              frozen'interpolations
                              x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "base"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"base") y x)
                                  Prelude.False
                                  mutable'interpolations
                        18
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "interpolations"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append
                                          mutable'interpolations y)
                                loop x required'base v
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'base
                                  mutable'interpolations
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'interpolations <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                          Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage Prelude.True mutable'interpolations)
          "TsInterpolation"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((\ bs
                    -> (Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"base") _x)))
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                   (\ _v
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                           ((Prelude..)
                              (\ bs
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                         (Prelude.fromIntegral (Data.ByteString.length bs)))
                                      (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                              Data.ProtoLens.encodeMessage
                              _v))
                   (Lens.Family2.view
                      (Data.ProtoLens.Field.field @"vec'interpolations") _x))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData TsInterpolation where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_TsInterpolation'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_TsInterpolation'base x__)
                (Control.DeepSeq.deepseq (_TsInterpolation'interpolations x__) ()))
{- | Fields :
     
         * 'Proto.Riak_Fields.table' @:: Lens' TsListKeysReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.timeout' @:: Lens' TsListKeysReq Data.Word.Word32@
         * 'Proto.Riak_Fields.maybe'timeout' @:: Lens' TsListKeysReq (Prelude.Maybe Data.Word.Word32)@ -}
data TsListKeysReq
  = TsListKeysReq'_constructor {_TsListKeysReq'table :: !Data.ByteString.ByteString,
                                _TsListKeysReq'timeout :: !(Prelude.Maybe Data.Word.Word32),
                                _TsListKeysReq'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show TsListKeysReq where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField TsListKeysReq "table" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsListKeysReq'table
           (\ x__ y__ -> x__ {_TsListKeysReq'table = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField TsListKeysReq "timeout" Data.Word.Word32 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsListKeysReq'timeout
           (\ x__ y__ -> x__ {_TsListKeysReq'timeout = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField TsListKeysReq "maybe'timeout" (Prelude.Maybe Data.Word.Word32) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsListKeysReq'timeout
           (\ x__ y__ -> x__ {_TsListKeysReq'timeout = y__}))
        Prelude.id
instance Data.ProtoLens.Message TsListKeysReq where
  messageName _ = Data.Text.pack "TsListKeysReq"
  packedMessageDescriptor _
    = "\n\
      \\rTsListKeysReq\DC2\DC4\n\
      \\ENQtable\CAN\SOH \STX(\fR\ENQtable\DC2\CAN\n\
      \\atimeout\CAN\STX \SOH(\rR\atimeout"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        table__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "table"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"table")) ::
              Data.ProtoLens.FieldDescriptor TsListKeysReq
        timeout__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "timeout"
              (Data.ProtoLens.ScalarField Data.ProtoLens.UInt32Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Word.Word32)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'timeout")) ::
              Data.ProtoLens.FieldDescriptor TsListKeysReq
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, table__field_descriptor),
           (Data.ProtoLens.Tag 2, timeout__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _TsListKeysReq'_unknownFields
        (\ x__ y__ -> x__ {_TsListKeysReq'_unknownFields = y__})
  defMessage
    = TsListKeysReq'_constructor
        {_TsListKeysReq'table = Data.ProtoLens.fieldDefault,
         _TsListKeysReq'timeout = Prelude.Nothing,
         _TsListKeysReq'_unknownFields = []}
  parseMessage
    = let
        loop ::
          TsListKeysReq
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Bytes.Parser TsListKeysReq
        loop x required'table
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing = (if required'table then (:) "table" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "table"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"table") y x)
                                  Prelude.False
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Prelude.fromIntegral
                                          Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "timeout"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"timeout") y x)
                                  required'table
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'table
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage Prelude.True) "TsListKeysReq"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((\ bs
                    -> (Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"table") _x)))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'timeout") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          ((Prelude..)
                             Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral _v))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData TsListKeysReq where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_TsListKeysReq'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_TsListKeysReq'table x__)
                (Control.DeepSeq.deepseq (_TsListKeysReq'timeout x__) ()))
{- | Fields :
     
         * 'Proto.Riak_Fields.keys' @:: Lens' TsListKeysResp [TsRow]@
         * 'Proto.Riak_Fields.vec'keys' @:: Lens' TsListKeysResp (Data.Vector.Vector TsRow)@
         * 'Proto.Riak_Fields.done' @:: Lens' TsListKeysResp Prelude.Bool@
         * 'Proto.Riak_Fields.maybe'done' @:: Lens' TsListKeysResp (Prelude.Maybe Prelude.Bool)@ -}
data TsListKeysResp
  = TsListKeysResp'_constructor {_TsListKeysResp'keys :: !(Data.Vector.Vector TsRow),
                                 _TsListKeysResp'done :: !(Prelude.Maybe Prelude.Bool),
                                 _TsListKeysResp'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show TsListKeysResp where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField TsListKeysResp "keys" [TsRow] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsListKeysResp'keys
           (\ x__ y__ -> x__ {_TsListKeysResp'keys = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField TsListKeysResp "vec'keys" (Data.Vector.Vector TsRow) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsListKeysResp'keys
           (\ x__ y__ -> x__ {_TsListKeysResp'keys = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField TsListKeysResp "done" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsListKeysResp'done
           (\ x__ y__ -> x__ {_TsListKeysResp'done = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField TsListKeysResp "maybe'done" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsListKeysResp'done
           (\ x__ y__ -> x__ {_TsListKeysResp'done = y__}))
        Prelude.id
instance Data.ProtoLens.Message TsListKeysResp where
  messageName _ = Data.Text.pack "TsListKeysResp"
  packedMessageDescriptor _
    = "\n\
      \\SOTsListKeysResp\DC2\SUB\n\
      \\EOTkeys\CAN\SOH \ETX(\v2\ACK.TsRowR\EOTkeys\DC2\DC2\n\
      \\EOTdone\CAN\STX \SOH(\bR\EOTdone"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        keys__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "keys"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor TsRow)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"keys")) ::
              Data.ProtoLens.FieldDescriptor TsListKeysResp
        done__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "done"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'done")) ::
              Data.ProtoLens.FieldDescriptor TsListKeysResp
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, keys__field_descriptor),
           (Data.ProtoLens.Tag 2, done__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _TsListKeysResp'_unknownFields
        (\ x__ y__ -> x__ {_TsListKeysResp'_unknownFields = y__})
  defMessage
    = TsListKeysResp'_constructor
        {_TsListKeysResp'keys = Data.Vector.Generic.empty,
         _TsListKeysResp'done = Prelude.Nothing,
         _TsListKeysResp'_unknownFields = []}
  parseMessage
    = let
        loop ::
          TsListKeysResp
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld TsRow
             -> Data.ProtoLens.Encoding.Bytes.Parser TsListKeysResp
        loop x mutable'keys
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'keys <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.unsafeFreeze mutable'keys)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields
                           (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'keys") frozen'keys x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "keys"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'keys y)
                                loop x v
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "done"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"done") y x)
                                  mutable'keys
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'keys
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'keys <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage mutable'keys)
          "TsListKeysResp"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                (\ _v
                   -> (Data.Monoid.<>)
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                        ((Prelude..)
                           (\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Data.ProtoLens.encodeMessage
                           _v))
                (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'keys") _x))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'done") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          ((Prelude..)
                             Data.ProtoLens.Encoding.Bytes.putVarInt
                             (\ b -> if b then 1 else 0)
                             _v))
                (Data.ProtoLens.Encoding.Wire.buildFieldSet
                   (Lens.Family2.view Data.ProtoLens.unknownFields _x)))
instance Control.DeepSeq.NFData TsListKeysResp where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_TsListKeysResp'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_TsListKeysResp'keys x__)
                (Control.DeepSeq.deepseq (_TsListKeysResp'done x__) ()))
{- | Fields :
     
         * 'Proto.Riak_Fields.table' @:: Lens' TsPutReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.columns' @:: Lens' TsPutReq [TsColumnDescription]@
         * 'Proto.Riak_Fields.vec'columns' @:: Lens' TsPutReq (Data.Vector.Vector TsColumnDescription)@
         * 'Proto.Riak_Fields.rows' @:: Lens' TsPutReq [TsRow]@
         * 'Proto.Riak_Fields.vec'rows' @:: Lens' TsPutReq (Data.Vector.Vector TsRow)@ -}
data TsPutReq
  = TsPutReq'_constructor {_TsPutReq'table :: !Data.ByteString.ByteString,
                           _TsPutReq'columns :: !(Data.Vector.Vector TsColumnDescription),
                           _TsPutReq'rows :: !(Data.Vector.Vector TsRow),
                           _TsPutReq'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show TsPutReq where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField TsPutReq "table" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsPutReq'table (\ x__ y__ -> x__ {_TsPutReq'table = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField TsPutReq "columns" [TsColumnDescription] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsPutReq'columns (\ x__ y__ -> x__ {_TsPutReq'columns = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField TsPutReq "vec'columns" (Data.Vector.Vector TsColumnDescription) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsPutReq'columns (\ x__ y__ -> x__ {_TsPutReq'columns = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField TsPutReq "rows" [TsRow] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsPutReq'rows (\ x__ y__ -> x__ {_TsPutReq'rows = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField TsPutReq "vec'rows" (Data.Vector.Vector TsRow) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsPutReq'rows (\ x__ y__ -> x__ {_TsPutReq'rows = y__}))
        Prelude.id
instance Data.ProtoLens.Message TsPutReq where
  messageName _ = Data.Text.pack "TsPutReq"
  packedMessageDescriptor _
    = "\n\
      \\bTsPutReq\DC2\DC4\n\
      \\ENQtable\CAN\SOH \STX(\fR\ENQtable\DC2.\n\
      \\acolumns\CAN\STX \ETX(\v2\DC4.TsColumnDescriptionR\acolumns\DC2\SUB\n\
      \\EOTrows\CAN\ETX \ETX(\v2\ACK.TsRowR\EOTrows"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        table__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "table"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"table")) ::
              Data.ProtoLens.FieldDescriptor TsPutReq
        columns__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "columns"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor TsColumnDescription)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"columns")) ::
              Data.ProtoLens.FieldDescriptor TsPutReq
        rows__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "rows"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor TsRow)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"rows")) ::
              Data.ProtoLens.FieldDescriptor TsPutReq
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, table__field_descriptor),
           (Data.ProtoLens.Tag 2, columns__field_descriptor),
           (Data.ProtoLens.Tag 3, rows__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _TsPutReq'_unknownFields
        (\ x__ y__ -> x__ {_TsPutReq'_unknownFields = y__})
  defMessage
    = TsPutReq'_constructor
        {_TsPutReq'table = Data.ProtoLens.fieldDefault,
         _TsPutReq'columns = Data.Vector.Generic.empty,
         _TsPutReq'rows = Data.Vector.Generic.empty,
         _TsPutReq'_unknownFields = []}
  parseMessage
    = let
        loop ::
          TsPutReq
          -> Prelude.Bool
             -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld TsColumnDescription
                -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld TsRow
                   -> Data.ProtoLens.Encoding.Bytes.Parser TsPutReq
        loop x required'table mutable'columns mutable'rows
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'columns <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                          (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                             mutable'columns)
                      frozen'rows <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.unsafeFreeze mutable'rows)
                      (let
                         missing = (if required'table then (:) "table" else Prelude.id) []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields
                           (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'columns")
                              frozen'columns
                              (Lens.Family2.set
                                 (Data.ProtoLens.Field.field @"vec'rows") frozen'rows x)))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "table"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"table") y x)
                                  Prelude.False
                                  mutable'columns
                                  mutable'rows
                        18
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "columns"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'columns y)
                                loop x required'table v mutable'rows
                        26
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "rows"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'rows y)
                                loop x required'table mutable'columns v
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'table
                                  mutable'columns
                                  mutable'rows
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'columns <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                   Data.ProtoLens.Encoding.Growing.new
              mutable'rows <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                Data.ProtoLens.Encoding.Growing.new
              loop
                Data.ProtoLens.defMessage
                Prelude.True
                mutable'columns
                mutable'rows)
          "TsPutReq"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((\ bs
                    -> (Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"table") _x)))
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                   (\ _v
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                           ((Prelude..)
                              (\ bs
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                         (Prelude.fromIntegral (Data.ByteString.length bs)))
                                      (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                              Data.ProtoLens.encodeMessage
                              _v))
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'columns") _x))
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                      (\ _v
                         -> (Data.Monoid.<>)
                              (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                              ((Prelude..)
                                 (\ bs
                                    -> (Data.Monoid.<>)
                                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                 Data.ProtoLens.encodeMessage
                                 _v))
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'rows") _x))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData TsPutReq where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_TsPutReq'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_TsPutReq'table x__)
                (Control.DeepSeq.deepseq
                   (_TsPutReq'columns x__)
                   (Control.DeepSeq.deepseq (_TsPutReq'rows x__) ())))
{- | Fields :
      -}
data TsPutResp
  = TsPutResp'_constructor {_TsPutResp'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show TsPutResp where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Message TsPutResp where
  messageName _ = Data.Text.pack "TsPutResp"
  packedMessageDescriptor _
    = "\n\
      \\tTsPutResp"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag = let in Data.Map.fromList []
  unknownFields
    = Lens.Family2.Unchecked.lens
        _TsPutResp'_unknownFields
        (\ x__ y__ -> x__ {_TsPutResp'_unknownFields = y__})
  defMessage
    = TsPutResp'_constructor {_TsPutResp'_unknownFields = []}
  parseMessage
    = let
        loop :: TsPutResp -> Data.ProtoLens.Encoding.Bytes.Parser TsPutResp
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of {
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x) }
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "TsPutResp"
  buildMessage
    = \ _x
        -> Data.ProtoLens.Encoding.Wire.buildFieldSet
             (Lens.Family2.view Data.ProtoLens.unknownFields _x)
instance Control.DeepSeq.NFData TsPutResp where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq (_TsPutResp'_unknownFields x__) ()
{- | Fields :
     
         * 'Proto.Riak_Fields.query' @:: Lens' TsQueryReq TsInterpolation@
         * 'Proto.Riak_Fields.maybe'query' @:: Lens' TsQueryReq (Prelude.Maybe TsInterpolation)@
         * 'Proto.Riak_Fields.stream' @:: Lens' TsQueryReq Prelude.Bool@
         * 'Proto.Riak_Fields.maybe'stream' @:: Lens' TsQueryReq (Prelude.Maybe Prelude.Bool)@
         * 'Proto.Riak_Fields.coverContext' @:: Lens' TsQueryReq Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.maybe'coverContext' @:: Lens' TsQueryReq (Prelude.Maybe Data.ByteString.ByteString)@ -}
data TsQueryReq
  = TsQueryReq'_constructor {_TsQueryReq'query :: !(Prelude.Maybe TsInterpolation),
                             _TsQueryReq'stream :: !(Prelude.Maybe Prelude.Bool),
                             _TsQueryReq'coverContext :: !(Prelude.Maybe Data.ByteString.ByteString),
                             _TsQueryReq'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show TsQueryReq where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField TsQueryReq "query" TsInterpolation where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsQueryReq'query (\ x__ y__ -> x__ {_TsQueryReq'query = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.defMessage)
instance Data.ProtoLens.Field.HasField TsQueryReq "maybe'query" (Prelude.Maybe TsInterpolation) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsQueryReq'query (\ x__ y__ -> x__ {_TsQueryReq'query = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField TsQueryReq "stream" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsQueryReq'stream (\ x__ y__ -> x__ {_TsQueryReq'stream = y__}))
        (Data.ProtoLens.maybeLens Prelude.False)
instance Data.ProtoLens.Field.HasField TsQueryReq "maybe'stream" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsQueryReq'stream (\ x__ y__ -> x__ {_TsQueryReq'stream = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField TsQueryReq "coverContext" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsQueryReq'coverContext
           (\ x__ y__ -> x__ {_TsQueryReq'coverContext = y__}))
        (Data.ProtoLens.maybeLens Data.ProtoLens.fieldDefault)
instance Data.ProtoLens.Field.HasField TsQueryReq "maybe'coverContext" (Prelude.Maybe Data.ByteString.ByteString) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsQueryReq'coverContext
           (\ x__ y__ -> x__ {_TsQueryReq'coverContext = y__}))
        Prelude.id
instance Data.ProtoLens.Message TsQueryReq where
  messageName _ = Data.Text.pack "TsQueryReq"
  packedMessageDescriptor _
    = "\n\
      \\n\
      \TsQueryReq\DC2&\n\
      \\ENQquery\CAN\SOH \SOH(\v2\DLE.TsInterpolationR\ENQquery\DC2\GS\n\
      \\ACKstream\CAN\STX \SOH(\b:\ENQfalseR\ACKstream\DC2#\n\
      \\rcover_context\CAN\ETX \SOH(\fR\fcoverContext"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        query__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "query"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor TsInterpolation)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'query")) ::
              Data.ProtoLens.FieldDescriptor TsQueryReq
        stream__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "stream"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'stream")) ::
              Data.ProtoLens.FieldDescriptor TsQueryReq
        coverContext__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "cover_context"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'coverContext")) ::
              Data.ProtoLens.FieldDescriptor TsQueryReq
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, query__field_descriptor),
           (Data.ProtoLens.Tag 2, stream__field_descriptor),
           (Data.ProtoLens.Tag 3, coverContext__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _TsQueryReq'_unknownFields
        (\ x__ y__ -> x__ {_TsQueryReq'_unknownFields = y__})
  defMessage
    = TsQueryReq'_constructor
        {_TsQueryReq'query = Prelude.Nothing,
         _TsQueryReq'stream = Prelude.Nothing,
         _TsQueryReq'coverContext = Prelude.Nothing,
         _TsQueryReq'_unknownFields = []}
  parseMessage
    = let
        loop ::
          TsQueryReq -> Data.ProtoLens.Encoding.Bytes.Parser TsQueryReq
        loop x
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.isolate
                                             (Prelude.fromIntegral len) Data.ProtoLens.parseMessage)
                                       "query"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"query") y x)
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "stream"
                                loop (Lens.Family2.set (Data.ProtoLens.Field.field @"stream") y x)
                        26
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "cover_context"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"coverContext") y x)
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop Data.ProtoLens.defMessage) "TsQueryReq"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (case
                  Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'query") _x
              of
                Prelude.Nothing -> Data.Monoid.mempty
                (Prelude.Just _v)
                  -> (Data.Monoid.<>)
                       (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                       ((Prelude..)
                          (\ bs
                             -> (Data.Monoid.<>)
                                  (Data.ProtoLens.Encoding.Bytes.putVarInt
                                     (Prelude.fromIntegral (Data.ByteString.length bs)))
                                  (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                          Data.ProtoLens.encodeMessage
                          _v))
             ((Data.Monoid.<>)
                (case
                     Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'stream") _x
                 of
                   Prelude.Nothing -> Data.Monoid.mempty
                   (Prelude.Just _v)
                     -> (Data.Monoid.<>)
                          (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                          ((Prelude..)
                             Data.ProtoLens.Encoding.Bytes.putVarInt
                             (\ b -> if b then 1 else 0)
                             _v))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view
                          (Data.ProtoLens.Field.field @"maybe'coverContext") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 26)
                             ((\ bs
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                         (Prelude.fromIntegral (Data.ByteString.length bs)))
                                      (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData TsQueryReq where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_TsQueryReq'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_TsQueryReq'query x__)
                (Control.DeepSeq.deepseq
                   (_TsQueryReq'stream x__)
                   (Control.DeepSeq.deepseq (_TsQueryReq'coverContext x__) ())))
{- | Fields :
     
         * 'Proto.Riak_Fields.columns' @:: Lens' TsQueryResp [TsColumnDescription]@
         * 'Proto.Riak_Fields.vec'columns' @:: Lens' TsQueryResp (Data.Vector.Vector TsColumnDescription)@
         * 'Proto.Riak_Fields.rows' @:: Lens' TsQueryResp [TsRow]@
         * 'Proto.Riak_Fields.vec'rows' @:: Lens' TsQueryResp (Data.Vector.Vector TsRow)@
         * 'Proto.Riak_Fields.done' @:: Lens' TsQueryResp Prelude.Bool@
         * 'Proto.Riak_Fields.maybe'done' @:: Lens' TsQueryResp (Prelude.Maybe Prelude.Bool)@ -}
data TsQueryResp
  = TsQueryResp'_constructor {_TsQueryResp'columns :: !(Data.Vector.Vector TsColumnDescription),
                              _TsQueryResp'rows :: !(Data.Vector.Vector TsRow),
                              _TsQueryResp'done :: !(Prelude.Maybe Prelude.Bool),
                              _TsQueryResp'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show TsQueryResp where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField TsQueryResp "columns" [TsColumnDescription] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsQueryResp'columns
           (\ x__ y__ -> x__ {_TsQueryResp'columns = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField TsQueryResp "vec'columns" (Data.Vector.Vector TsColumnDescription) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsQueryResp'columns
           (\ x__ y__ -> x__ {_TsQueryResp'columns = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField TsQueryResp "rows" [TsRow] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsQueryResp'rows (\ x__ y__ -> x__ {_TsQueryResp'rows = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField TsQueryResp "vec'rows" (Data.Vector.Vector TsRow) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsQueryResp'rows (\ x__ y__ -> x__ {_TsQueryResp'rows = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField TsQueryResp "done" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsQueryResp'done (\ x__ y__ -> x__ {_TsQueryResp'done = y__}))
        (Data.ProtoLens.maybeLens Prelude.True)
instance Data.ProtoLens.Field.HasField TsQueryResp "maybe'done" (Prelude.Maybe Prelude.Bool) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsQueryResp'done (\ x__ y__ -> x__ {_TsQueryResp'done = y__}))
        Prelude.id
instance Data.ProtoLens.Message TsQueryResp where
  messageName _ = Data.Text.pack "TsQueryResp"
  packedMessageDescriptor _
    = "\n\
      \\vTsQueryResp\DC2.\n\
      \\acolumns\CAN\SOH \ETX(\v2\DC4.TsColumnDescriptionR\acolumns\DC2\SUB\n\
      \\EOTrows\CAN\STX \ETX(\v2\ACK.TsRowR\EOTrows\DC2\CAN\n\
      \\EOTdone\CAN\ETX \SOH(\b:\EOTtrueR\EOTdone"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        columns__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "columns"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor TsColumnDescription)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"columns")) ::
              Data.ProtoLens.FieldDescriptor TsQueryResp
        rows__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "rows"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor TsRow)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"rows")) ::
              Data.ProtoLens.FieldDescriptor TsQueryResp
        done__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "done"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.OptionalField
                 (Data.ProtoLens.Field.field @"maybe'done")) ::
              Data.ProtoLens.FieldDescriptor TsQueryResp
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, columns__field_descriptor),
           (Data.ProtoLens.Tag 2, rows__field_descriptor),
           (Data.ProtoLens.Tag 3, done__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _TsQueryResp'_unknownFields
        (\ x__ y__ -> x__ {_TsQueryResp'_unknownFields = y__})
  defMessage
    = TsQueryResp'_constructor
        {_TsQueryResp'columns = Data.Vector.Generic.empty,
         _TsQueryResp'rows = Data.Vector.Generic.empty,
         _TsQueryResp'done = Prelude.Nothing,
         _TsQueryResp'_unknownFields = []}
  parseMessage
    = let
        loop ::
          TsQueryResp
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld TsColumnDescription
             -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld TsRow
                -> Data.ProtoLens.Encoding.Bytes.Parser TsQueryResp
        loop x mutable'columns mutable'rows
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'columns <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                          (Data.ProtoLens.Encoding.Growing.unsafeFreeze
                                             mutable'columns)
                      frozen'rows <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.unsafeFreeze mutable'rows)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields
                           (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'columns")
                              frozen'columns
                              (Lens.Family2.set
                                 (Data.ProtoLens.Field.field @"vec'rows") frozen'rows x)))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "columns"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'columns y)
                                loop x v mutable'rows
                        18
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "rows"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'rows y)
                                loop x mutable'columns v
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "done"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"done") y x)
                                  mutable'columns
                                  mutable'rows
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'columns
                                  mutable'rows
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'columns <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                   Data.ProtoLens.Encoding.Growing.new
              mutable'rows <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage mutable'columns mutable'rows)
          "TsQueryResp"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                (\ _v
                   -> (Data.Monoid.<>)
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                        ((Prelude..)
                           (\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Data.ProtoLens.encodeMessage
                           _v))
                (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'columns") _x))
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                   (\ _v
                      -> (Data.Monoid.<>)
                           (Data.ProtoLens.Encoding.Bytes.putVarInt 18)
                           ((Prelude..)
                              (\ bs
                                 -> (Data.Monoid.<>)
                                      (Data.ProtoLens.Encoding.Bytes.putVarInt
                                         (Prelude.fromIntegral (Data.ByteString.length bs)))
                                      (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                              Data.ProtoLens.encodeMessage
                              _v))
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'rows") _x))
                ((Data.Monoid.<>)
                   (case
                        Lens.Family2.view (Data.ProtoLens.Field.field @"maybe'done") _x
                    of
                      Prelude.Nothing -> Data.Monoid.mempty
                      (Prelude.Just _v)
                        -> (Data.Monoid.<>)
                             (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                             ((Prelude..)
                                Data.ProtoLens.Encoding.Bytes.putVarInt
                                (\ b -> if b then 1 else 0)
                                _v))
                   (Data.ProtoLens.Encoding.Wire.buildFieldSet
                      (Lens.Family2.view Data.ProtoLens.unknownFields _x))))
instance Control.DeepSeq.NFData TsQueryResp where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_TsQueryResp'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_TsQueryResp'columns x__)
                (Control.DeepSeq.deepseq
                   (_TsQueryResp'rows x__)
                   (Control.DeepSeq.deepseq (_TsQueryResp'done x__) ())))
{- | Fields :
     
         * 'Proto.Riak_Fields.fieldName' @:: Lens' TsRange Data.ByteString.ByteString@
         * 'Proto.Riak_Fields.lowerBound' @:: Lens' TsRange Data.Int.Int64@
         * 'Proto.Riak_Fields.lowerBoundInclusive' @:: Lens' TsRange Prelude.Bool@
         * 'Proto.Riak_Fields.upperBound' @:: Lens' TsRange Data.Int.Int64@
         * 'Proto.Riak_Fields.upperBoundInclusive' @:: Lens' TsRange Prelude.Bool@
         * 'Proto.Riak_Fields.desc' @:: Lens' TsRange Data.ByteString.ByteString@ -}
data TsRange
  = TsRange'_constructor {_TsRange'fieldName :: !Data.ByteString.ByteString,
                          _TsRange'lowerBound :: !Data.Int.Int64,
                          _TsRange'lowerBoundInclusive :: !Prelude.Bool,
                          _TsRange'upperBound :: !Data.Int.Int64,
                          _TsRange'upperBoundInclusive :: !Prelude.Bool,
                          _TsRange'desc :: !Data.ByteString.ByteString,
                          _TsRange'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show TsRange where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField TsRange "fieldName" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsRange'fieldName (\ x__ y__ -> x__ {_TsRange'fieldName = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField TsRange "lowerBound" Data.Int.Int64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsRange'lowerBound (\ x__ y__ -> x__ {_TsRange'lowerBound = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField TsRange "lowerBoundInclusive" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsRange'lowerBoundInclusive
           (\ x__ y__ -> x__ {_TsRange'lowerBoundInclusive = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField TsRange "upperBound" Data.Int.Int64 where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsRange'upperBound (\ x__ y__ -> x__ {_TsRange'upperBound = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField TsRange "upperBoundInclusive" Prelude.Bool where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsRange'upperBoundInclusive
           (\ x__ y__ -> x__ {_TsRange'upperBoundInclusive = y__}))
        Prelude.id
instance Data.ProtoLens.Field.HasField TsRange "desc" Data.ByteString.ByteString where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsRange'desc (\ x__ y__ -> x__ {_TsRange'desc = y__}))
        Prelude.id
instance Data.ProtoLens.Message TsRange where
  messageName _ = Data.Text.pack "TsRange"
  packedMessageDescriptor _
    = "\n\
      \\aTsRange\DC2\GS\n\
      \\n\
      \field_name\CAN\SOH \STX(\fR\tfieldName\DC2\US\n\
      \\vlower_bound\CAN\STX \STX(\DC2R\n\
      \lowerBound\DC22\n\
      \\NAKlower_bound_inclusive\CAN\ETX \STX(\bR\DC3lowerBoundInclusive\DC2\US\n\
      \\vupper_bound\CAN\EOT \STX(\DC2R\n\
      \upperBound\DC22\n\
      \\NAKupper_bound_inclusive\CAN\ENQ \STX(\bR\DC3upperBoundInclusive\DC2\DC2\n\
      \\EOTdesc\CAN\ACK \STX(\fR\EOTdesc"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        fieldName__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "field_name"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"fieldName")) ::
              Data.ProtoLens.FieldDescriptor TsRange
        lowerBound__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "lower_bound"
              (Data.ProtoLens.ScalarField Data.ProtoLens.SInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"lowerBound")) ::
              Data.ProtoLens.FieldDescriptor TsRange
        lowerBoundInclusive__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "lower_bound_inclusive"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"lowerBoundInclusive")) ::
              Data.ProtoLens.FieldDescriptor TsRange
        upperBound__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "upper_bound"
              (Data.ProtoLens.ScalarField Data.ProtoLens.SInt64Field ::
                 Data.ProtoLens.FieldTypeDescriptor Data.Int.Int64)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"upperBound")) ::
              Data.ProtoLens.FieldDescriptor TsRange
        upperBoundInclusive__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "upper_bound_inclusive"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BoolField ::
                 Data.ProtoLens.FieldTypeDescriptor Prelude.Bool)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required
                 (Data.ProtoLens.Field.field @"upperBoundInclusive")) ::
              Data.ProtoLens.FieldDescriptor TsRange
        desc__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "desc"
              (Data.ProtoLens.ScalarField Data.ProtoLens.BytesField ::
                 Data.ProtoLens.FieldTypeDescriptor Data.ByteString.ByteString)
              (Data.ProtoLens.PlainField
                 Data.ProtoLens.Required (Data.ProtoLens.Field.field @"desc")) ::
              Data.ProtoLens.FieldDescriptor TsRange
      in
        Data.Map.fromList
          [(Data.ProtoLens.Tag 1, fieldName__field_descriptor),
           (Data.ProtoLens.Tag 2, lowerBound__field_descriptor),
           (Data.ProtoLens.Tag 3, lowerBoundInclusive__field_descriptor),
           (Data.ProtoLens.Tag 4, upperBound__field_descriptor),
           (Data.ProtoLens.Tag 5, upperBoundInclusive__field_descriptor),
           (Data.ProtoLens.Tag 6, desc__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _TsRange'_unknownFields
        (\ x__ y__ -> x__ {_TsRange'_unknownFields = y__})
  defMessage
    = TsRange'_constructor
        {_TsRange'fieldName = Data.ProtoLens.fieldDefault,
         _TsRange'lowerBound = Data.ProtoLens.fieldDefault,
         _TsRange'lowerBoundInclusive = Data.ProtoLens.fieldDefault,
         _TsRange'upperBound = Data.ProtoLens.fieldDefault,
         _TsRange'upperBoundInclusive = Data.ProtoLens.fieldDefault,
         _TsRange'desc = Data.ProtoLens.fieldDefault,
         _TsRange'_unknownFields = []}
  parseMessage
    = let
        loop ::
          TsRange
          -> Prelude.Bool
             -> Prelude.Bool
                -> Prelude.Bool
                   -> Prelude.Bool
                      -> Prelude.Bool
                         -> Prelude.Bool -> Data.ProtoLens.Encoding.Bytes.Parser TsRange
        loop
          x
          required'desc
          required'fieldName
          required'lowerBound
          required'lowerBoundInclusive
          required'upperBound
          required'upperBoundInclusive
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do (let
                         missing
                           = (if required'desc then (:) "desc" else Prelude.id)
                               ((if required'fieldName then (:) "field_name" else Prelude.id)
                                  ((if required'lowerBound then (:) "lower_bound" else Prelude.id)
                                     ((if required'lowerBoundInclusive then
                                           (:) "lower_bound_inclusive"
                                       else
                                           Prelude.id)
                                        ((if required'upperBound then
                                              (:) "upper_bound"
                                          else
                                              Prelude.id)
                                           ((if required'upperBoundInclusive then
                                                 (:) "upper_bound_inclusive"
                                             else
                                                 Prelude.id)
                                              [])))))
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields (\ !t -> Prelude.reverse t) x)
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "field_name"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"fieldName") y x)
                                  required'desc
                                  Prelude.False
                                  required'lowerBound
                                  required'lowerBoundInclusive
                                  required'upperBound
                                  required'upperBoundInclusive
                        16
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Data.ProtoLens.Encoding.Bytes.wordToSignedInt64
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "lower_bound"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"lowerBound") y x)
                                  required'desc
                                  required'fieldName
                                  Prelude.False
                                  required'lowerBoundInclusive
                                  required'upperBound
                                  required'upperBoundInclusive
                        24
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "lower_bound_inclusive"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"lowerBoundInclusive") y x)
                                  required'desc
                                  required'fieldName
                                  required'lowerBound
                                  Prelude.False
                                  required'upperBound
                                  required'upperBoundInclusive
                        32
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          Data.ProtoLens.Encoding.Bytes.wordToSignedInt64
                                          (Prelude.fmap
                                             Prelude.fromIntegral
                                             Data.ProtoLens.Encoding.Bytes.getVarInt))
                                       "upper_bound"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"upperBound") y x)
                                  required'desc
                                  required'fieldName
                                  required'lowerBound
                                  required'lowerBoundInclusive
                                  Prelude.False
                                  required'upperBoundInclusive
                        40
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (Prelude.fmap
                                          ((Prelude./=) 0) Data.ProtoLens.Encoding.Bytes.getVarInt)
                                       "upper_bound_inclusive"
                                loop
                                  (Lens.Family2.set
                                     (Data.ProtoLens.Field.field @"upperBoundInclusive") y x)
                                  required'desc
                                  required'fieldName
                                  required'lowerBound
                                  required'lowerBoundInclusive
                                  required'upperBound
                                  Prelude.False
                        50
                          -> do y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                       (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                           Data.ProtoLens.Encoding.Bytes.getBytes
                                             (Prelude.fromIntegral len))
                                       "desc"
                                loop
                                  (Lens.Family2.set (Data.ProtoLens.Field.field @"desc") y x)
                                  Prelude.False
                                  required'fieldName
                                  required'lowerBound
                                  required'lowerBoundInclusive
                                  required'upperBound
                                  required'upperBoundInclusive
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  required'desc
                                  required'fieldName
                                  required'lowerBound
                                  required'lowerBoundInclusive
                                  required'upperBound
                                  required'upperBoundInclusive
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do loop
                Data.ProtoLens.defMessage
                Prelude.True
                Prelude.True
                Prelude.True
                Prelude.True
                Prelude.True
                Prelude.True)
          "TsRange"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             ((Data.Monoid.<>)
                (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                ((\ bs
                    -> (Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.putVarInt
                            (Prelude.fromIntegral (Data.ByteString.length bs)))
                         (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                   (Lens.Family2.view (Data.ProtoLens.Field.field @"fieldName") _x)))
             ((Data.Monoid.<>)
                ((Data.Monoid.<>)
                   (Data.ProtoLens.Encoding.Bytes.putVarInt 16)
                   ((Prelude..)
                      ((Prelude..)
                         Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                      Data.ProtoLens.Encoding.Bytes.signedInt64ToWord
                      (Lens.Family2.view (Data.ProtoLens.Field.field @"lowerBound") _x)))
                ((Data.Monoid.<>)
                   ((Data.Monoid.<>)
                      (Data.ProtoLens.Encoding.Bytes.putVarInt 24)
                      ((Prelude..)
                         Data.ProtoLens.Encoding.Bytes.putVarInt
                         (\ b -> if b then 1 else 0)
                         (Lens.Family2.view
                            (Data.ProtoLens.Field.field @"lowerBoundInclusive") _x)))
                   ((Data.Monoid.<>)
                      ((Data.Monoid.<>)
                         (Data.ProtoLens.Encoding.Bytes.putVarInt 32)
                         ((Prelude..)
                            ((Prelude..)
                               Data.ProtoLens.Encoding.Bytes.putVarInt Prelude.fromIntegral)
                            Data.ProtoLens.Encoding.Bytes.signedInt64ToWord
                            (Lens.Family2.view (Data.ProtoLens.Field.field @"upperBound") _x)))
                      ((Data.Monoid.<>)
                         ((Data.Monoid.<>)
                            (Data.ProtoLens.Encoding.Bytes.putVarInt 40)
                            ((Prelude..)
                               Data.ProtoLens.Encoding.Bytes.putVarInt
                               (\ b -> if b then 1 else 0)
                               (Lens.Family2.view
                                  (Data.ProtoLens.Field.field @"upperBoundInclusive") _x)))
                         ((Data.Monoid.<>)
                            ((Data.Monoid.<>)
                               (Data.ProtoLens.Encoding.Bytes.putVarInt 50)
                               ((\ bs
                                   -> (Data.Monoid.<>)
                                        (Data.ProtoLens.Encoding.Bytes.putVarInt
                                           (Prelude.fromIntegral (Data.ByteString.length bs)))
                                        (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                                  (Lens.Family2.view (Data.ProtoLens.Field.field @"desc") _x)))
                            (Data.ProtoLens.Encoding.Wire.buildFieldSet
                               (Lens.Family2.view Data.ProtoLens.unknownFields _x)))))))
instance Control.DeepSeq.NFData TsRange where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_TsRange'_unknownFields x__)
             (Control.DeepSeq.deepseq
                (_TsRange'fieldName x__)
                (Control.DeepSeq.deepseq
                   (_TsRange'lowerBound x__)
                   (Control.DeepSeq.deepseq
                      (_TsRange'lowerBoundInclusive x__)
                      (Control.DeepSeq.deepseq
                         (_TsRange'upperBound x__)
                         (Control.DeepSeq.deepseq
                            (_TsRange'upperBoundInclusive x__)
                            (Control.DeepSeq.deepseq (_TsRange'desc x__) ()))))))
{- | Fields :
     
         * 'Proto.Riak_Fields.cells' @:: Lens' TsRow [TsCell]@
         * 'Proto.Riak_Fields.vec'cells' @:: Lens' TsRow (Data.Vector.Vector TsCell)@ -}
data TsRow
  = TsRow'_constructor {_TsRow'cells :: !(Data.Vector.Vector TsCell),
                        _TsRow'_unknownFields :: !Data.ProtoLens.FieldSet}
  deriving stock (Prelude.Eq, Prelude.Ord)
instance Prelude.Show TsRow where
  showsPrec _ __x __s
    = Prelude.showChar
        '{'
        (Prelude.showString
           (Data.ProtoLens.showMessageShort __x) (Prelude.showChar '}' __s))
instance Data.ProtoLens.Field.HasField TsRow "cells" [TsCell] where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsRow'cells (\ x__ y__ -> x__ {_TsRow'cells = y__}))
        (Lens.Family2.Unchecked.lens
           Data.Vector.Generic.toList
           (\ _ y__ -> Data.Vector.Generic.fromList y__))
instance Data.ProtoLens.Field.HasField TsRow "vec'cells" (Data.Vector.Vector TsCell) where
  fieldOf _
    = (Prelude..)
        (Lens.Family2.Unchecked.lens
           _TsRow'cells (\ x__ y__ -> x__ {_TsRow'cells = y__}))
        Prelude.id
instance Data.ProtoLens.Message TsRow where
  messageName _ = Data.Text.pack "TsRow"
  packedMessageDescriptor _
    = "\n\
      \\ENQTsRow\DC2\GS\n\
      \\ENQcells\CAN\SOH \ETX(\v2\a.TsCellR\ENQcells"
  packedFileDescriptor _ = packedFileDescriptor
  fieldsByTag
    = let
        cells__field_descriptor
          = Data.ProtoLens.FieldDescriptor
              "cells"
              (Data.ProtoLens.MessageField Data.ProtoLens.MessageType ::
                 Data.ProtoLens.FieldTypeDescriptor TsCell)
              (Data.ProtoLens.RepeatedField
                 Data.ProtoLens.Unpacked (Data.ProtoLens.Field.field @"cells")) ::
              Data.ProtoLens.FieldDescriptor TsRow
      in
        Data.Map.fromList [(Data.ProtoLens.Tag 1, cells__field_descriptor)]
  unknownFields
    = Lens.Family2.Unchecked.lens
        _TsRow'_unknownFields
        (\ x__ y__ -> x__ {_TsRow'_unknownFields = y__})
  defMessage
    = TsRow'_constructor
        {_TsRow'cells = Data.Vector.Generic.empty,
         _TsRow'_unknownFields = []}
  parseMessage
    = let
        loop ::
          TsRow
          -> Data.ProtoLens.Encoding.Growing.Growing Data.Vector.Vector Data.ProtoLens.Encoding.Growing.RealWorld TsCell
             -> Data.ProtoLens.Encoding.Bytes.Parser TsRow
        loop x mutable'cells
          = do end <- Data.ProtoLens.Encoding.Bytes.atEnd
               if end then
                   do frozen'cells <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                        (Data.ProtoLens.Encoding.Growing.unsafeFreeze mutable'cells)
                      (let missing = []
                       in
                         if Prelude.null missing then
                             Prelude.return ()
                         else
                             Prelude.fail
                               ((Prelude.++)
                                  "Missing required fields: "
                                  (Prelude.show (missing :: [Prelude.String]))))
                      Prelude.return
                        (Lens.Family2.over
                           Data.ProtoLens.unknownFields
                           (\ !t -> Prelude.reverse t)
                           (Lens.Family2.set
                              (Data.ProtoLens.Field.field @"vec'cells") frozen'cells x))
               else
                   do tag <- Data.ProtoLens.Encoding.Bytes.getVarInt
                      case tag of
                        10
                          -> do !y <- (Data.ProtoLens.Encoding.Bytes.<?>)
                                        (do len <- Data.ProtoLens.Encoding.Bytes.getVarInt
                                            Data.ProtoLens.Encoding.Bytes.isolate
                                              (Prelude.fromIntegral len)
                                              Data.ProtoLens.parseMessage)
                                        "cells"
                                v <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                       (Data.ProtoLens.Encoding.Growing.append mutable'cells y)
                                loop x v
                        wire
                          -> do !y <- Data.ProtoLens.Encoding.Wire.parseTaggedValueFromWire
                                        wire
                                loop
                                  (Lens.Family2.over
                                     Data.ProtoLens.unknownFields (\ !t -> (:) y t) x)
                                  mutable'cells
      in
        (Data.ProtoLens.Encoding.Bytes.<?>)
          (do mutable'cells <- Data.ProtoLens.Encoding.Parser.Unsafe.unsafeLiftIO
                                 Data.ProtoLens.Encoding.Growing.new
              loop Data.ProtoLens.defMessage mutable'cells)
          "TsRow"
  buildMessage
    = \ _x
        -> (Data.Monoid.<>)
             (Data.ProtoLens.Encoding.Bytes.foldMapBuilder
                (\ _v
                   -> (Data.Monoid.<>)
                        (Data.ProtoLens.Encoding.Bytes.putVarInt 10)
                        ((Prelude..)
                           (\ bs
                              -> (Data.Monoid.<>)
                                   (Data.ProtoLens.Encoding.Bytes.putVarInt
                                      (Prelude.fromIntegral (Data.ByteString.length bs)))
                                   (Data.ProtoLens.Encoding.Bytes.putBytes bs))
                           Data.ProtoLens.encodeMessage
                           _v))
                (Lens.Family2.view (Data.ProtoLens.Field.field @"vec'cells") _x))
             (Data.ProtoLens.Encoding.Wire.buildFieldSet
                (Lens.Family2.view Data.ProtoLens.unknownFields _x))
instance Control.DeepSeq.NFData TsRow where
  rnf
    = \ x__
        -> Control.DeepSeq.deepseq
             (_TsRow'_unknownFields x__)
             (Control.DeepSeq.deepseq (_TsRow'cells x__) ())
packedFileDescriptor :: Data.ByteString.ByteString
packedFileDescriptor
  = "\n\
    \\n\
    \riak.proto\"@\n\
    \\fRpbErrorResp\DC2\SYN\n\
    \\ACKerrmsg\CAN\SOH \STX(\fR\ACKerrmsg\DC2\CAN\n\
    \\aerrcode\CAN\STX \STX(\rR\aerrcode\"Q\n\
    \\DC4RpbGetServerInfoResp\DC2\DC2\n\
    \\EOTnode\CAN\SOH \SOH(\fR\EOTnode\DC2%\n\
    \\SOserver_version\CAN\STX \SOH(\fR\rserverVersion\"1\n\
    \\aRpbPair\DC2\DLE\n\
    \\ETXkey\CAN\SOH \STX(\fR\ETXkey\DC2\DC4\n\
    \\ENQvalue\CAN\STX \SOH(\fR\ENQvalue\"=\n\
    \\SIRpbGetBucketReq\DC2\SYN\n\
    \\ACKbucket\CAN\SOH \STX(\fR\ACKbucket\DC2\DC2\n\
    \\EOTtype\CAN\STX \SOH(\fR\EOTtype\"9\n\
    \\DLERpbGetBucketResp\DC2%\n\
    \\ENQprops\CAN\SOH \STX(\v2\SI.RpbBucketPropsR\ENQprops\"d\n\
    \\SIRpbSetBucketReq\DC2\SYN\n\
    \\ACKbucket\CAN\SOH \STX(\fR\ACKbucket\DC2%\n\
    \\ENQprops\CAN\STX \STX(\v2\SI.RpbBucketPropsR\ENQprops\DC2\DC2\n\
    \\EOTtype\CAN\ETX \SOH(\fR\EOTtype\"?\n\
    \\DC1RpbResetBucketReq\DC2\SYN\n\
    \\ACKbucket\CAN\SOH \STX(\fR\ACKbucket\DC2\DC2\n\
    \\EOTtype\CAN\STX \SOH(\fR\EOTtype\")\n\
    \\DC3RpbGetBucketTypeReq\DC2\DC2\n\
    \\EOTtype\CAN\SOH \STX(\fR\EOTtype\"P\n\
    \\DC3RpbSetBucketTypeReq\DC2\DC2\n\
    \\EOTtype\CAN\SOH \STX(\fR\EOTtype\DC2%\n\
    \\ENQprops\CAN\STX \STX(\v2\SI.RpbBucketPropsR\ENQprops\"?\n\
    \\tRpbModFun\DC2\SYN\n\
    \\ACKmodule\CAN\SOH \STX(\fR\ACKmodule\DC2\SUB\n\
    \\bfunction\CAN\STX \STX(\fR\bfunction\"G\n\
    \\rRpbCommitHook\DC2\"\n\
    \\ACKmodfun\CAN\SOH \SOH(\v2\n\
    \.RpbModFunR\ACKmodfun\DC2\DC2\n\
    \\EOTname\CAN\STX \SOH(\fR\EOTname\"\245\a\n\
    \\SORpbBucketProps\DC2\DC3\n\
    \\ENQn_val\CAN\SOH \SOH(\rR\EOTnVal\DC2\GS\n\
    \\n\
    \allow_mult\CAN\STX \SOH(\bR\tallowMult\DC2&\n\
    \\SIlast_write_wins\CAN\ETX \SOH(\bR\rlastWriteWins\DC2,\n\
    \\tprecommit\CAN\EOT \ETX(\v2\SO.RpbCommitHookR\tprecommit\DC2*\n\
    \\rhas_precommit\CAN\ENQ \SOH(\b:\ENQfalseR\fhasPrecommit\DC2.\n\
    \\n\
    \postcommit\CAN\ACK \ETX(\v2\SO.RpbCommitHookR\n\
    \postcommit\DC2,\n\
    \\SOhas_postcommit\CAN\a \SOH(\b:\ENQfalseR\rhasPostcommit\DC2-\n\
    \\fchash_keyfun\CAN\b \SOH(\v2\n\
    \.RpbModFunR\vchashKeyfun\DC2$\n\
    \\alinkfun\CAN\t \SOH(\v2\n\
    \.RpbModFunR\alinkfun\DC2\GS\n\
    \\n\
    \old_vclock\CAN\n\
    \ \SOH(\rR\toldVclock\DC2!\n\
    \\fyoung_vclock\CAN\v \SOH(\rR\vyoungVclock\DC2\GS\n\
    \\n\
    \big_vclock\CAN\f \SOH(\rR\tbigVclock\DC2!\n\
    \\fsmall_vclock\CAN\r \SOH(\rR\vsmallVclock\DC2\SO\n\
    \\STXpr\CAN\SO \SOH(\rR\STXpr\DC2\f\n\
    \\SOHr\CAN\SI \SOH(\rR\SOHr\DC2\f\n\
    \\SOHw\CAN\DLE \SOH(\rR\SOHw\DC2\SO\n\
    \\STXpw\CAN\DC1 \SOH(\rR\STXpw\DC2\SO\n\
    \\STXdw\CAN\DC2 \SOH(\rR\STXdw\DC2\SO\n\
    \\STXrw\CAN\DC3 \SOH(\rR\STXrw\DC2!\n\
    \\fbasic_quorum\CAN\DC4 \SOH(\bR\vbasicQuorum\DC2\US\n\
    \\vnotfound_ok\CAN\NAK \SOH(\bR\n\
    \notfoundOk\DC2\CAN\n\
    \\abackend\CAN\SYN \SOH(\fR\abackend\DC2\SYN\n\
    \\ACKsearch\CAN\ETB \SOH(\bR\ACKsearch\DC2/\n\
    \\EOTrepl\CAN\CAN \SOH(\SO2\ESC.RpbBucketProps.RpbReplModeR\EOTrepl\DC2!\n\
    \\fsearch_index\CAN\EM \SOH(\fR\vsearchIndex\DC2\SUB\n\
    \\bdatatype\CAN\SUB \SOH(\fR\bdatatype\DC2\RS\n\
    \\n\
    \consistent\CAN\ESC \SOH(\bR\n\
    \consistent\DC2\GS\n\
    \\n\
    \write_once\CAN\FS \SOH(\bR\twriteOnce\DC2#\n\
    \\rhll_precision\CAN\GS \SOH(\rR\fhllPrecision\DC2\DLE\n\
    \\ETXttl\CAN\RS \SOH(\rR\ETXttl\">\n\
    \\vRpbReplMode\DC2\t\n\
    \\ENQFALSE\DLE\NUL\DC2\f\n\
    \\bREALTIME\DLE\SOH\DC2\f\n\
    \\bFULLSYNC\DLE\STX\DC2\b\n\
    \\EOTTRUE\DLE\ETX\"<\n\
    \\n\
    \RpbAuthReq\DC2\DC2\n\
    \\EOTuser\CAN\SOH \STX(\fR\EOTuser\DC2\SUB\n\
    \\bpassword\CAN\STX \STX(\fR\bpassword\"\145\SOH\n\
    \\bMapField\DC2\DC2\n\
    \\EOTname\CAN\SOH \STX(\fR\EOTname\DC2*\n\
    \\EOTtype\CAN\STX \STX(\SO2\SYN.MapField.MapFieldTypeR\EOTtype\"E\n\
    \\fMapFieldType\DC2\v\n\
    \\aCOUNTER\DLE\SOH\DC2\a\n\
    \\ETXSET\DLE\STX\DC2\f\n\
    \\bREGISTER\DLE\ETX\DC2\b\n\
    \\EOTFLAG\DLE\EOT\DC2\a\n\
    \\ETXMAP\DLE\ENQ\"\219\SOH\n\
    \\bMapEntry\DC2\US\n\
    \\ENQfield\CAN\SOH \STX(\v2\t.MapFieldR\ENQfield\DC2#\n\
    \\rcounter_value\CAN\STX \SOH(\DC2R\fcounterValue\DC2\ESC\n\
    \\tset_value\CAN\ETX \ETX(\fR\bsetValue\DC2%\n\
    \\SOregister_value\CAN\EOT \SOH(\fR\rregisterValue\DC2\GS\n\
    \\n\
    \flag_value\CAN\ENQ \SOH(\bR\tflagValue\DC2&\n\
    \\tmap_value\CAN\ACK \ETX(\v2\t.MapEntryR\bmapValue\"\175\STX\n\
    \\n\
    \DtFetchReq\DC2\SYN\n\
    \\ACKbucket\CAN\SOH \STX(\fR\ACKbucket\DC2\DLE\n\
    \\ETXkey\CAN\STX \STX(\fR\ETXkey\DC2\DC2\n\
    \\EOTtype\CAN\ETX \STX(\fR\EOTtype\DC2\f\n\
    \\SOHr\CAN\EOT \SOH(\rR\SOHr\DC2\SO\n\
    \\STXpr\CAN\ENQ \SOH(\rR\STXpr\DC2!\n\
    \\fbasic_quorum\CAN\ACK \SOH(\bR\vbasicQuorum\DC2\US\n\
    \\vnotfound_ok\CAN\a \SOH(\bR\n\
    \notfoundOk\DC2\CAN\n\
    \\atimeout\CAN\b \SOH(\rR\atimeout\DC2#\n\
    \\rsloppy_quorum\CAN\t \SOH(\bR\fsloppyQuorum\DC2\DC3\n\
    \\ENQn_val\CAN\n\
    \ \SOH(\rR\EOTnVal\DC2-\n\
    \\SIinclude_context\CAN\v \SOH(\b:\EOTtrueR\SOincludeContext\"\175\SOH\n\
    \\aDtValue\DC2#\n\
    \\rcounter_value\CAN\SOH \SOH(\DC2R\fcounterValue\DC2\ESC\n\
    \\tset_value\CAN\STX \ETX(\fR\bsetValue\DC2&\n\
    \\tmap_value\CAN\ETX \ETX(\v2\t.MapEntryR\bmapValue\DC2\ESC\n\
    \\thll_value\CAN\EOT \SOH(\EOTR\bhllValue\DC2\GS\n\
    \\n\
    \gset_value\CAN\ENQ \ETX(\fR\tgsetValue\"\176\SOH\n\
    \\vDtFetchResp\DC2\CAN\n\
    \\acontext\CAN\SOH \SOH(\fR\acontext\DC2)\n\
    \\EOTtype\CAN\STX \STX(\SO2\NAK.DtFetchResp.DataTypeR\EOTtype\DC2\RS\n\
    \\ENQvalue\CAN\ETX \SOH(\v2\b.DtValueR\ENQvalue\"<\n\
    \\bDataType\DC2\v\n\
    \\aCOUNTER\DLE\SOH\DC2\a\n\
    \\ETXSET\DLE\STX\DC2\a\n\
    \\ETXMAP\DLE\ETX\DC2\a\n\
    \\ETXHLL\DLE\EOT\DC2\b\n\
    \\EOTGSET\DLE\ENQ\")\n\
    \\tCounterOp\DC2\FS\n\
    \\tincrement\CAN\SOH \SOH(\DC2R\tincrement\"5\n\
    \\ENQSetOp\DC2\DC2\n\
    \\EOTadds\CAN\SOH \ETX(\fR\EOTadds\DC2\CAN\n\
    \\aremoves\CAN\STX \ETX(\fR\aremoves\"\FS\n\
    \\ACKGSetOp\DC2\DC2\n\
    \\EOTadds\CAN\SOH \ETX(\fR\EOTadds\"\ESC\n\
    \\ENQHllOp\DC2\DC2\n\
    \\EOTadds\CAN\SOH \ETX(\fR\EOTadds\"\133\STX\n\
    \\tMapUpdate\DC2\US\n\
    \\ENQfield\CAN\SOH \STX(\v2\t.MapFieldR\ENQfield\DC2)\n\
    \\n\
    \counter_op\CAN\STX \SOH(\v2\n\
    \.CounterOpR\tcounterOp\DC2\GS\n\
    \\ACKset_op\CAN\ETX \SOH(\v2\ACK.SetOpR\ENQsetOp\DC2\US\n\
    \\vregister_op\CAN\EOT \SOH(\fR\n\
    \registerOp\DC2*\n\
    \\aflag_op\CAN\ENQ \SOH(\SO2\DC1.MapUpdate.FlagOpR\ACKflagOp\DC2\GS\n\
    \\ACKmap_op\CAN\ACK \SOH(\v2\ACK.MapOpR\ENQmapOp\"!\n\
    \\ACKFlagOp\DC2\n\
    \\n\
    \\ACKENABLE\DLE\SOH\DC2\v\n\
    \\aDISABLE\DLE\STX\"R\n\
    \\ENQMapOp\DC2#\n\
    \\aremoves\CAN\SOH \ETX(\v2\t.MapFieldR\aremoves\DC2$\n\
    \\aupdates\CAN\STX \ETX(\v2\n\
    \.MapUpdateR\aupdates\"\176\SOH\n\
    \\EOTDtOp\DC2)\n\
    \\n\
    \counter_op\CAN\SOH \SOH(\v2\n\
    \.CounterOpR\tcounterOp\DC2\GS\n\
    \\ACKset_op\CAN\STX \SOH(\v2\ACK.SetOpR\ENQsetOp\DC2\GS\n\
    \\ACKmap_op\CAN\ETX \SOH(\v2\ACK.MapOpR\ENQmapOp\DC2\GS\n\
    \\ACKhll_op\CAN\EOT \SOH(\v2\ACK.HllOpR\ENQhllOp\DC2 \n\
    \\agset_op\CAN\ENQ \SOH(\v2\a.GSetOpR\ACKgsetOp\"\213\STX\n\
    \\vDtUpdateReq\DC2\SYN\n\
    \\ACKbucket\CAN\SOH \STX(\fR\ACKbucket\DC2\DLE\n\
    \\ETXkey\CAN\STX \SOH(\fR\ETXkey\DC2\DC2\n\
    \\EOTtype\CAN\ETX \STX(\fR\EOTtype\DC2\CAN\n\
    \\acontext\CAN\EOT \SOH(\fR\acontext\DC2\NAK\n\
    \\STXop\CAN\ENQ \STX(\v2\ENQ.DtOpR\STXop\DC2\f\n\
    \\SOHw\CAN\ACK \SOH(\rR\SOHw\DC2\SO\n\
    \\STXdw\CAN\a \SOH(\rR\STXdw\DC2\SO\n\
    \\STXpw\CAN\b \SOH(\rR\STXpw\DC2&\n\
    \\vreturn_body\CAN\t \SOH(\b:\ENQfalseR\n\
    \returnBody\DC2\CAN\n\
    \\atimeout\CAN\n\
    \ \SOH(\rR\atimeout\DC2#\n\
    \\rsloppy_quorum\CAN\v \SOH(\bR\fsloppyQuorum\DC2\DC3\n\
    \\ENQn_val\CAN\f \SOH(\rR\EOTnVal\DC2-\n\
    \\SIinclude_context\CAN\r \SOH(\b:\EOTtrueR\SOincludeContext\"\224\SOH\n\
    \\fDtUpdateResp\DC2\DLE\n\
    \\ETXkey\CAN\SOH \SOH(\fR\ETXkey\DC2\CAN\n\
    \\acontext\CAN\STX \SOH(\fR\acontext\DC2#\n\
    \\rcounter_value\CAN\ETX \SOH(\DC2R\fcounterValue\DC2\ESC\n\
    \\tset_value\CAN\EOT \ETX(\fR\bsetValue\DC2&\n\
    \\tmap_value\CAN\ENQ \ETX(\v2\t.MapEntryR\bmapValue\DC2\ESC\n\
    \\thll_value\CAN\ACK \SOH(\EOTR\bhllValue\DC2\GS\n\
    \\n\
    \gset_value\CAN\a \ETX(\fR\tgsetValue\"\r\n\
    \\vRpbAuthResp\"\f\n\
    \\n\
    \RpbDelResp\"\DC3\n\
    \\DC1RpbGetClientIdReq\"\NAK\n\
    \\DC3RpbGetServerInfoReq\"\f\n\
    \\n\
    \RpbPingReq\"\r\n\
    \\vRpbPingResp\"\DC4\n\
    \\DC2RpbResetBucketResp\"\DC2\n\
    \\DLERpbSetBucketResp\"1\n\
    \\DC2RpbGetClientIdResp\DC2\ESC\n\
    \\tclient_id\CAN\SOH \STX(\fR\bclientId\"0\n\
    \\DC1RpbSetClientIdReq\DC2\ESC\n\
    \\tclient_id\CAN\SOH \STX(\fR\bclientId\"\218\STX\n\
    \\tRpbGetReq\DC2\SYN\n\
    \\ACKbucket\CAN\SOH \STX(\fR\ACKbucket\DC2\DLE\n\
    \\ETXkey\CAN\STX \STX(\fR\ETXkey\DC2\f\n\
    \\SOHr\CAN\ETX \SOH(\rR\SOHr\DC2\SO\n\
    \\STXpr\CAN\EOT \SOH(\rR\STXpr\DC2!\n\
    \\fbasic_quorum\CAN\ENQ \SOH(\bR\vbasicQuorum\DC2\US\n\
    \\vnotfound_ok\CAN\ACK \SOH(\bR\n\
    \notfoundOk\DC2\US\n\
    \\vif_modified\CAN\a \SOH(\fR\n\
    \ifModified\DC2\DC2\n\
    \\EOThead\CAN\b \SOH(\bR\EOThead\DC2$\n\
    \\rdeletedvclock\CAN\t \SOH(\bR\rdeletedvclock\DC2\CAN\n\
    \\atimeout\CAN\n\
    \ \SOH(\rR\atimeout\DC2#\n\
    \\rsloppy_quorum\CAN\v \SOH(\bR\fsloppyQuorum\DC2\DC3\n\
    \\ENQn_val\CAN\f \SOH(\rR\EOTnVal\DC2\DC2\n\
    \\EOTtype\CAN\r \SOH(\fR\EOTtype\"i\n\
    \\n\
    \RpbGetResp\DC2%\n\
    \\acontent\CAN\SOH \ETX(\v2\v.RpbContentR\acontent\DC2\SYN\n\
    \\ACKvclock\CAN\STX \SOH(\fR\ACKvclock\DC2\FS\n\
    \\tunchanged\CAN\ETX \SOH(\bR\tunchanged\"\172\ETX\n\
    \\tRpbPutReq\DC2\SYN\n\
    \\ACKbucket\CAN\SOH \STX(\fR\ACKbucket\DC2\DLE\n\
    \\ETXkey\CAN\STX \SOH(\fR\ETXkey\DC2\SYN\n\
    \\ACKvclock\CAN\ETX \SOH(\fR\ACKvclock\DC2%\n\
    \\acontent\CAN\EOT \STX(\v2\v.RpbContentR\acontent\DC2\f\n\
    \\SOHw\CAN\ENQ \SOH(\rR\SOHw\DC2\SO\n\
    \\STXdw\CAN\ACK \SOH(\rR\STXdw\DC2\US\n\
    \\vreturn_body\CAN\a \SOH(\bR\n\
    \returnBody\DC2\SO\n\
    \\STXpw\CAN\b \SOH(\rR\STXpw\DC2&\n\
    \\SIif_not_modified\CAN\t \SOH(\bR\rifNotModified\DC2\"\n\
    \\rif_none_match\CAN\n\
    \ \SOH(\bR\vifNoneMatch\DC2\US\n\
    \\vreturn_head\CAN\v \SOH(\bR\n\
    \returnHead\DC2\CAN\n\
    \\atimeout\CAN\f \SOH(\rR\atimeout\DC2\DC2\n\
    \\EOTasis\CAN\r \SOH(\bR\EOTasis\DC2#\n\
    \\rsloppy_quorum\CAN\SO \SOH(\bR\fsloppyQuorum\DC2\DC3\n\
    \\ENQn_val\CAN\SI \SOH(\rR\EOTnVal\DC2\DC2\n\
    \\EOTtype\CAN\DLE \SOH(\fR\EOTtype\"]\n\
    \\n\
    \RpbPutResp\DC2%\n\
    \\acontent\CAN\SOH \ETX(\v2\v.RpbContentR\acontent\DC2\SYN\n\
    \\ACKvclock\CAN\STX \SOH(\fR\ACKvclock\DC2\DLE\n\
    \\ETXkey\CAN\ETX \SOH(\fR\ETXkey\"\145\STX\n\
    \\tRpbDelReq\DC2\SYN\n\
    \\ACKbucket\CAN\SOH \STX(\fR\ACKbucket\DC2\DLE\n\
    \\ETXkey\CAN\STX \STX(\fR\ETXkey\DC2\SO\n\
    \\STXrw\CAN\ETX \SOH(\rR\STXrw\DC2\SYN\n\
    \\ACKvclock\CAN\EOT \SOH(\fR\ACKvclock\DC2\f\n\
    \\SOHr\CAN\ENQ \SOH(\rR\SOHr\DC2\f\n\
    \\SOHw\CAN\ACK \SOH(\rR\SOHw\DC2\SO\n\
    \\STXpr\CAN\a \SOH(\rR\STXpr\DC2\SO\n\
    \\STXpw\CAN\b \SOH(\rR\STXpw\DC2\SO\n\
    \\STXdw\CAN\t \SOH(\rR\STXdw\DC2\CAN\n\
    \\atimeout\CAN\n\
    \ \SOH(\rR\atimeout\DC2#\n\
    \\rsloppy_quorum\CAN\v \SOH(\bR\fsloppyQuorum\DC2\DC3\n\
    \\ENQn_val\CAN\f \SOH(\rR\EOTnVal\DC2\DC2\n\
    \\EOTtype\CAN\r \SOH(\fR\EOTtype\"Y\n\
    \\DC1RpbListBucketsReq\DC2\CAN\n\
    \\atimeout\CAN\SOH \SOH(\rR\atimeout\DC2\SYN\n\
    \\ACKstream\CAN\STX \SOH(\bR\ACKstream\DC2\DC2\n\
    \\EOTtype\CAN\ETX \SOH(\fR\EOTtype\"B\n\
    \\DC2RpbListBucketsResp\DC2\CAN\n\
    \\abuckets\CAN\SOH \ETX(\fR\abuckets\DC2\DC2\n\
    \\EOTdone\CAN\STX \SOH(\bR\EOTdone\"V\n\
    \\SORpbListKeysReq\DC2\SYN\n\
    \\ACKbucket\CAN\SOH \STX(\fR\ACKbucket\DC2\CAN\n\
    \\atimeout\CAN\STX \SOH(\rR\atimeout\DC2\DC2\n\
    \\EOTtype\CAN\ETX \SOH(\fR\EOTtype\"9\n\
    \\SIRpbListKeysResp\DC2\DC2\n\
    \\EOTkeys\CAN\SOH \ETX(\fR\EOTkeys\DC2\DC2\n\
    \\EOTdone\CAN\STX \SOH(\bR\EOTdone\"K\n\
    \\fRpbMapRedReq\DC2\CAN\n\
    \\arequest\CAN\SOH \STX(\fR\arequest\DC2!\n\
    \\fcontent_type\CAN\STX \STX(\fR\vcontentType\"U\n\
    \\rRpbMapRedResp\DC2\DC4\n\
    \\ENQphase\CAN\SOH \SOH(\rR\ENQphase\DC2\SUB\n\
    \\bresponse\CAN\STX \SOH(\fR\bresponse\DC2\DC2\n\
    \\EOTdone\CAN\ETX \SOH(\bR\EOTdone\"\155\EOT\n\
    \\vRpbIndexReq\DC2\SYN\n\
    \\ACKbucket\CAN\SOH \STX(\fR\ACKbucket\DC2\DC4\n\
    \\ENQindex\CAN\STX \STX(\fR\ENQindex\DC21\n\
    \\ENQqtype\CAN\ETX \STX(\SO2\ESC.RpbIndexReq.IndexQueryTypeR\ENQqtype\DC2\DLE\n\
    \\ETXkey\CAN\EOT \SOH(\fR\ETXkey\DC2\ESC\n\
    \\trange_min\CAN\ENQ \SOH(\fR\brangeMin\DC2\ESC\n\
    \\trange_max\CAN\ACK \SOH(\fR\brangeMax\DC2!\n\
    \\freturn_terms\CAN\a \SOH(\bR\vreturnTerms\DC2\SYN\n\
    \\ACKstream\CAN\b \SOH(\bR\ACKstream\DC2\US\n\
    \\vmax_results\CAN\t \SOH(\rR\n\
    \maxResults\DC2\"\n\
    \\fcontinuation\CAN\n\
    \ \SOH(\fR\fcontinuation\DC2\CAN\n\
    \\atimeout\CAN\v \SOH(\rR\atimeout\DC2\DC2\n\
    \\EOTtype\CAN\f \SOH(\fR\EOTtype\DC2\GS\n\
    \\n\
    \term_regex\CAN\r \SOH(\fR\ttermRegex\DC2'\n\
    \\SIpagination_sort\CAN\SO \SOH(\bR\SOpaginationSort\DC2#\n\
    \\rcover_context\CAN\SI \SOH(\fR\fcoverContext\DC2\US\n\
    \\vreturn_body\CAN\DLE \SOH(\bR\n\
    \returnBody\"#\n\
    \\SOIndexQueryType\DC2\ACK\n\
    \\STXeq\DLE\NUL\DC2\t\n\
    \\ENQrange\DLE\SOH\"~\n\
    \\fRpbIndexResp\DC2\DC2\n\
    \\EOTkeys\CAN\SOH \ETX(\fR\EOTkeys\DC2\"\n\
    \\aresults\CAN\STX \ETX(\v2\b.RpbPairR\aresults\DC2\"\n\
    \\fcontinuation\CAN\ETX \SOH(\fR\fcontinuation\DC2\DC2\n\
    \\EOTdone\CAN\EOT \SOH(\bR\EOTdone\"u\n\
    \\DLERpbIndexBodyResp\DC2)\n\
    \\aobjects\CAN\SOH \ETX(\v2\SI.RpbIndexObjectR\aobjects\DC2\"\n\
    \\fcontinuation\CAN\STX \SOH(\fR\fcontinuation\DC2\DC2\n\
    \\EOTdone\CAN\ETX \SOH(\bR\EOTdone\"\189\STX\n\
    \\SORpbCSBucketReq\DC2\SYN\n\
    \\ACKbucket\CAN\SOH \STX(\fR\ACKbucket\DC2\ESC\n\
    \\tstart_key\CAN\STX \STX(\fR\bstartKey\DC2\ETB\n\
    \\aend_key\CAN\ETX \SOH(\fR\ACKendKey\DC2#\n\
    \\n\
    \start_incl\CAN\EOT \SOH(\b:\EOTtrueR\tstartIncl\DC2 \n\
    \\bend_incl\CAN\ENQ \SOH(\b:\ENQfalseR\aendIncl\DC2\"\n\
    \\fcontinuation\CAN\ACK \SOH(\fR\fcontinuation\DC2\US\n\
    \\vmax_results\CAN\a \SOH(\rR\n\
    \maxResults\DC2\CAN\n\
    \\atimeout\CAN\b \SOH(\rR\atimeout\DC2\DC2\n\
    \\EOTtype\CAN\t \SOH(\fR\EOTtype\DC2#\n\
    \\rcover_context\CAN\n\
    \ \SOH(\fR\fcoverContext\"t\n\
    \\SIRpbCSBucketResp\DC2)\n\
    \\aobjects\CAN\SOH \ETX(\v2\SI.RpbIndexObjectR\aobjects\DC2\"\n\
    \\fcontinuation\CAN\STX \SOH(\fR\fcontinuation\DC2\DC2\n\
    \\EOTdone\CAN\ETX \SOH(\bR\EOTdone\"G\n\
    \\SORpbIndexObject\DC2\DLE\n\
    \\ETXkey\CAN\SOH \STX(\fR\ETXkey\DC2#\n\
    \\ACKobject\CAN\STX \STX(\v2\v.RpbGetRespR\ACKobject\"\245\STX\n\
    \\n\
    \RpbContent\DC2\DC4\n\
    \\ENQvalue\CAN\SOH \STX(\fR\ENQvalue\DC2!\n\
    \\fcontent_type\CAN\STX \SOH(\fR\vcontentType\DC2\CAN\n\
    \\acharset\CAN\ETX \SOH(\fR\acharset\DC2)\n\
    \\DLEcontent_encoding\CAN\EOT \SOH(\fR\SIcontentEncoding\DC2\DC2\n\
    \\EOTvtag\CAN\ENQ \SOH(\fR\EOTvtag\DC2\RS\n\
    \\ENQlinks\CAN\ACK \ETX(\v2\b.RpbLinkR\ENQlinks\DC2\EM\n\
    \\blast_mod\CAN\a \SOH(\rR\alastMod\DC2$\n\
    \\SOlast_mod_usecs\CAN\b \SOH(\rR\flastModUsecs\DC2$\n\
    \\busermeta\CAN\t \ETX(\v2\b.RpbPairR\busermeta\DC2\"\n\
    \\aindexes\CAN\n\
    \ \ETX(\v2\b.RpbPairR\aindexes\DC2\CAN\n\
    \\adeleted\CAN\v \SOH(\bR\adeleted\DC2\DLE\n\
    \\ETXttl\CAN\f \SOH(\rR\ETXttl\"E\n\
    \\aRpbLink\DC2\SYN\n\
    \\ACKbucket\CAN\SOH \SOH(\fR\ACKbucket\DC2\DLE\n\
    \\ETXkey\CAN\STX \SOH(\fR\ETXkey\DC2\DLE\n\
    \\ETXtag\CAN\ETX \SOH(\fR\ETXtag\"\167\SOH\n\
    \\DC3RpbCounterUpdateReq\DC2\SYN\n\
    \\ACKbucket\CAN\SOH \STX(\fR\ACKbucket\DC2\DLE\n\
    \\ETXkey\CAN\STX \STX(\fR\ETXkey\DC2\SYN\n\
    \\ACKamount\CAN\ETX \STX(\DC2R\ACKamount\DC2\f\n\
    \\SOHw\CAN\EOT \SOH(\rR\SOHw\DC2\SO\n\
    \\STXdw\CAN\ENQ \SOH(\rR\STXdw\DC2\SO\n\
    \\STXpw\CAN\ACK \SOH(\rR\STXpw\DC2 \n\
    \\vreturnvalue\CAN\a \SOH(\bR\vreturnvalue\",\n\
    \\DC4RpbCounterUpdateResp\DC2\DC4\n\
    \\ENQvalue\CAN\SOH \SOH(\DC2R\ENQvalue\"\158\SOH\n\
    \\DLERpbCounterGetReq\DC2\SYN\n\
    \\ACKbucket\CAN\SOH \STX(\fR\ACKbucket\DC2\DLE\n\
    \\ETXkey\CAN\STX \STX(\fR\ETXkey\DC2\f\n\
    \\SOHr\CAN\ETX \SOH(\rR\SOHr\DC2\SO\n\
    \\STXpr\CAN\EOT \SOH(\rR\STXpr\DC2!\n\
    \\fbasic_quorum\CAN\ENQ \SOH(\bR\vbasicQuorum\DC2\US\n\
    \\vnotfound_ok\CAN\ACK \SOH(\bR\n\
    \notfoundOk\")\n\
    \\DC1RpbCounterGetResp\DC2\DC4\n\
    \\ENQvalue\CAN\SOH \SOH(\DC2R\ENQvalue\"Z\n\
    \\SUBRpbGetBucketKeyPreflistReq\DC2\SYN\n\
    \\ACKbucket\CAN\SOH \STX(\fR\ACKbucket\DC2\DLE\n\
    \\ETXkey\CAN\STX \STX(\fR\ETXkey\DC2\DC2\n\
    \\EOTtype\CAN\ETX \SOH(\fR\EOTtype\"T\n\
    \\ESCRpbGetBucketKeyPreflistResp\DC25\n\
    \\bpreflist\CAN\SOH \ETX(\v2\EM.RpbBucketKeyPreflistItemR\bpreflist\"f\n\
    \\CANRpbBucketKeyPreflistItem\DC2\FS\n\
    \\tpartition\CAN\SOH \STX(\ETXR\tpartition\DC2\DC2\n\
    \\EOTnode\CAN\STX \STX(\fR\EOTnode\DC2\CAN\n\
    \\aprimary\CAN\ETX \STX(\bR\aprimary\"\181\SOH\n\
    \\SORpbCoverageReq\DC2\DC2\n\
    \\EOTtype\CAN\SOH \SOH(\fR\EOTtype\DC2\SYN\n\
    \\ACKbucket\CAN\STX \STX(\fR\ACKbucket\DC2%\n\
    \\SOmin_partitions\CAN\ETX \SOH(\rR\rminPartitions\DC2#\n\
    \\rreplace_cover\CAN\EOT \SOH(\fR\freplaceCover\DC2+\n\
    \\DC1unavailable_cover\CAN\ENQ \ETX(\fR\DLEunavailableCover\">\n\
    \\SIRpbCoverageResp\DC2+\n\
    \\aentries\CAN\SOH \ETX(\v2\DC1.RpbCoverageEntryR\aentries\"\128\SOH\n\
    \\DLERpbCoverageEntry\DC2\SO\n\
    \\STXip\CAN\SOH \STX(\fR\STXip\DC2\DC2\n\
    \\EOTport\CAN\STX \STX(\rR\EOTport\DC2#\n\
    \\rkeyspace_desc\CAN\ETX \SOH(\fR\fkeyspaceDesc\DC2#\n\
    \\rcover_context\CAN\EOT \STX(\fR\fcoverContext\"0\n\
    \\fRpbSearchDoc\DC2 \n\
    \\ACKfields\CAN\SOH \ETX(\v2\b.RpbPairR\ACKfields\"\215\SOH\n\
    \\DC1RpbSearchQueryReq\DC2\f\n\
    \\SOHq\CAN\SOH \STX(\fR\SOHq\DC2\DC4\n\
    \\ENQindex\CAN\STX \STX(\fR\ENQindex\DC2\DC2\n\
    \\EOTrows\CAN\ETX \SOH(\rR\EOTrows\DC2\DC4\n\
    \\ENQstart\CAN\EOT \SOH(\rR\ENQstart\DC2\DC2\n\
    \\EOTsort\CAN\ENQ \SOH(\fR\EOTsort\DC2\SYN\n\
    \\ACKfilter\CAN\ACK \SOH(\fR\ACKfilter\DC2\SO\n\
    \\STXdf\CAN\a \SOH(\fR\STXdf\DC2\SO\n\
    \\STXop\CAN\b \SOH(\fR\STXop\DC2\SO\n\
    \\STXfl\CAN\t \ETX(\fR\STXfl\DC2\CAN\n\
    \\apresort\CAN\n\
    \ \SOH(\fR\apresort\"q\n\
    \\DC2RpbSearchQueryResp\DC2!\n\
    \\EOTdocs\CAN\SOH \ETX(\v2\r.RpbSearchDocR\EOTdocs\DC2\ESC\n\
    \\tmax_score\CAN\STX \SOH(\STXR\bmaxScore\DC2\ESC\n\
    \\tnum_found\CAN\ETX \SOH(\rR\bnumFound\"x\n\
    \\n\
    \TsQueryReq\DC2&\n\
    \\ENQquery\CAN\SOH \SOH(\v2\DLE.TsInterpolationR\ENQquery\DC2\GS\n\
    \\ACKstream\CAN\STX \SOH(\b:\ENQfalseR\ACKstream\DC2#\n\
    \\rcover_context\CAN\ETX \SOH(\fR\fcoverContext\"s\n\
    \\vTsQueryResp\DC2.\n\
    \\acolumns\CAN\SOH \ETX(\v2\DC4.TsColumnDescriptionR\acolumns\DC2\SUB\n\
    \\EOTrows\CAN\STX \ETX(\v2\ACK.TsRowR\EOTrows\DC2\CAN\n\
    \\EOTdone\CAN\ETX \SOH(\b:\EOTtrueR\EOTdone\"U\n\
    \\bTsGetReq\DC2\DC4\n\
    \\ENQtable\CAN\SOH \STX(\fR\ENQtable\DC2\EM\n\
    \\ETXkey\CAN\STX \ETX(\v2\a.TsCellR\ETXkey\DC2\CAN\n\
    \\atimeout\CAN\ETX \SOH(\rR\atimeout\"W\n\
    \\tTsGetResp\DC2.\n\
    \\acolumns\CAN\SOH \ETX(\v2\DC4.TsColumnDescriptionR\acolumns\DC2\SUB\n\
    \\EOTrows\CAN\STX \ETX(\v2\ACK.TsRowR\EOTrows\"l\n\
    \\bTsPutReq\DC2\DC4\n\
    \\ENQtable\CAN\SOH \STX(\fR\ENQtable\DC2.\n\
    \\acolumns\CAN\STX \ETX(\v2\DC4.TsColumnDescriptionR\acolumns\DC2\SUB\n\
    \\EOTrows\CAN\ETX \ETX(\v2\ACK.TsRowR\EOTrows\"\v\n\
    \\tTsPutResp\"m\n\
    \\bTsDelReq\DC2\DC4\n\
    \\ENQtable\CAN\SOH \STX(\fR\ENQtable\DC2\EM\n\
    \\ETXkey\CAN\STX \ETX(\v2\a.TsCellR\ETXkey\DC2\SYN\n\
    \\ACKvclock\CAN\ETX \SOH(\fR\ACKvclock\DC2\CAN\n\
    \\atimeout\CAN\EOT \SOH(\rR\atimeout\"\v\n\
    \\tTsDelResp\"W\n\
    \\SITsInterpolation\DC2\DC2\n\
    \\EOTbase\CAN\SOH \STX(\fR\EOTbase\DC20\n\
    \\SOinterpolations\CAN\STX \ETX(\v2\b.RpbPairR\SOinterpolations\"L\n\
    \\DC3TsColumnDescription\DC2\DC2\n\
    \\EOTname\CAN\SOH \STX(\fR\EOTname\DC2!\n\
    \\EOTtype\CAN\STX \STX(\SO2\r.TsColumnTypeR\EOTtype\"&\n\
    \\ENQTsRow\DC2\GS\n\
    \\ENQcells\CAN\SOH \ETX(\v2\a.TsCellR\ENQcells\"\193\SOH\n\
    \\ACKTsCell\DC2#\n\
    \\rvarchar_value\CAN\SOH \SOH(\fR\fvarcharValue\DC2!\n\
    \\fsint64_value\CAN\STX \SOH(\DC2R\vsint64Value\DC2'\n\
    \\SItimestamp_value\CAN\ETX \SOH(\DC2R\SOtimestampValue\DC2#\n\
    \\rboolean_value\CAN\EOT \SOH(\bR\fbooleanValue\DC2!\n\
    \\fdouble_value\CAN\ENQ \SOH(\SOHR\vdoubleValue\"?\n\
    \\rTsListKeysReq\DC2\DC4\n\
    \\ENQtable\CAN\SOH \STX(\fR\ENQtable\DC2\CAN\n\
    \\atimeout\CAN\STX \SOH(\rR\atimeout\"@\n\
    \\SOTsListKeysResp\DC2\SUB\n\
    \\EOTkeys\CAN\SOH \ETX(\v2\ACK.TsRowR\EOTkeys\DC2\DC2\n\
    \\EOTdone\CAN\STX \SOH(\bR\EOTdone\"\159\SOH\n\
    \\rTsCoverageReq\DC2&\n\
    \\ENQquery\CAN\SOH \SOH(\v2\DLE.TsInterpolationR\ENQquery\DC2\DC4\n\
    \\ENQtable\CAN\STX \STX(\fR\ENQtable\DC2#\n\
    \\rreplace_cover\CAN\ETX \SOH(\fR\freplaceCover\DC2+\n\
    \\DC1unavailable_cover\CAN\EOT \ETX(\fR\DLEunavailableCover\"<\n\
    \\SOTsCoverageResp\DC2*\n\
    \\aentries\CAN\SOH \ETX(\v2\DLE.TsCoverageEntryR\aentries\"z\n\
    \\SITsCoverageEntry\DC2\SO\n\
    \\STXip\CAN\SOH \STX(\fR\STXip\DC2\DC2\n\
    \\EOTport\CAN\STX \STX(\rR\EOTport\DC2#\n\
    \\rcover_context\CAN\ETX \STX(\fR\fcoverContext\DC2\RS\n\
    \\ENQrange\CAN\EOT \SOH(\v2\b.TsRangeR\ENQrange\"\230\SOH\n\
    \\aTsRange\DC2\GS\n\
    \\n\
    \field_name\CAN\SOH \STX(\fR\tfieldName\DC2\US\n\
    \\vlower_bound\CAN\STX \STX(\DC2R\n\
    \lowerBound\DC22\n\
    \\NAKlower_bound_inclusive\CAN\ETX \STX(\bR\DC3lowerBoundInclusive\DC2\US\n\
    \\vupper_bound\CAN\EOT \STX(\DC2R\n\
    \upperBound\DC22\n\
    \\NAKupper_bound_inclusive\CAN\ENQ \STX(\bR\DC3upperBoundInclusive\DC2\DC2\n\
    \\EOTdesc\CAN\ACK \STX(\fR\EOTdesc\"S\n\
    \\DLERpbYokozunaIndex\DC2\DC2\n\
    \\EOTname\CAN\SOH \STX(\fR\EOTname\DC2\SYN\n\
    \\ACKschema\CAN\STX \SOH(\fR\ACKschema\DC2\DC3\n\
    \\ENQn_val\CAN\ETX \SOH(\rR\EOTnVal\",\n\
    \\SYNRpbYokozunaIndexGetReq\DC2\DC2\n\
    \\EOTname\CAN\SOH \SOH(\fR\EOTname\"B\n\
    \\ETBRpbYokozunaIndexGetResp\DC2'\n\
    \\ENQindex\CAN\SOH \ETX(\v2\DC1.RpbYokozunaIndexR\ENQindex\"[\n\
    \\SYNRpbYokozunaIndexPutReq\DC2'\n\
    \\ENQindex\CAN\SOH \STX(\v2\DC1.RpbYokozunaIndexR\ENQindex\DC2\CAN\n\
    \\atimeout\CAN\STX \SOH(\rR\atimeout\"/\n\
    \\EMRpbYokozunaIndexDeleteReq\DC2\DC2\n\
    \\EOTname\CAN\SOH \STX(\fR\EOTname\"A\n\
    \\DC1RpbYokozunaSchema\DC2\DC2\n\
    \\EOTname\CAN\SOH \STX(\fR\EOTname\DC2\CAN\n\
    \\acontent\CAN\STX \SOH(\fR\acontent\"E\n\
    \\ETBRpbYokozunaSchemaPutReq\DC2*\n\
    \\ACKschema\CAN\SOH \STX(\v2\DC2.RpbYokozunaSchemaR\ACKschema\"-\n\
    \\ETBRpbYokozunaSchemaGetReq\DC2\DC2\n\
    \\EOTname\CAN\SOH \STX(\fR\EOTname\"F\n\
    \\CANRpbYokozunaSchemaGetResp\DC2*\n\
    \\ACKschema\CAN\SOH \STX(\v2\DC2.RpbYokozunaSchemaR\ACKschema*Y\n\
    \\fTsColumnType\DC2\v\n\
    \\aVARCHAR\DLE\NUL\DC2\n\
    \\n\
    \\ACKSINT64\DLE\SOH\DC2\n\
    \\n\
    \\ACKDOUBLE\DLE\STX\DC2\r\n\
    \\tTIMESTAMP\DLE\ETX\DC2\v\n\
    \\aBOOLEAN\DLE\EOT\DC2\b\n\
    \\EOTBLOB\DLE\ENQJ\249\188\STX\n\
    \\a\DC2\ENQ\NUL\NUL\246\a\SOH\n\
    \\199\ETX\n\
    \\SOH\f\DC2\ETX\NUL\NUL\DC2\"\188\ETX -------------------------------------------------------------------\n\
    \ riak.proto: Protocol buffers for Riak\n\
    \ -------------------------------------------------------------------\n\
    \\n\
    \ NOTE: IMPORTANT\n\
    \ Any change to the definitions in this file REQUIRES the following\n\
    \ steps after:\n\
    \\n\
    \ # Re-generate erlang source from changed .proto files:\n\
    \ make erl_protogen\n\
    \\n\
    \ # Commit changed files:\n\
    \ git add -A; git commit -m 'Update erlang code from .proto files'\n\
    \\n\
    \\177\SOH\n\
    \\STX\EOT\NUL\DC2\EOT\NAK\NUL\CAN\SOH\SUB/ Error response - may be generated for any Req\n\
    \2t Java package specifiers\n\
    \ option java_package = \"com.basho.riak.protobuf\";\n\
    \ option java_outer_classname = \"RiakPB\";\n\
    \\n\
    \\n\
    \\n\
    \\ETX\EOT\NUL\SOH\DC2\ETX\NAK\b\DC4\n\
    \\v\n\
    \\EOT\EOT\NUL\STX\NUL\DC2\ETX\SYN\EOT\RS\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\NUL\EOT\DC2\ETX\SYN\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\NUL\ENQ\DC2\ETX\SYN\r\DC2\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\NUL\SOH\DC2\ETX\SYN\DC3\EM\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\NUL\ETX\DC2\ETX\SYN\FS\GS\n\
    \\v\n\
    \\EOT\EOT\NUL\STX\SOH\DC2\ETX\ETB\EOT \n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\SOH\EOT\DC2\ETX\ETB\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\SOH\ENQ\DC2\ETX\ETB\r\DC3\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\SOH\SOH\DC2\ETX\ETB\DC4\ESC\n\
    \\f\n\
    \\ENQ\EOT\NUL\STX\SOH\ETX\DC2\ETX\ETB\RS\US\n\
    \f\n\
    \\STX\EOT\SOH\DC2\EOT\ESC\NUL\RS\SOH\SUBZ Get server info request - no message defined, just send RpbGetServerInfoReq message code\n\
    \\n\
    \\n\
    \\n\
    \\ETX\EOT\SOH\SOH\DC2\ETX\ESC\b\FS\n\
    \\v\n\
    \\EOT\EOT\SOH\STX\NUL\DC2\ETX\FS\EOT\FS\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\NUL\EOT\DC2\ETX\FS\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\NUL\ENQ\DC2\ETX\FS\r\DC2\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\NUL\SOH\DC2\ETX\FS\DC3\ETB\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\NUL\ETX\DC2\ETX\FS\SUB\ESC\n\
    \\v\n\
    \\EOT\EOT\SOH\STX\SOH\DC2\ETX\GS\EOT&\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\SOH\EOT\DC2\ETX\GS\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\SOH\ENQ\DC2\ETX\GS\r\DC2\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\SOH\SOH\DC2\ETX\GS\DC3!\n\
    \\f\n\
    \\ENQ\EOT\SOH\STX\SOH\ETX\DC2\ETX\GS$%\n\
    \Q\n\
    \\STX\EOT\STX\DC2\EOT!\NUL$\SOH\SUBE Key/value pair - used for user metadata, indexes, search doc fields\n\
    \\n\
    \\n\
    \\n\
    \\ETX\EOT\STX\SOH\DC2\ETX!\b\SI\n\
    \\v\n\
    \\EOT\EOT\STX\STX\NUL\DC2\ETX\"\EOT\ESC\n\
    \\f\n\
    \\ENQ\EOT\STX\STX\NUL\EOT\DC2\ETX\"\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\STX\STX\NUL\ENQ\DC2\ETX\"\r\DC2\n\
    \\f\n\
    \\ENQ\EOT\STX\STX\NUL\SOH\DC2\ETX\"\DC3\SYN\n\
    \\f\n\
    \\ENQ\EOT\STX\STX\NUL\ETX\DC2\ETX\"\EM\SUB\n\
    \\v\n\
    \\EOT\EOT\STX\STX\SOH\DC2\ETX#\EOT\GS\n\
    \\f\n\
    \\ENQ\EOT\STX\STX\SOH\EOT\DC2\ETX#\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\STX\STX\SOH\ENQ\DC2\ETX#\r\DC2\n\
    \\f\n\
    \\ENQ\EOT\STX\STX\SOH\SOH\DC2\ETX#\DC3\CAN\n\
    \\f\n\
    \\ENQ\EOT\STX\STX\SOH\ETX\DC2\ETX#\ESC\FS\n\
    \+\n\
    \\STX\EOT\ETX\DC2\EOT(\NUL+\SOH\SUB\US Get bucket properties request\n\
    \\n\
    \\n\
    \\n\
    \\ETX\EOT\ETX\SOH\DC2\ETX(\b\ETB\n\
    \\v\n\
    \\EOT\EOT\ETX\STX\NUL\DC2\ETX)\EOT\RS\n\
    \\f\n\
    \\ENQ\EOT\ETX\STX\NUL\EOT\DC2\ETX)\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\ETX\STX\NUL\ENQ\DC2\ETX)\r\DC2\n\
    \\f\n\
    \\ENQ\EOT\ETX\STX\NUL\SOH\DC2\ETX)\DC3\EM\n\
    \\f\n\
    \\ENQ\EOT\ETX\STX\NUL\ETX\DC2\ETX)\FS\GS\n\
    \\v\n\
    \\EOT\EOT\ETX\STX\SOH\DC2\ETX*\EOT\FS\n\
    \\f\n\
    \\ENQ\EOT\ETX\STX\SOH\EOT\DC2\ETX*\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\ETX\STX\SOH\ENQ\DC2\ETX*\r\DC2\n\
    \\f\n\
    \\ENQ\EOT\ETX\STX\SOH\SOH\DC2\ETX*\DC3\ETB\n\
    \\f\n\
    \\ENQ\EOT\ETX\STX\SOH\ETX\DC2\ETX*\SUB\ESC\n\
    \,\n\
    \\STX\EOT\EOT\DC2\EOT.\NUL0\SOH\SUB  Get bucket properties response\n\
    \\n\
    \\n\
    \\n\
    \\ETX\EOT\EOT\SOH\DC2\ETX.\b\CAN\n\
    \\v\n\
    \\EOT\EOT\EOT\STX\NUL\DC2\ETX/\EOT&\n\
    \\f\n\
    \\ENQ\EOT\EOT\STX\NUL\EOT\DC2\ETX/\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\EOT\STX\NUL\ACK\DC2\ETX/\r\ESC\n\
    \\f\n\
    \\ENQ\EOT\EOT\STX\NUL\SOH\DC2\ETX/\FS!\n\
    \\f\n\
    \\ENQ\EOT\EOT\STX\NUL\ETX\DC2\ETX/$%\n\
    \+\n\
    \\STX\EOT\ENQ\DC2\EOT3\NUL7\SOH\SUB\US Set bucket properties request\n\
    \\n\
    \\n\
    \\n\
    \\ETX\EOT\ENQ\SOH\DC2\ETX3\b\ETB\n\
    \\v\n\
    \\EOT\EOT\ENQ\STX\NUL\DC2\ETX4\EOT\RS\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\NUL\EOT\DC2\ETX4\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\NUL\ENQ\DC2\ETX4\r\DC2\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\NUL\SOH\DC2\ETX4\DC3\EM\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\NUL\ETX\DC2\ETX4\FS\GS\n\
    \\v\n\
    \\EOT\EOT\ENQ\STX\SOH\DC2\ETX5\EOT&\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\SOH\EOT\DC2\ETX5\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\SOH\ACK\DC2\ETX5\r\ESC\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\SOH\SOH\DC2\ETX5\FS!\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\SOH\ETX\DC2\ETX5$%\n\
    \\v\n\
    \\EOT\EOT\ENQ\STX\STX\DC2\ETX6\EOT\FS\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\STX\EOT\DC2\ETX6\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\STX\ENQ\DC2\ETX6\r\DC2\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\STX\SOH\DC2\ETX6\DC3\ETB\n\
    \\f\n\
    \\ENQ\EOT\ENQ\STX\STX\ETX\DC2\ETX6\SUB\ESC\n\
    \\129\SOH\n\
    \\STX\EOT\ACK\DC2\EOT=\NUL@\SOH\SUB! Reset bucket properties request\n\
    \2R Set bucket properties response - no message defined, just send\n\
    \ RpbSetBucketResp\n\
    \\n\
    \\n\
    \\n\
    \\ETX\EOT\ACK\SOH\DC2\ETX=\b\EM\n\
    \\v\n\
    \\EOT\EOT\ACK\STX\NUL\DC2\ETX>\EOT\RS\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\NUL\EOT\DC2\ETX>\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\NUL\ENQ\DC2\ETX>\r\DC2\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\NUL\SOH\DC2\ETX>\DC3\EM\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\NUL\ETX\DC2\ETX>\FS\GS\n\
    \\v\n\
    \\EOT\EOT\ACK\STX\SOH\DC2\ETX?\EOT\FS\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\SOH\EOT\DC2\ETX?\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\SOH\ENQ\DC2\ETX?\r\DC2\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\SOH\SOH\DC2\ETX?\DC3\ETB\n\
    \\f\n\
    \\ENQ\EOT\ACK\STX\SOH\ETX\DC2\ETX?\SUB\ESC\n\
    \+\n\
    \\STX\EOT\a\DC2\EOTC\NULE\SOH\SUB\US Get bucket properties request\n\
    \\n\
    \\n\
    \\n\
    \\ETX\EOT\a\SOH\DC2\ETXC\b\ESC\n\
    \\v\n\
    \\EOT\EOT\a\STX\NUL\DC2\ETXD\EOT\FS\n\
    \\f\n\
    \\ENQ\EOT\a\STX\NUL\EOT\DC2\ETXD\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\a\STX\NUL\ENQ\DC2\ETXD\r\DC2\n\
    \\f\n\
    \\ENQ\EOT\a\STX\NUL\SOH\DC2\ETXD\DC3\ETB\n\
    \\f\n\
    \\ENQ\EOT\a\STX\NUL\ETX\DC2\ETXD\SUB\ESC\n\
    \+\n\
    \\STX\EOT\b\DC2\EOTH\NULK\SOH\SUB\US Set bucket properties request\n\
    \\n\
    \\n\
    \\n\
    \\ETX\EOT\b\SOH\DC2\ETXH\b\ESC\n\
    \\v\n\
    \\EOT\EOT\b\STX\NUL\DC2\ETXI\EOT\FS\n\
    \\f\n\
    \\ENQ\EOT\b\STX\NUL\EOT\DC2\ETXI\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\b\STX\NUL\ENQ\DC2\ETXI\r\DC2\n\
    \\f\n\
    \\ENQ\EOT\b\STX\NUL\SOH\DC2\ETXI\DC3\ETB\n\
    \\f\n\
    \\ENQ\EOT\b\STX\NUL\ETX\DC2\ETXI\SUB\ESC\n\
    \\v\n\
    \\EOT\EOT\b\STX\SOH\DC2\ETXJ\EOT&\n\
    \\f\n\
    \\ENQ\EOT\b\STX\SOH\EOT\DC2\ETXJ\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\b\STX\SOH\ACK\DC2\ETXJ\r\ESC\n\
    \\f\n\
    \\ENQ\EOT\b\STX\SOH\SOH\DC2\ETXJ\FS!\n\
    \\f\n\
    \\ENQ\EOT\b\STX\SOH\ETX\DC2\ETXJ$%\n\
    \\185\SOH\n\
    \\STX\EOT\t\DC2\EOTR\NULU\SOH\SUBY Module-Function pairs for commit hooks and other bucket properties\n\
    \ that take functions\n\
    \2R Set bucket properties response - no message defined, just send\n\
    \ RpbSetBucketResp\n\
    \\n\
    \\n\
    \\n\
    \\ETX\EOT\t\SOH\DC2\ETXR\b\DC1\n\
    \\v\n\
    \\EOT\EOT\t\STX\NUL\DC2\ETXS\EOT\RS\n\
    \\f\n\
    \\ENQ\EOT\t\STX\NUL\EOT\DC2\ETXS\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\t\STX\NUL\ENQ\DC2\ETXS\r\DC2\n\
    \\f\n\
    \\ENQ\EOT\t\STX\NUL\SOH\DC2\ETXS\DC3\EM\n\
    \\f\n\
    \\ENQ\EOT\t\STX\NUL\ETX\DC2\ETXS\FS\GS\n\
    \\v\n\
    \\EOT\EOT\t\STX\SOH\DC2\ETXT\EOT \n\
    \\f\n\
    \\ENQ\EOT\t\STX\SOH\EOT\DC2\ETXT\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\t\STX\SOH\ENQ\DC2\ETXT\r\DC2\n\
    \\f\n\
    \\ENQ\EOT\t\STX\SOH\SOH\DC2\ETXT\DC3\ESC\n\
    \\f\n\
    \\ENQ\EOT\t\STX\SOH\ETX\DC2\ETXT\RS\US\n\
    \Y\n\
    \\STX\EOT\n\
    \\DC2\EOTY\NUL\\\SOH\SUBM A commit hook, which may either be a modfun or a JavaScript named\n\
    \ function\n\
    \\n\
    \\n\
    \\n\
    \\ETX\EOT\n\
    \\SOH\DC2\ETXY\b\NAK\n\
    \\v\n\
    \\EOT\EOT\n\
    \\STX\NUL\DC2\ETXZ\EOT\"\n\
    \\f\n\
    \\ENQ\EOT\n\
    \\STX\NUL\EOT\DC2\ETXZ\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\n\
    \\STX\NUL\ACK\DC2\ETXZ\r\SYN\n\
    \\f\n\
    \\ENQ\EOT\n\
    \\STX\NUL\SOH\DC2\ETXZ\ETB\GS\n\
    \\f\n\
    \\ENQ\EOT\n\
    \\STX\NUL\ETX\DC2\ETXZ !\n\
    \\v\n\
    \\EOT\EOT\n\
    \\STX\SOH\DC2\ETX[\EOT\FS\n\
    \\f\n\
    \\ENQ\EOT\n\
    \\STX\SOH\EOT\DC2\ETX[\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\n\
    \\STX\SOH\ENQ\DC2\ETX[\r\DC2\n\
    \\f\n\
    \\ENQ\EOT\n\
    \\STX\SOH\SOH\DC2\ETX[\DC3\ETB\n\
    \\f\n\
    \\ENQ\EOT\n\
    \\STX\SOH\ETX\DC2\ETX[\SUB\ESC\n\
    \ \n\
    \\STX\EOT\v\DC2\ENQ_\NUL\153\SOH\SOH\SUB\DC3 Bucket properties\n\
    \\n\
    \\n\
    \\n\
    \\ETX\EOT\v\SOH\DC2\ETX_\b\SYN\n\
    \(\n\
    \\EOT\EOT\v\STX\NUL\DC2\ETXa\EOT\RS\SUB\ESC Declared in riak_core_app\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\v\STX\NUL\EOT\DC2\ETXa\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\v\STX\NUL\ENQ\DC2\ETXa\r\DC3\n\
    \\f\n\
    \\ENQ\EOT\v\STX\NUL\SOH\DC2\ETXa\DC4\EM\n\
    \\f\n\
    \\ENQ\EOT\v\STX\NUL\ETX\DC2\ETXa\FS\GS\n\
    \\v\n\
    \\EOT\EOT\v\STX\SOH\DC2\ETXb\EOT!\n\
    \\f\n\
    \\ENQ\EOT\v\STX\SOH\EOT\DC2\ETXb\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\v\STX\SOH\ENQ\DC2\ETXb\r\DC1\n\
    \\f\n\
    \\ENQ\EOT\v\STX\SOH\SOH\DC2\ETXb\DC2\FS\n\
    \\f\n\
    \\ENQ\EOT\v\STX\SOH\ETX\DC2\ETXb\US \n\
    \\v\n\
    \\EOT\EOT\v\STX\STX\DC2\ETXc\EOT&\n\
    \\f\n\
    \\ENQ\EOT\v\STX\STX\EOT\DC2\ETXc\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\v\STX\STX\ENQ\DC2\ETXc\r\DC1\n\
    \\f\n\
    \\ENQ\EOT\v\STX\STX\SOH\DC2\ETXc\DC2!\n\
    \\f\n\
    \\ENQ\EOT\v\STX\STX\ETX\DC2\ETXc$%\n\
    \\v\n\
    \\EOT\EOT\v\STX\ETX\DC2\ETXd\EOT)\n\
    \\f\n\
    \\ENQ\EOT\v\STX\ETX\EOT\DC2\ETXd\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\v\STX\ETX\ACK\DC2\ETXd\r\SUB\n\
    \\f\n\
    \\ENQ\EOT\v\STX\ETX\SOH\DC2\ETXd\ESC$\n\
    \\f\n\
    \\ENQ\EOT\v\STX\ETX\ETX\DC2\ETXd'(\n\
    \\v\n\
    \\EOT\EOT\v\STX\EOT\DC2\ETXe\EOT6\n\
    \\f\n\
    \\ENQ\EOT\v\STX\EOT\EOT\DC2\ETXe\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\v\STX\EOT\ENQ\DC2\ETXe\r\DC1\n\
    \\f\n\
    \\ENQ\EOT\v\STX\EOT\SOH\DC2\ETXe\DC2\US\n\
    \\f\n\
    \\ENQ\EOT\v\STX\EOT\ETX\DC2\ETXe\"#\n\
    \\f\n\
    \\ENQ\EOT\v\STX\EOT\b\DC2\ETXe$5\n\
    \\f\n\
    \\ENQ\EOT\v\STX\EOT\a\DC2\ETXe/4\n\
    \\v\n\
    \\EOT\EOT\v\STX\ENQ\DC2\ETXf\EOT*\n\
    \\f\n\
    \\ENQ\EOT\v\STX\ENQ\EOT\DC2\ETXf\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\v\STX\ENQ\ACK\DC2\ETXf\r\SUB\n\
    \\f\n\
    \\ENQ\EOT\v\STX\ENQ\SOH\DC2\ETXf\ESC%\n\
    \\f\n\
    \\ENQ\EOT\v\STX\ENQ\ETX\DC2\ETXf()\n\
    \\v\n\
    \\EOT\EOT\v\STX\ACK\DC2\ETXg\EOT7\n\
    \\f\n\
    \\ENQ\EOT\v\STX\ACK\EOT\DC2\ETXg\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\v\STX\ACK\ENQ\DC2\ETXg\r\DC1\n\
    \\f\n\
    \\ENQ\EOT\v\STX\ACK\SOH\DC2\ETXg\DC2 \n\
    \\f\n\
    \\ENQ\EOT\v\STX\ACK\ETX\DC2\ETXg#$\n\
    \\f\n\
    \\ENQ\EOT\v\STX\ACK\b\DC2\ETXg%6\n\
    \\f\n\
    \\ENQ\EOT\v\STX\ACK\a\DC2\ETXg05\n\
    \\v\n\
    \\EOT\EOT\v\STX\a\DC2\ETXh\EOT(\n\
    \\f\n\
    \\ENQ\EOT\v\STX\a\EOT\DC2\ETXh\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\v\STX\a\ACK\DC2\ETXh\r\SYN\n\
    \\f\n\
    \\ENQ\EOT\v\STX\a\SOH\DC2\ETXh\ETB#\n\
    \\f\n\
    \\ENQ\EOT\v\STX\a\ETX\DC2\ETXh&'\n\
    \&\n\
    \\EOT\EOT\v\STX\b\DC2\ETXk\EOT#\SUB\EM Declared in riak_kv_app\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\v\STX\b\EOT\DC2\ETXk\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\v\STX\b\ACK\DC2\ETXk\r\SYN\n\
    \\f\n\
    \\ENQ\EOT\v\STX\b\SOH\DC2\ETXk\ETB\RS\n\
    \\f\n\
    \\ENQ\EOT\v\STX\b\ETX\DC2\ETXk!\"\n\
    \\v\n\
    \\EOT\EOT\v\STX\t\DC2\ETXl\EOT$\n\
    \\f\n\
    \\ENQ\EOT\v\STX\t\EOT\DC2\ETXl\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\v\STX\t\ENQ\DC2\ETXl\r\DC3\n\
    \\f\n\
    \\ENQ\EOT\v\STX\t\SOH\DC2\ETXl\DC4\RS\n\
    \\f\n\
    \\ENQ\EOT\v\STX\t\ETX\DC2\ETXl!#\n\
    \\v\n\
    \\EOT\EOT\v\STX\n\
    \\DC2\ETXm\EOT&\n\
    \\f\n\
    \\ENQ\EOT\v\STX\n\
    \\EOT\DC2\ETXm\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\v\STX\n\
    \\ENQ\DC2\ETXm\r\DC3\n\
    \\f\n\
    \\ENQ\EOT\v\STX\n\
    \\SOH\DC2\ETXm\DC4 \n\
    \\f\n\
    \\ENQ\EOT\v\STX\n\
    \\ETX\DC2\ETXm#%\n\
    \\v\n\
    \\EOT\EOT\v\STX\v\DC2\ETXn\EOT$\n\
    \\f\n\
    \\ENQ\EOT\v\STX\v\EOT\DC2\ETXn\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\v\STX\v\ENQ\DC2\ETXn\r\DC3\n\
    \\f\n\
    \\ENQ\EOT\v\STX\v\SOH\DC2\ETXn\DC4\RS\n\
    \\f\n\
    \\ENQ\EOT\v\STX\v\ETX\DC2\ETXn!#\n\
    \\v\n\
    \\EOT\EOT\v\STX\f\DC2\ETXo\EOT&\n\
    \\f\n\
    \\ENQ\EOT\v\STX\f\EOT\DC2\ETXo\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\v\STX\f\ENQ\DC2\ETXo\r\DC3\n\
    \\f\n\
    \\ENQ\EOT\v\STX\f\SOH\DC2\ETXo\DC4 \n\
    \\f\n\
    \\ENQ\EOT\v\STX\f\ETX\DC2\ETXo#%\n\
    \\v\n\
    \\EOT\EOT\v\STX\r\DC2\ETXp\EOT\FS\n\
    \\f\n\
    \\ENQ\EOT\v\STX\r\EOT\DC2\ETXp\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\v\STX\r\ENQ\DC2\ETXp\r\DC3\n\
    \\f\n\
    \\ENQ\EOT\v\STX\r\SOH\DC2\ETXp\DC4\SYN\n\
    \\f\n\
    \\ENQ\EOT\v\STX\r\ETX\DC2\ETXp\EM\ESC\n\
    \\v\n\
    \\EOT\EOT\v\STX\SO\DC2\ETXq\EOT\ESC\n\
    \\f\n\
    \\ENQ\EOT\v\STX\SO\EOT\DC2\ETXq\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\v\STX\SO\ENQ\DC2\ETXq\r\DC3\n\
    \\f\n\
    \\ENQ\EOT\v\STX\SO\SOH\DC2\ETXq\DC4\NAK\n\
    \\f\n\
    \\ENQ\EOT\v\STX\SO\ETX\DC2\ETXq\CAN\SUB\n\
    \\v\n\
    \\EOT\EOT\v\STX\SI\DC2\ETXr\EOT\ESC\n\
    \\f\n\
    \\ENQ\EOT\v\STX\SI\EOT\DC2\ETXr\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\v\STX\SI\ENQ\DC2\ETXr\r\DC3\n\
    \\f\n\
    \\ENQ\EOT\v\STX\SI\SOH\DC2\ETXr\DC4\NAK\n\
    \\f\n\
    \\ENQ\EOT\v\STX\SI\ETX\DC2\ETXr\CAN\SUB\n\
    \\v\n\
    \\EOT\EOT\v\STX\DLE\DC2\ETXs\EOT\FS\n\
    \\f\n\
    \\ENQ\EOT\v\STX\DLE\EOT\DC2\ETXs\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\v\STX\DLE\ENQ\DC2\ETXs\r\DC3\n\
    \\f\n\
    \\ENQ\EOT\v\STX\DLE\SOH\DC2\ETXs\DC4\SYN\n\
    \\f\n\
    \\ENQ\EOT\v\STX\DLE\ETX\DC2\ETXs\EM\ESC\n\
    \\v\n\
    \\EOT\EOT\v\STX\DC1\DC2\ETXt\EOT\FS\n\
    \\f\n\
    \\ENQ\EOT\v\STX\DC1\EOT\DC2\ETXt\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\v\STX\DC1\ENQ\DC2\ETXt\r\DC3\n\
    \\f\n\
    \\ENQ\EOT\v\STX\DC1\SOH\DC2\ETXt\DC4\SYN\n\
    \\f\n\
    \\ENQ\EOT\v\STX\DC1\ETX\DC2\ETXt\EM\ESC\n\
    \\v\n\
    \\EOT\EOT\v\STX\DC2\DC2\ETXu\EOT\FS\n\
    \\f\n\
    \\ENQ\EOT\v\STX\DC2\EOT\DC2\ETXu\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\v\STX\DC2\ENQ\DC2\ETXu\r\DC3\n\
    \\f\n\
    \\ENQ\EOT\v\STX\DC2\SOH\DC2\ETXu\DC4\SYN\n\
    \\f\n\
    \\ENQ\EOT\v\STX\DC2\ETX\DC2\ETXu\EM\ESC\n\
    \\v\n\
    \\EOT\EOT\v\STX\DC3\DC2\ETXv\EOT$\n\
    \\f\n\
    \\ENQ\EOT\v\STX\DC3\EOT\DC2\ETXv\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\v\STX\DC3\ENQ\DC2\ETXv\r\DC1\n\
    \\f\n\
    \\ENQ\EOT\v\STX\DC3\SOH\DC2\ETXv\DC2\RS\n\
    \\f\n\
    \\ENQ\EOT\v\STX\DC3\ETX\DC2\ETXv!#\n\
    \\v\n\
    \\EOT\EOT\v\STX\DC4\DC2\ETXw\EOT#\n\
    \\f\n\
    \\ENQ\EOT\v\STX\DC4\EOT\DC2\ETXw\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\v\STX\DC4\ENQ\DC2\ETXw\r\DC1\n\
    \\f\n\
    \\ENQ\EOT\v\STX\DC4\SOH\DC2\ETXw\DC2\GS\n\
    \\f\n\
    \\ENQ\EOT\v\STX\DC4\ETX\DC2\ETXw \"\n\
    \,\n\
    \\EOT\EOT\v\STX\NAK\DC2\ETXz\EOT \SUB\US Used by riak_kv_multi_backend\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\v\STX\NAK\EOT\DC2\ETXz\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\v\STX\NAK\ENQ\DC2\ETXz\r\DC2\n\
    \\f\n\
    \\ENQ\EOT\v\STX\NAK\SOH\DC2\ETXz\DC3\SUB\n\
    \\f\n\
    \\ENQ\EOT\v\STX\NAK\ETX\DC2\ETXz\GS\US\n\
    \/\n\
    \\EOT\EOT\v\STX\SYN\DC2\ETX}\EOT\RS\SUB\" Used by riak_search bucket fixup\n\
    \\n\
    \\f\n\
    \\ENQ\EOT\v\STX\SYN\EOT\DC2\ETX}\EOT\f\n\
    \\f\n\
    \\ENQ\EOT\v\STX\SYN\ENQ\DC2\ETX}\r\DC1\n\
    \\f\n\
    \\ENQ\EOT\v\STX\SYN\SOH\DC2\ETX}\DC2\CAN\n\
    \\f\n\
    \\ENQ\EOT\v\STX\SYN\ETX\DC2\ETX}\ESC\GS\n\
    \0\n\
    \\EOT\EOT\v\EOT\NUL\DC2\ACK\128\SOH\EOT\133\SOH\ENQ\SUB  Used by riak_repl bucket fixup\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\v\EOT\NUL\SOH\DC2\EOT\128\SOH\t\DC4\n\
    \\SO\n\
    \\ACK\EOT\v\EOT\NUL\STX\NUL\DC2\EOT\129\SOH\b\DC2\n\
    \\SI\n\
    \\a\EOT\v\EOT\NUL\STX\NUL\SOH\DC2\EOT\129\SOH\b\r\n\
    \\SI\n\
    \\a\EOT\v\EOT\NUL\STX\NUL\STX\DC2\EOT\129\SOH\DLE\DC1\n\
    \\SO\n\
    \\ACK\EOT\v\EOT\NUL\STX\SOH\DC2\EOT\130\SOH\b\NAK\n\
    \\SI\n\
    \\a\EOT\v\EOT\NUL\STX\SOH\SOH\DC2\EOT\130\SOH\b\DLE\n\
    \\SI\n\
    \\a\EOT\v\EOT\NUL\STX\SOH\STX\DC2\EOT\130\SOH\DC3\DC4\n\
    \\SO\n\
    \\ACK\EOT\v\EOT\NUL\STX\STX\DC2\EOT\131\SOH\b\NAK\n\
    \\SI\n\
    \\a\EOT\v\EOT\NUL\STX\STX\SOH\DC2\EOT\131\SOH\b\DLE\n\
    \\SI\n\
    \\a\EOT\v\EOT\NUL\STX\STX\STX\DC2\EOT\131\SOH\DC3\DC4\n\
    \\SO\n\
    \\ACK\EOT\v\EOT\NUL\STX\ETX\DC2\EOT\132\SOH\b\DC1\n\
    \\SI\n\
    \\a\EOT\v\EOT\NUL\STX\ETX\SOH\DC2\EOT\132\SOH\b\f\n\
    \\SI\n\
    \\a\EOT\v\EOT\NUL\STX\ETX\STX\DC2\EOT\132\SOH\SI\DLE\n\
    \\f\n\
    \\EOT\EOT\v\STX\ETB\DC2\EOT\134\SOH\EOT#\n\
    \\r\n\
    \\ENQ\EOT\v\STX\ETB\EOT\DC2\EOT\134\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\v\STX\ETB\ACK\DC2\EOT\134\SOH\r\CAN\n\
    \\r\n\
    \\ENQ\EOT\v\STX\ETB\SOH\DC2\EOT\134\SOH\EM\GS\n\
    \\r\n\
    \\ENQ\EOT\v\STX\ETB\ETX\DC2\EOT\134\SOH \"\n\
    \\FS\n\
    \\EOT\EOT\v\STX\CAN\DC2\EOT\137\SOH\EOT%\SUB\SO Search index\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\v\STX\CAN\EOT\DC2\EOT\137\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\v\STX\CAN\ENQ\DC2\EOT\137\SOH\r\DC2\n\
    \\r\n\
    \\ENQ\EOT\v\STX\CAN\SOH\DC2\EOT\137\SOH\DC3\US\n\
    \\r\n\
    \\ENQ\EOT\v\STX\CAN\ETX\DC2\EOT\137\SOH\"$\n\
    \\FS\n\
    \\EOT\EOT\v\STX\EM\DC2\EOT\140\SOH\EOT!\SUB\SO KV Datatypes\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\v\STX\EM\EOT\DC2\EOT\140\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\v\STX\EM\ENQ\DC2\EOT\140\SOH\r\DC2\n\
    \\r\n\
    \\ENQ\EOT\v\STX\EM\SOH\DC2\EOT\140\SOH\DC3\ESC\n\
    \\r\n\
    \\ENQ\EOT\v\STX\EM\ETX\DC2\EOT\140\SOH\RS \n\
    \%\n\
    \\EOT\EOT\v\STX\SUB\DC2\EOT\143\SOH\EOT\"\SUB\ETB KV strong consistency\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\v\STX\SUB\EOT\DC2\EOT\143\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\v\STX\SUB\ENQ\DC2\EOT\143\SOH\r\DC1\n\
    \\r\n\
    \\ENQ\EOT\v\STX\SUB\SOH\DC2\EOT\143\SOH\DC2\FS\n\
    \\r\n\
    \\ENQ\EOT\v\STX\SUB\ETX\DC2\EOT\143\SOH\US!\n\
    \\FS\n\
    \\EOT\EOT\v\STX\ESC\DC2\EOT\146\SOH\EOT\"\SUB\SO KV fast path\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\v\STX\ESC\EOT\DC2\EOT\146\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\v\STX\ESC\ENQ\DC2\EOT\146\SOH\r\DC1\n\
    \\r\n\
    \\ENQ\EOT\v\STX\ESC\SOH\DC2\EOT\146\SOH\DC2\FS\n\
    \\r\n\
    \\ENQ\EOT\v\STX\ESC\ETX\DC2\EOT\146\SOH\US!\n\
    \'\n\
    \\EOT\EOT\v\STX\FS\DC2\EOT\149\SOH\EOT'\SUB\EM Hyperlolog DT Precision\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\v\STX\FS\EOT\DC2\EOT\149\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\v\STX\FS\ENQ\DC2\EOT\149\SOH\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\v\STX\FS\SOH\DC2\EOT\149\SOH\DC4!\n\
    \\r\n\
    \\ENQ\EOT\v\STX\FS\ETX\DC2\EOT\149\SOH$&\n\
    \-\n\
    \\EOT\EOT\v\STX\GS\DC2\EOT\152\SOH\EOT\GS\SUB\US KV sweeper object expiry time\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\v\STX\GS\EOT\DC2\EOT\152\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\v\STX\GS\ENQ\DC2\EOT\152\SOH\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\v\STX\GS\SOH\DC2\EOT\152\SOH\DC4\ETB\n\
    \\r\n\
    \\ENQ\EOT\v\STX\GS\ETX\DC2\EOT\152\SOH\SUB\FS\n\
    \&\n\
    \\STX\EOT\f\DC2\ACK\156\SOH\NUL\159\SOH\SOH\SUB\CAN Authentication request\n\
    \\n\
    \\v\n\
    \\ETX\EOT\f\SOH\DC2\EOT\156\SOH\b\DC2\n\
    \\f\n\
    \\EOT\EOT\f\STX\NUL\DC2\EOT\157\SOH\EOT\FS\n\
    \\r\n\
    \\ENQ\EOT\f\STX\NUL\EOT\DC2\EOT\157\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\f\STX\NUL\ENQ\DC2\EOT\157\SOH\r\DC2\n\
    \\r\n\
    \\ENQ\EOT\f\STX\NUL\SOH\DC2\EOT\157\SOH\DC3\ETB\n\
    \\r\n\
    \\ENQ\EOT\f\STX\NUL\ETX\DC2\EOT\157\SOH\SUB\ESC\n\
    \\f\n\
    \\EOT\EOT\f\STX\SOH\DC2\EOT\158\SOH\EOT \n\
    \\r\n\
    \\ENQ\EOT\f\STX\SOH\EOT\DC2\EOT\158\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\f\STX\SOH\ENQ\DC2\EOT\158\SOH\r\DC2\n\
    \\r\n\
    \\ENQ\EOT\f\STX\SOH\SOH\DC2\EOT\158\SOH\DC3\ESC\n\
    \\r\n\
    \\ENQ\EOT\f\STX\SOH\ETX\DC2\EOT\158\SOH\RS\US\n\
    \\252\STX\n\
    \\STX\EOT\r\DC2\ACK\188\SOH\NUL\203\SOH\SOH\SUB\191\SOH\n\
    \ Field names in maps are composed of a binary identifier and a type.\n\
    \ This is so that two clients can create fields with the same name\n\
    \ but different types, and they converge independently.\n\
    \2v Java package specifiers\n\
    \ option java_package = \"com.basho.riak.protobuf\";\n\
    \ option java_outer_classname = \"RiakDtPB\";\n\
    \24\n\
    \ =============== DATA STRUCTURES =================\n\
    \\n\
    \\v\n\
    \\ETX\EOT\r\SOH\DC2\EOT\188\SOH\b\DLE\n\
    \t\n\
    \\EOT\EOT\r\EOT\NUL\DC2\ACK\193\SOH\EOT\199\SOH\ENQ\SUBd\n\
    \ The types that can be stored in a map are limited to counters,\n\
    \ sets, registers, flags, and maps.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\r\EOT\NUL\SOH\DC2\EOT\193\SOH\t\NAK\n\
    \\SO\n\
    \\ACK\EOT\r\EOT\NUL\STX\NUL\DC2\EOT\194\SOH\b\NAK\n\
    \\SI\n\
    \\a\EOT\r\EOT\NUL\STX\NUL\SOH\DC2\EOT\194\SOH\b\SI\n\
    \\SI\n\
    \\a\EOT\r\EOT\NUL\STX\NUL\STX\DC2\EOT\194\SOH\DC3\DC4\n\
    \\SO\n\
    \\ACK\EOT\r\EOT\NUL\STX\SOH\DC2\EOT\195\SOH\b\NAK\n\
    \\SI\n\
    \\a\EOT\r\EOT\NUL\STX\SOH\SOH\DC2\EOT\195\SOH\b\v\n\
    \\SI\n\
    \\a\EOT\r\EOT\NUL\STX\SOH\STX\DC2\EOT\195\SOH\DC3\DC4\n\
    \\SO\n\
    \\ACK\EOT\r\EOT\NUL\STX\STX\DC2\EOT\196\SOH\b\NAK\n\
    \\SI\n\
    \\a\EOT\r\EOT\NUL\STX\STX\SOH\DC2\EOT\196\SOH\b\DLE\n\
    \\SI\n\
    \\a\EOT\r\EOT\NUL\STX\STX\STX\DC2\EOT\196\SOH\DC3\DC4\n\
    \\SO\n\
    \\ACK\EOT\r\EOT\NUL\STX\ETX\DC2\EOT\197\SOH\b\NAK\n\
    \\SI\n\
    \\a\EOT\r\EOT\NUL\STX\ETX\SOH\DC2\EOT\197\SOH\b\f\n\
    \\SI\n\
    \\a\EOT\r\EOT\NUL\STX\ETX\STX\DC2\EOT\197\SOH\DC3\DC4\n\
    \\SO\n\
    \\ACK\EOT\r\EOT\NUL\STX\EOT\DC2\EOT\198\SOH\b\NAK\n\
    \\SI\n\
    \\a\EOT\r\EOT\NUL\STX\EOT\SOH\DC2\EOT\198\SOH\b\v\n\
    \\SI\n\
    \\a\EOT\r\EOT\NUL\STX\EOT\STX\DC2\EOT\198\SOH\DC3\DC4\n\
    \\f\n\
    \\EOT\EOT\r\STX\NUL\DC2\EOT\201\SOH\EOT#\n\
    \\r\n\
    \\ENQ\EOT\r\STX\NUL\EOT\DC2\EOT\201\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\r\STX\NUL\ENQ\DC2\EOT\201\SOH\r\DC2\n\
    \\r\n\
    \\ENQ\EOT\r\STX\NUL\SOH\DC2\EOT\201\SOH\SUB\RS\n\
    \\r\n\
    \\ENQ\EOT\r\STX\NUL\ETX\DC2\EOT\201\SOH!\"\n\
    \\f\n\
    \\EOT\EOT\r\STX\SOH\DC2\EOT\202\SOH\EOT#\n\
    \\r\n\
    \\ENQ\EOT\r\STX\SOH\EOT\DC2\EOT\202\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\r\STX\SOH\ACK\DC2\EOT\202\SOH\r\EM\n\
    \\r\n\
    \\ENQ\EOT\r\STX\SOH\SOH\DC2\EOT\202\SOH\SUB\RS\n\
    \\r\n\
    \\ENQ\EOT\r\STX\SOH\ETX\DC2\EOT\202\SOH!\"\n\
    \\144\SOH\n\
    \\STX\EOT\SO\DC2\ACK\210\SOH\NUL\217\SOH\SOH\SUB\129\SOH\n\
    \ An entry in a map is a pair of a field-name and value. The type\n\
    \ defined in the field determines which value type is expected.\n\
    \\n\
    \\v\n\
    \\ETX\EOT\SO\SOH\DC2\EOT\210\SOH\b\DLE\n\
    \\f\n\
    \\EOT\EOT\SO\STX\NUL\DC2\EOT\211\SOH\EOT \n\
    \\r\n\
    \\ENQ\EOT\SO\STX\NUL\EOT\DC2\EOT\211\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SO\STX\NUL\ACK\DC2\EOT\211\SOH\r\NAK\n\
    \\r\n\
    \\ENQ\EOT\SO\STX\NUL\SOH\DC2\EOT\211\SOH\SYN\ESC\n\
    \\r\n\
    \\ENQ\EOT\SO\STX\NUL\ETX\DC2\EOT\211\SOH\RS\US\n\
    \\f\n\
    \\EOT\EOT\SO\STX\SOH\DC2\EOT\212\SOH\EOT)\n\
    \\r\n\
    \\ENQ\EOT\SO\STX\SOH\EOT\DC2\EOT\212\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SO\STX\SOH\ENQ\DC2\EOT\212\SOH\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\SO\STX\SOH\SOH\DC2\EOT\212\SOH\SYN#\n\
    \\r\n\
    \\ENQ\EOT\SO\STX\SOH\ETX\DC2\EOT\212\SOH'(\n\
    \\f\n\
    \\EOT\EOT\SO\STX\STX\DC2\EOT\213\SOH\EOT)\n\
    \\r\n\
    \\ENQ\EOT\SO\STX\STX\EOT\DC2\EOT\213\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SO\STX\STX\ENQ\DC2\EOT\213\SOH\r\DC2\n\
    \\r\n\
    \\ENQ\EOT\SO\STX\STX\SOH\DC2\EOT\213\SOH\SYN\US\n\
    \\r\n\
    \\ENQ\EOT\SO\STX\STX\ETX\DC2\EOT\213\SOH'(\n\
    \\f\n\
    \\EOT\EOT\SO\STX\ETX\DC2\EOT\214\SOH\EOT)\n\
    \\r\n\
    \\ENQ\EOT\SO\STX\ETX\EOT\DC2\EOT\214\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SO\STX\ETX\ENQ\DC2\EOT\214\SOH\r\DC2\n\
    \\r\n\
    \\ENQ\EOT\SO\STX\ETX\SOH\DC2\EOT\214\SOH\SYN$\n\
    \\r\n\
    \\ENQ\EOT\SO\STX\ETX\ETX\DC2\EOT\214\SOH'(\n\
    \\f\n\
    \\EOT\EOT\SO\STX\EOT\DC2\EOT\215\SOH\EOT)\n\
    \\r\n\
    \\ENQ\EOT\SO\STX\EOT\EOT\DC2\EOT\215\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SO\STX\EOT\ENQ\DC2\EOT\215\SOH\r\DC1\n\
    \\r\n\
    \\ENQ\EOT\SO\STX\EOT\SOH\DC2\EOT\215\SOH\SYN \n\
    \\r\n\
    \\ENQ\EOT\SO\STX\EOT\ETX\DC2\EOT\215\SOH'(\n\
    \\f\n\
    \\EOT\EOT\SO\STX\ENQ\DC2\EOT\216\SOH\EOT)\n\
    \\r\n\
    \\ENQ\EOT\SO\STX\ENQ\EOT\DC2\EOT\216\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SO\STX\ENQ\ACK\DC2\EOT\216\SOH\r\NAK\n\
    \\r\n\
    \\ENQ\EOT\SO\STX\ENQ\SOH\DC2\EOT\216\SOH\SYN\US\n\
    \\r\n\
    \\ENQ\EOT\SO\STX\ENQ\ETX\DC2\EOT\216\SOH'(\n\
    \\214\SOH\n\
    \\STX\EOT\SI\DC2\ACK\228\SOH\NUL\246\SOH\SOH\SUB\155\SOH\n\
    \ The equivalent of KV's \"RpbGetReq\", results in a DtFetchResp. The\n\
    \ request-time options are limited to ones that are relevant to\n\
    \ structured data-types.\n\
    \2*\n\
    \ =============== FETCH =================\n\
    \\n\
    \\v\n\
    \\ETX\EOT\SI\SOH\DC2\EOT\228\SOH\b\DC2\n\
    \;\n\
    \\EOT\EOT\SI\STX\NUL\DC2\EOT\230\SOH\EOT\RS\SUB- The identifier: bucket, key and bucket-type\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\NUL\EOT\DC2\EOT\230\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\NUL\ENQ\DC2\EOT\230\SOH\r\DC2\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\NUL\SOH\DC2\EOT\230\SOH\DC3\EM\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\NUL\ETX\DC2\EOT\230\SOH\FS\GS\n\
    \\f\n\
    \\EOT\EOT\SI\STX\SOH\DC2\EOT\231\SOH\EOT\RS\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\SOH\EOT\DC2\EOT\231\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\SOH\ENQ\DC2\EOT\231\SOH\r\DC2\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\SOH\SOH\DC2\EOT\231\SOH\DC3\SYN\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\SOH\ETX\DC2\EOT\231\SOH\FS\GS\n\
    \\f\n\
    \\EOT\EOT\SI\STX\STX\DC2\EOT\232\SOH\EOT\GS\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\STX\EOT\DC2\EOT\232\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\STX\ENQ\DC2\EOT\232\SOH\r\DC2\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\STX\SOH\DC2\EOT\232\SOH\DC3\ETB\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\STX\ETX\DC2\EOT\232\SOH\ESC\FS\n\
    \\US\n\
    \\EOT\EOT\SI\STX\ETX\DC2\EOT\235\SOH\EOT'\SUB\DC1 Request options\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\ETX\EOT\DC2\EOT\235\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\ETX\ENQ\DC2\EOT\235\SOH\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\ETX\SOH\DC2\EOT\235\SOH\DC4\NAK\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\ETX\ETX\DC2\EOT\235\SOH%&\n\
    \\f\n\
    \\EOT\EOT\SI\STX\EOT\DC2\EOT\236\SOH\EOT'\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\EOT\EOT\DC2\EOT\236\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\EOT\ENQ\DC2\EOT\236\SOH\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\EOT\SOH\DC2\EOT\236\SOH\DC4\SYN\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\EOT\ETX\DC2\EOT\236\SOH%&\n\
    \\f\n\
    \\EOT\EOT\SI\STX\ENQ\DC2\EOT\237\SOH\EOT'\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\ENQ\EOT\DC2\EOT\237\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\ENQ\ENQ\DC2\EOT\237\SOH\r\DC1\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\ENQ\SOH\DC2\EOT\237\SOH\DC4 \n\
    \\r\n\
    \\ENQ\EOT\SI\STX\ENQ\ETX\DC2\EOT\237\SOH%&\n\
    \\f\n\
    \\EOT\EOT\SI\STX\ACK\DC2\EOT\238\SOH\EOT'\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\ACK\EOT\DC2\EOT\238\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\ACK\ENQ\DC2\EOT\238\SOH\r\DC1\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\ACK\SOH\DC2\EOT\238\SOH\DC4\US\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\ACK\ETX\DC2\EOT\238\SOH%&\n\
    \\f\n\
    \\EOT\EOT\SI\STX\a\DC2\EOT\239\SOH\EOT'\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\a\EOT\DC2\EOT\239\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\a\ENQ\DC2\EOT\239\SOH\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\a\SOH\DC2\EOT\239\SOH\DC4\ESC\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\a\ETX\DC2\EOT\239\SOH%&\n\
    \2\n\
    \\EOT\EOT\SI\STX\b\DC2\EOT\240\SOH\EOT'\"$ Experimental, may change/disappear\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\b\EOT\DC2\EOT\240\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\b\ENQ\DC2\EOT\240\SOH\r\DC1\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\b\SOH\DC2\EOT\240\SOH\DC4!\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\b\ETX\DC2\EOT\240\SOH%&\n\
    \2\n\
    \\EOT\EOT\SI\STX\t\DC2\EOT\241\SOH\EOT'\"$ Experimental, may change/disappear\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\t\EOT\DC2\EOT\241\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\t\ENQ\DC2\EOT\241\SOH\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\t\SOH\DC2\EOT\241\SOH\DC4\EM\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\t\ETX\DC2\EOT\241\SOH$&\n\
    \\137\SOH\n\
    \\EOT\EOT\SI\STX\n\
    \\DC2\EOT\245\SOH\EOT6\SUB{ For read-only requests or context-free operations, you can set\n\
    \ this to false to reduce the size of the response payload.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\n\
    \\EOT\DC2\EOT\245\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\n\
    \\ENQ\DC2\EOT\245\SOH\r\DC1\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\n\
    \\SOH\DC2\EOT\245\SOH\DC2!\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\n\
    \\ETX\DC2\EOT\245\SOH$&\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\n\
    \\b\DC2\EOT\245\SOH'5\n\
    \\r\n\
    \\ENQ\EOT\SI\STX\n\
    \\a\DC2\EOT\245\SOH04\n\
    \\139\SOH\n\
    \\STX\EOT\DLE\DC2\ACK\253\SOH\NUL\134\STX\SOH\SUB}\n\
    \ The value of the fetched data type. If present in the response,\n\
    \ then empty values (sets, maps) should be treated as such.\n\
    \\n\
    \\v\n\
    \\ETX\EOT\DLE\SOH\DC2\EOT\253\SOH\b\SI\n\
    \\f\n\
    \\EOT\EOT\DLE\STX\NUL\DC2\EOT\254\SOH\EOT(\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\NUL\EOT\DC2\EOT\254\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\NUL\ENQ\DC2\EOT\254\SOH\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\NUL\SOH\DC2\EOT\254\SOH\SYN#\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\NUL\ETX\DC2\EOT\254\SOH&'\n\
    \\f\n\
    \\EOT\EOT\DLE\STX\SOH\DC2\EOT\255\SOH\EOT(\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\SOH\EOT\DC2\EOT\255\SOH\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\SOH\ENQ\DC2\EOT\255\SOH\r\DC2\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\SOH\SOH\DC2\EOT\255\SOH\SYN\US\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\SOH\ETX\DC2\EOT\255\SOH&'\n\
    \\f\n\
    \\EOT\EOT\DLE\STX\STX\DC2\EOT\128\STX\EOT(\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\STX\EOT\DC2\EOT\128\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\STX\ACK\DC2\EOT\128\STX\r\NAK\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\STX\SOH\DC2\EOT\128\STX\SYN\US\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\STX\ETX\DC2\EOT\128\STX&'\n\
    \T\n\
    \\EOT\EOT\DLE\STX\ETX\DC2\EOT\132\STX\EOT(\SUBF We return an estimated cardinality of the Hyperloglog set\n\
    \ on fetch.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\ETX\EOT\DC2\EOT\132\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\ETX\ENQ\DC2\EOT\132\STX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\ETX\SOH\DC2\EOT\132\STX\SYN\US\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\ETX\ETX\DC2\EOT\132\STX&'\n\
    \\f\n\
    \\EOT\EOT\DLE\STX\EOT\DC2\EOT\133\STX\EOT(\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\EOT\EOT\DC2\EOT\133\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\EOT\ENQ\DC2\EOT\133\STX\r\DC2\n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\EOT\SOH\DC2\EOT\133\STX\SYN \n\
    \\r\n\
    \\ENQ\EOT\DLE\STX\EOT\ETX\DC2\EOT\133\STX&'\n\
    \\216\ETX\n\
    \\STX\EOT\DC1\DC2\ACK\146\STX\NUL\158\STX\SOH\SUB\201\ETX\n\
    \ The response to a \"Fetch\" request. If the `include_context` option\n\
    \ is specified, an opaque \"context\" value will be returned along with\n\
    \ the user-friendly data. When sending an \"Update\" request, the\n\
    \ client should send this context as well, similar to how one would\n\
    \ send a vclock for KV updates. The `type` field indicates which\n\
    \ value type to expect. When the `value` field is missing from the\n\
    \ message, the client should interpret it as a \"not found\".\n\
    \\n\
    \\v\n\
    \\ETX\EOT\DC1\SOH\DC2\EOT\146\STX\b\DC3\n\
    \\SO\n\
    \\EOT\EOT\DC1\EOT\NUL\DC2\ACK\147\STX\EOT\153\STX\ENQ\n\
    \\r\n\
    \\ENQ\EOT\DC1\EOT\NUL\SOH\DC2\EOT\147\STX\t\DC1\n\
    \\SO\n\
    \\ACK\EOT\DC1\EOT\NUL\STX\NUL\DC2\EOT\148\STX\b\DC4\n\
    \\SI\n\
    \\a\EOT\DC1\EOT\NUL\STX\NUL\SOH\DC2\EOT\148\STX\b\SI\n\
    \\SI\n\
    \\a\EOT\DC1\EOT\NUL\STX\NUL\STX\DC2\EOT\148\STX\DC2\DC3\n\
    \\SO\n\
    \\ACK\EOT\DC1\EOT\NUL\STX\SOH\DC2\EOT\149\STX\b\DC4\n\
    \\SI\n\
    \\a\EOT\DC1\EOT\NUL\STX\SOH\SOH\DC2\EOT\149\STX\b\v\n\
    \\SI\n\
    \\a\EOT\DC1\EOT\NUL\STX\SOH\STX\DC2\EOT\149\STX\DC2\DC3\n\
    \\SO\n\
    \\ACK\EOT\DC1\EOT\NUL\STX\STX\DC2\EOT\150\STX\b\DC4\n\
    \\SI\n\
    \\a\EOT\DC1\EOT\NUL\STX\STX\SOH\DC2\EOT\150\STX\b\v\n\
    \\SI\n\
    \\a\EOT\DC1\EOT\NUL\STX\STX\STX\DC2\EOT\150\STX\DC2\DC3\n\
    \\SO\n\
    \\ACK\EOT\DC1\EOT\NUL\STX\ETX\DC2\EOT\151\STX\b\DC4\n\
    \\SI\n\
    \\a\EOT\DC1\EOT\NUL\STX\ETX\SOH\DC2\EOT\151\STX\b\v\n\
    \\SI\n\
    \\a\EOT\DC1\EOT\NUL\STX\ETX\STX\DC2\EOT\151\STX\DC2\DC3\n\
    \\SO\n\
    \\ACK\EOT\DC1\EOT\NUL\STX\EOT\DC2\EOT\152\STX\b\DC4\n\
    \\SI\n\
    \\a\EOT\DC1\EOT\NUL\STX\EOT\SOH\DC2\EOT\152\STX\b\f\n\
    \\SI\n\
    \\a\EOT\DC1\EOT\NUL\STX\EOT\STX\DC2\EOT\152\STX\DC2\DC3\n\
    \\f\n\
    \\EOT\EOT\DC1\STX\NUL\DC2\EOT\155\STX\EOT\"\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\NUL\EOT\DC2\EOT\155\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\NUL\ENQ\DC2\EOT\155\STX\r\DC2\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\NUL\SOH\DC2\EOT\155\STX\SYN\GS\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\NUL\ETX\DC2\EOT\155\STX !\n\
    \\f\n\
    \\EOT\EOT\DC1\STX\SOH\DC2\EOT\156\STX\EOT\"\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\SOH\EOT\DC2\EOT\156\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\SOH\ACK\DC2\EOT\156\STX\r\NAK\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\SOH\SOH\DC2\EOT\156\STX\SYN\SUB\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\SOH\ETX\DC2\EOT\156\STX !\n\
    \\f\n\
    \\EOT\EOT\DC1\STX\STX\DC2\EOT\157\STX\EOT\"\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\STX\EOT\DC2\EOT\157\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\STX\ACK\DC2\EOT\157\STX\r\DC4\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\STX\SOH\DC2\EOT\157\STX\SYN\ESC\n\
    \\r\n\
    \\ENQ\EOT\DC1\STX\STX\ETX\DC2\EOT\157\STX !\n\
    \\231\SOH\n\
    \\STX\EOT\DC2\DC2\ACK\169\STX\NUL\171\STX\SOH\SUB\171\SOH\n\
    \ An operation to update a Counter, either on its own or inside a\n\
    \ Map. The `increment` field can be positive or negative. When absent,\n\
    \ the meaning is an increment by 1.\n\
    \2+\n\
    \ =============== UPDATE =================\n\
    \\n\
    \\v\n\
    \\ETX\EOT\DC2\SOH\DC2\EOT\169\STX\b\DC1\n\
    \\f\n\
    \\EOT\EOT\DC2\STX\NUL\DC2\EOT\170\STX\EOT\"\n\
    \\r\n\
    \\ENQ\EOT\DC2\STX\NUL\EOT\DC2\EOT\170\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC2\STX\NUL\ENQ\DC2\EOT\170\STX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\DC2\STX\NUL\SOH\DC2\EOT\170\STX\DC4\GS\n\
    \\r\n\
    \\ENQ\EOT\DC2\STX\NUL\ETX\DC2\EOT\170\STX !\n\
    \\166\SOH\n\
    \\STX\EOT\DC3\DC2\ACK\178\STX\NUL\181\STX\SOH\SUB\151\SOH\n\
    \ An operation to update a Set, either on its own or inside a Map.\n\
    \ Set members are opaque binary values, you can only add or remove\n\
    \ them from a Set.\n\
    \\n\
    \\v\n\
    \\ETX\EOT\DC3\SOH\DC2\EOT\178\STX\b\r\n\
    \\f\n\
    \\EOT\EOT\DC3\STX\NUL\DC2\EOT\179\STX\EOT\US\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\NUL\EOT\DC2\EOT\179\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\NUL\ENQ\DC2\EOT\179\STX\r\DC2\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\NUL\SOH\DC2\EOT\179\STX\DC3\ETB\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\NUL\ETX\DC2\EOT\179\STX\GS\RS\n\
    \\f\n\
    \\EOT\EOT\DC3\STX\SOH\DC2\EOT\180\STX\EOT\US\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\SOH\EOT\DC2\EOT\180\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\SOH\ENQ\DC2\EOT\180\STX\r\DC2\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\SOH\SOH\DC2\EOT\180\STX\DC3\SUB\n\
    \\r\n\
    \\ENQ\EOT\DC3\STX\SOH\ETX\DC2\EOT\180\STX\GS\RS\n\
    \\132\SOH\n\
    \\STX\EOT\DC4\DC2\ACK\188\STX\NUL\190\STX\SOH\SUBv\n\
    \ An operation to update a GSet, on its own.\n\
    \ GSet members are opaque binary values, you can only add\n\
    \ them to a Set.\n\
    \\n\
    \\v\n\
    \\ETX\EOT\DC4\SOH\DC2\EOT\188\STX\b\SO\n\
    \\f\n\
    \\EOT\EOT\DC4\STX\NUL\DC2\EOT\189\STX\EOT\US\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\NUL\EOT\DC2\EOT\189\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\NUL\ENQ\DC2\EOT\189\STX\r\DC2\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\NUL\SOH\DC2\EOT\189\STX\DC3\ETB\n\
    \\r\n\
    \\ENQ\EOT\DC4\STX\NUL\ETX\DC2\EOT\189\STX\GS\RS\n\
    \i\n\
    \\STX\EOT\NAK\DC2\ACK\196\STX\NUL\198\STX\SOH\SUB[\n\
    \ An operation to update a Hyperloglog Set, a top-level DT.\n\
    \ You can only add to a HllSet.\n\
    \\n\
    \\v\n\
    \\ETX\EOT\NAK\SOH\DC2\EOT\196\STX\b\r\n\
    \\f\n\
    \\EOT\EOT\NAK\STX\NUL\DC2\EOT\197\STX\EOT\US\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\NUL\EOT\DC2\EOT\197\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\NUL\ENQ\DC2\EOT\197\STX\r\DC2\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\NUL\SOH\DC2\EOT\197\STX\DC3\ETB\n\
    \\r\n\
    \\ENQ\EOT\NAK\STX\NUL\ETX\DC2\EOT\197\STX\GS\RS\n\
    \\206\SOH\n\
    \\STX\EOT\SYN\DC2\ACK\205\STX\NUL\228\STX\SOH\SUB\191\SOH\n\
    \ An operation to be applied to a value stored in a Map -- the\n\
    \ contents of an UPDATE operation. The operation field that is\n\
    \ present depends on the type of the field to which it is applied.\n\
    \\n\
    \\v\n\
    \\ETX\EOT\SYN\SOH\DC2\EOT\205\STX\b\DC1\n\
    \\131\SOH\n\
    \\EOT\EOT\SYN\EOT\NUL\DC2\ACK\210\STX\EOT\213\STX\ENQ\SUBs\n\
    \ Flags only exist inside Maps and can only be enabled or\n\
    \ disabled, and there are no arguments to the operations.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SYN\EOT\NUL\SOH\DC2\EOT\210\STX\t\SI\n\
    \\SO\n\
    \\ACK\EOT\SYN\EOT\NUL\STX\NUL\DC2\EOT\211\STX\b\DC4\n\
    \\SI\n\
    \\a\EOT\SYN\EOT\NUL\STX\NUL\SOH\DC2\EOT\211\STX\b\SO\n\
    \\SI\n\
    \\a\EOT\SYN\EOT\NUL\STX\NUL\STX\DC2\EOT\211\STX\DC2\DC3\n\
    \\SO\n\
    \\ACK\EOT\SYN\EOT\NUL\STX\SOH\DC2\EOT\212\STX\b\DC4\n\
    \\SI\n\
    \\a\EOT\SYN\EOT\NUL\STX\SOH\SOH\DC2\EOT\212\STX\b\SI\n\
    \\SI\n\
    \\a\EOT\SYN\EOT\NUL\STX\SOH\STX\DC2\EOT\212\STX\DC2\DC3\n\
    \\f\n\
    \\EOT\EOT\SYN\STX\NUL\DC2\EOT\215\STX\EOT'\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\NUL\EOT\DC2\EOT\215\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\NUL\ACK\DC2\EOT\215\STX\r\NAK\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\NUL\SOH\DC2\EOT\215\STX\ETB\FS\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\NUL\ETX\DC2\EOT\215\STX%&\n\
    \\f\n\
    \\EOT\EOT\SYN\STX\SOH\DC2\EOT\217\STX\EOT'\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\SOH\EOT\DC2\EOT\217\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\SOH\ACK\DC2\EOT\217\STX\r\SYN\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\SOH\SOH\DC2\EOT\217\STX\ETB!\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\SOH\ETX\DC2\EOT\217\STX%&\n\
    \\f\n\
    \\EOT\EOT\SYN\STX\STX\DC2\EOT\218\STX\EOT'\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\STX\EOT\DC2\EOT\218\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\STX\ACK\DC2\EOT\218\STX\r\DC2\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\STX\SOH\DC2\EOT\218\STX\ETB\GS\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\STX\ETX\DC2\EOT\218\STX%&\n\
    \\131\SOH\n\
    \\EOT\EOT\SYN\STX\ETX\DC2\EOT\224\STX\EOT'\SUBu\n\
    \ There is only one operation on a register, which is to set its\n\
    \ value, therefore the \"operation\" is the new value.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\ETX\EOT\DC2\EOT\224\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\ETX\ENQ\DC2\EOT\224\STX\r\DC2\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\ETX\SOH\DC2\EOT\224\STX\ETB\"\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\ETX\ETX\DC2\EOT\224\STX%&\n\
    \\f\n\
    \\EOT\EOT\SYN\STX\EOT\DC2\EOT\225\STX\EOT'\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\EOT\EOT\DC2\EOT\225\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\EOT\ACK\DC2\EOT\225\STX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\EOT\SOH\DC2\EOT\225\STX\ETB\RS\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\EOT\ETX\DC2\EOT\225\STX%&\n\
    \\f\n\
    \\EOT\EOT\SYN\STX\ENQ\DC2\EOT\226\STX\EOT'\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\ENQ\EOT\DC2\EOT\226\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\ENQ\ACK\DC2\EOT\226\STX\r\DC2\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\ENQ\SOH\DC2\EOT\226\STX\ETB\GS\n\
    \\r\n\
    \\ENQ\EOT\SYN\STX\ENQ\ETX\DC2\EOT\226\STX%&\n\
    \e\n\
    \\STX\EOT\ETB\DC2\ACK\234\STX\NUL\242\STX\SOH\SUBW\n\
    \ An operation to update a Map. All operations apply to individual\n\
    \ fields in the Map.\n\
    \\n\
    \\v\n\
    \\ETX\EOT\ETB\SOH\DC2\EOT\234\STX\b\r\n\
    \\139\SOH\n\
    \\EOT\EOT\ETB\STX\NUL\DC2\EOT\240\STX\EOT#\SUB}\n\
    \  REMOVE removes a field and value from the Map.\n\
    \ UPDATE applies type-specific\n\
    \ operations to the values stored in the Map.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\NUL\EOT\DC2\EOT\240\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\NUL\ACK\DC2\EOT\240\STX\r\NAK\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\NUL\SOH\DC2\EOT\240\STX\ETB\RS\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\NUL\ETX\DC2\EOT\240\STX!\"\n\
    \\f\n\
    \\EOT\EOT\ETB\STX\SOH\DC2\EOT\241\STX\EOT#\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\SOH\EOT\DC2\EOT\241\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\SOH\ACK\DC2\EOT\241\STX\r\SYN\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\SOH\SOH\DC2\EOT\241\STX\ETB\RS\n\
    \\r\n\
    \\ENQ\EOT\ETB\STX\SOH\ETX\DC2\EOT\241\STX!\"\n\
    \u\n\
    \\STX\EOT\CAN\DC2\ACK\248\STX\NUL\129\ETX\SOH\SUBg\n\
    \ A \"union\" type for update operations. The included operation\n\
    \ depends on the datatype being updated.\n\
    \\n\
    \\v\n\
    \\ETX\EOT\CAN\SOH\DC2\EOT\248\STX\b\f\n\
    \\f\n\
    \\EOT\EOT\CAN\STX\NUL\DC2\EOT\249\STX\EOT&\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\NUL\EOT\DC2\EOT\249\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\NUL\ACK\DC2\EOT\249\STX\r\SYN\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\NUL\SOH\DC2\EOT\249\STX\ETB!\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\NUL\ETX\DC2\EOT\249\STX$%\n\
    \\f\n\
    \\EOT\EOT\CAN\STX\SOH\DC2\EOT\250\STX\EOT&\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\SOH\EOT\DC2\EOT\250\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\SOH\ACK\DC2\EOT\250\STX\r\DC2\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\SOH\SOH\DC2\EOT\250\STX\ETB\GS\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\SOH\ETX\DC2\EOT\250\STX$%\n\
    \\f\n\
    \\EOT\EOT\CAN\STX\STX\DC2\EOT\251\STX\EOT&\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\STX\EOT\DC2\EOT\251\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\STX\ACK\DC2\EOT\251\STX\r\DC2\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\STX\SOH\DC2\EOT\251\STX\ETB\GS\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\STX\ETX\DC2\EOT\251\STX$%\n\
    \Z\n\
    \\EOT\EOT\CAN\STX\ETX\DC2\EOT\255\STX\EOT&\SUBL Adding values to a hyperloglog (set) is just like adding values\n\
    \ to a set.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\ETX\EOT\DC2\EOT\255\STX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\ETX\ACK\DC2\EOT\255\STX\r\DC2\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\ETX\SOH\DC2\EOT\255\STX\ETB\GS\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\ETX\ETX\DC2\EOT\255\STX$%\n\
    \\f\n\
    \\EOT\EOT\CAN\STX\EOT\DC2\EOT\128\ETX\EOT&\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\EOT\EOT\DC2\EOT\128\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\EOT\ACK\DC2\EOT\128\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\EOT\SOH\DC2\EOT\128\ETX\ETB\RS\n\
    \\r\n\
    \\ENQ\EOT\CAN\STX\EOT\ETX\DC2\EOT\128\ETX$%\n\
    \\133\STX\n\
    \\STX\EOT\EM\DC2\ACK\137\ETX\NUL\158\ETX\SOH\SUB\246\SOH\n\
    \ The equivalent of KV's \"RpbPutReq\", results in an empty response or\n\
    \ \"DtUpdateResp\" if `return_body` is specified, or the key is\n\
    \ assigned by the server. The request-time options are limited to\n\
    \ ones that are relevant to structured data-types.\n\
    \\n\
    \\v\n\
    \\ETX\EOT\EM\SOH\DC2\EOT\137\ETX\b\DC3\n\
    \\RS\n\
    \\EOT\EOT\EM\STX\NUL\DC2\EOT\139\ETX\EOT\RS\SUB\DLE The identifier\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\NUL\EOT\DC2\EOT\139\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\NUL\ENQ\DC2\EOT\139\ETX\r\DC2\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\NUL\SOH\DC2\EOT\139\ETX\DC3\EM\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\NUL\ETX\DC2\EOT\139\ETX\FS\GS\n\
    \C\n\
    \\EOT\EOT\EM\STX\SOH\DC2\EOT\140\ETX\EOT\RS\"5 missing key results in server-assigned key, like KV\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\SOH\EOT\DC2\EOT\140\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\SOH\ENQ\DC2\EOT\140\ETX\r\DC2\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\SOH\SOH\DC2\EOT\140\ETX\DC3\SYN\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\SOH\ETX\DC2\EOT\140\ETX\FS\GS\n\
    \]\n\
    \\EOT\EOT\EM\STX\STX\DC2\EOT\141\ETX\EOT\RS\"O bucket type, not data-type (but the data-type is constrained per bucket-type)\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\STX\EOT\DC2\EOT\141\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\STX\ENQ\DC2\EOT\141\ETX\r\DC2\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\STX\SOH\DC2\EOT\141\ETX\DC3\ETB\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\STX\ETX\DC2\EOT\141\ETX\FS\GS\n\
    \%\n\
    \\EOT\EOT\EM\STX\ETX\DC2\EOT\144\ETX\EOT\US\SUB\ETB Opaque update-context\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\ETX\EOT\DC2\EOT\144\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\ETX\ENQ\DC2\EOT\144\ETX\r\DC2\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\ETX\SOH\DC2\EOT\144\ETX\DC3\SUB\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\ETX\ETX\DC2\EOT\144\ETX\GS\RS\n\
    \\RS\n\
    \\EOT\EOT\EM\STX\EOT\DC2\EOT\147\ETX\EOT\SUB\SUB\DLE The operations\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\EOT\EOT\DC2\EOT\147\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\EOT\ACK\DC2\EOT\147\ETX\r\DC1\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\EOT\SOH\DC2\EOT\147\ETX\DC3\NAK\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\EOT\ETX\DC2\EOT\147\ETX\CAN\EM\n\
    \\US\n\
    \\EOT\EOT\EM\STX\ENQ\DC2\EOT\150\ETX\EOT)\SUB\DC1 Request options\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\ENQ\EOT\DC2\EOT\150\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\ENQ\ENQ\DC2\EOT\150\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\ENQ\SOH\DC2\EOT\150\ETX\DC4\NAK\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\ENQ\ETX\DC2\EOT\150\ETX'(\n\
    \\f\n\
    \\EOT\EOT\EM\STX\ACK\DC2\EOT\151\ETX\EOT)\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\ACK\EOT\DC2\EOT\151\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\ACK\ENQ\DC2\EOT\151\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\ACK\SOH\DC2\EOT\151\ETX\DC4\SYN\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\ACK\ETX\DC2\EOT\151\ETX'(\n\
    \\f\n\
    \\EOT\EOT\EM\STX\a\DC2\EOT\152\ETX\EOT)\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\a\EOT\DC2\EOT\152\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\a\ENQ\DC2\EOT\152\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\a\SOH\DC2\EOT\152\ETX\DC4\SYN\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\a\ETX\DC2\EOT\152\ETX'(\n\
    \\f\n\
    \\EOT\EOT\EM\STX\b\DC2\EOT\153\ETX\EOT9\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\b\EOT\DC2\EOT\153\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\b\ENQ\DC2\EOT\153\ETX\r\DC1\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\b\SOH\DC2\EOT\153\ETX\DC4\US\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\b\ETX\DC2\EOT\153\ETX'(\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\b\b\DC2\EOT\153\ETX)8\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\b\a\DC2\EOT\153\ETX27\n\
    \\f\n\
    \\EOT\EOT\EM\STX\t\DC2\EOT\154\ETX\EOT)\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\t\EOT\DC2\EOT\154\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\t\ENQ\DC2\EOT\154\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\t\SOH\DC2\EOT\154\ETX\DC4\ESC\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\t\ETX\DC2\EOT\154\ETX&(\n\
    \2\n\
    \\EOT\EOT\EM\STX\n\
    \\DC2\EOT\155\ETX\EOT)\"$ Experimental, may change/disappear\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\n\
    \\EOT\DC2\EOT\155\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\n\
    \\ENQ\DC2\EOT\155\ETX\r\DC1\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\n\
    \\SOH\DC2\EOT\155\ETX\DC4!\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\n\
    \\ETX\DC2\EOT\155\ETX&(\n\
    \2\n\
    \\EOT\EOT\EM\STX\v\DC2\EOT\156\ETX\EOT)\"$ Experimental, may change/disappear\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\v\EOT\DC2\EOT\156\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\v\ENQ\DC2\EOT\156\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\v\SOH\DC2\EOT\156\ETX\DC4\EM\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\v\ETX\DC2\EOT\156\ETX&(\n\
    \M\n\
    \\EOT\EOT\EM\STX\f\DC2\EOT\157\ETX\EOT8\"? When return_body is true, should the context be returned too?\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\f\EOT\DC2\EOT\157\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\f\ENQ\DC2\EOT\157\ETX\r\DC1\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\f\SOH\DC2\EOT\157\ETX\DC4#\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\f\ETX\DC2\EOT\157\ETX&(\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\f\b\DC2\EOT\157\ETX)7\n\
    \\r\n\
    \\ENQ\EOT\EM\STX\f\a\DC2\EOT\157\ETX26\n\
    \\176\SOH\n\
    \\STX\EOT\SUB\DC2\ACK\166\ETX\NUL\177\ETX\SOH\SUB\161\SOH\n\
    \ The equivalent of KV's \"RpbPutResp\", contains the assigned key if\n\
    \ it was assigned by the server, and the resulting value and context\n\
    \ if return_body was set.\n\
    \\n\
    \\v\n\
    \\ETX\EOT\SUB\SOH\DC2\EOT\166\ETX\b\DC4\n\
    \2\n\
    \\EOT\EOT\SUB\STX\NUL\DC2\EOT\168\ETX\EOT(\SUB$ The key, if assigned by the server\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\NUL\EOT\DC2\EOT\168\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\NUL\ENQ\DC2\EOT\168\ETX\r\DC2\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\NUL\SOH\DC2\EOT\168\ETX\SYN\EM\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\NUL\ETX\DC2\EOT\168\ETX&'\n\
    \L\n\
    \\EOT\EOT\SUB\STX\SOH\DC2\EOT\171\ETX\EOT(\SUB> The opaque update context and value, if return_body was set.\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\SOH\EOT\DC2\EOT\171\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\SOH\ENQ\DC2\EOT\171\ETX\r\DC2\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\SOH\SOH\DC2\EOT\171\ETX\SYN\GS\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\SOH\ETX\DC2\EOT\171\ETX&'\n\
    \\f\n\
    \\EOT\EOT\SUB\STX\STX\DC2\EOT\172\ETX\EOT(\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\STX\EOT\DC2\EOT\172\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\STX\ENQ\DC2\EOT\172\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\STX\SOH\DC2\EOT\172\ETX\SYN#\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\STX\ETX\DC2\EOT\172\ETX&'\n\
    \\f\n\
    \\EOT\EOT\SUB\STX\ETX\DC2\EOT\173\ETX\EOT(\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\ETX\EOT\DC2\EOT\173\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\ETX\ENQ\DC2\EOT\173\ETX\r\DC2\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\ETX\SOH\DC2\EOT\173\ETX\SYN\US\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\ETX\ETX\DC2\EOT\173\ETX&'\n\
    \\f\n\
    \\EOT\EOT\SUB\STX\EOT\DC2\EOT\174\ETX\EOT(\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\EOT\EOT\DC2\EOT\174\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\EOT\ACK\DC2\EOT\174\ETX\r\NAK\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\EOT\SOH\DC2\EOT\174\ETX\SYN\US\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\EOT\ETX\DC2\EOT\174\ETX&'\n\
    \\f\n\
    \\EOT\EOT\SUB\STX\ENQ\DC2\EOT\175\ETX\EOT(\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\ENQ\EOT\DC2\EOT\175\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\ENQ\ENQ\DC2\EOT\175\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\ENQ\SOH\DC2\EOT\175\ETX\SYN\US\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\ENQ\ETX\DC2\EOT\175\ETX&'\n\
    \\f\n\
    \\EOT\EOT\SUB\STX\ACK\DC2\EOT\176\ETX\EOT(\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\ACK\EOT\DC2\EOT\176\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\ACK\ENQ\DC2\EOT\176\ETX\r\DC2\n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\ACK\SOH\DC2\EOT\176\ETX\SYN \n\
    \\r\n\
    \\ENQ\EOT\SUB\STX\ACK\ETX\DC2\EOT\176\ETX&'\n\
    \\n\
    \\n\
    \\STX\EOT\ESC\DC2\EOT\180\ETX\NUL\ETB\n\
    \\v\n\
    \\ETX\EOT\ESC\SOH\DC2\EOT\180\ETX\b\DC3\n\
    \\n\
    \\n\
    \\STX\EOT\FS\DC2\EOT\181\ETX\NUL\SYN\n\
    \\v\n\
    \\ETX\EOT\FS\SOH\DC2\EOT\181\ETX\b\DC2\n\
    \\n\
    \\n\
    \\STX\EOT\GS\DC2\EOT\182\ETX\NUL\GS\n\
    \\v\n\
    \\ETX\EOT\GS\SOH\DC2\EOT\182\ETX\b\EM\n\
    \\n\
    \\n\
    \\STX\EOT\RS\DC2\EOT\183\ETX\NUL\US\n\
    \\v\n\
    \\ETX\EOT\RS\SOH\DC2\EOT\183\ETX\b\ESC\n\
    \\n\
    \\n\
    \\STX\EOT\US\DC2\EOT\184\ETX\NUL\SYN\n\
    \\v\n\
    \\ETX\EOT\US\SOH\DC2\EOT\184\ETX\b\DC2\n\
    \\n\
    \\n\
    \\STX\EOT \DC2\EOT\185\ETX\NUL\ETB\n\
    \\v\n\
    \\ETX\EOT \SOH\DC2\EOT\185\ETX\b\DC3\n\
    \\n\
    \\n\
    \\STX\EOT!\DC2\EOT\186\ETX\NUL\RS\n\
    \\v\n\
    \\ETX\EOT!\SOH\DC2\EOT\186\ETX\b\SUB\n\
    \\n\
    \\n\
    \\STX\EOT\"\DC2\EOT\187\ETX\NUL\FS\n\
    \\v\n\
    \\ETX\EOT\"\SOH\DC2\EOT\187\ETX\b\CAN\n\
    \\130\STX\n\
    \\STX\EOT#\DC2\ACK\210\ETX\NUL\212\ETX\SOH\SUBU Get ClientId Request - no message defined, just send RpbGetClientIdReq message code\n\
    \2v Java package specifiers\n\
    \ option java_package = \"com.basho.riak.protobuf\";\n\
    \ option java_outer_classname = \"RiakKvPB\";\n\
    \2% import \"riak.proto\"; // for RpbPair\n\
    \\n\
    \\v\n\
    \\ETX\EOT#\SOH\DC2\EOT\210\ETX\b\SUB\n\
    \4\n\
    \\EOT\EOT#\STX\NUL\DC2\EOT\211\ETX\EOT!\"& Client id in use for this connection\n\
    \\n\
    \\r\n\
    \\ENQ\EOT#\STX\NUL\EOT\DC2\EOT\211\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT#\STX\NUL\ENQ\DC2\EOT\211\ETX\r\DC2\n\
    \\r\n\
    \\ENQ\EOT#\STX\NUL\SOH\DC2\EOT\211\ETX\DC3\FS\n\
    \\r\n\
    \\ENQ\EOT#\STX\NUL\ETX\DC2\EOT\211\ETX\US \n\
    \\f\n\
    \\STX\EOT$\DC2\ACK\214\ETX\NUL\216\ETX\SOH\n\
    \\v\n\
    \\ETX\EOT$\SOH\DC2\EOT\214\ETX\b\EM\n\
    \4\n\
    \\EOT\EOT$\STX\NUL\DC2\EOT\215\ETX\EOT!\"& Client id to use for this connection\n\
    \\n\
    \\r\n\
    \\ENQ\EOT$\STX\NUL\EOT\DC2\EOT\215\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT$\STX\NUL\ENQ\DC2\EOT\215\ETX\r\DC2\n\
    \\r\n\
    \\ENQ\EOT$\STX\NUL\SOH\DC2\EOT\215\ETX\DC3\FS\n\
    \\r\n\
    \\ENQ\EOT$\STX\NUL\ETX\DC2\EOT\215\ETX\US \n\
    \1\n\
    \\STX\EOT%\DC2\ACK\221\ETX\NUL\235\ETX\SOH\SUB# Get Request - retrieve bucket/key\n\
    \\n\
    \\v\n\
    \\ETX\EOT%\SOH\DC2\EOT\221\ETX\b\DC1\n\
    \\f\n\
    \\EOT\EOT%\STX\NUL\DC2\EOT\222\ETX\EOT\RS\n\
    \\r\n\
    \\ENQ\EOT%\STX\NUL\EOT\DC2\EOT\222\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT%\STX\NUL\ENQ\DC2\EOT\222\ETX\r\DC2\n\
    \\r\n\
    \\ENQ\EOT%\STX\NUL\SOH\DC2\EOT\222\ETX\DC3\EM\n\
    \\r\n\
    \\ENQ\EOT%\STX\NUL\ETX\DC2\EOT\222\ETX\FS\GS\n\
    \\f\n\
    \\EOT\EOT%\STX\SOH\DC2\EOT\223\ETX\EOT\ESC\n\
    \\r\n\
    \\ENQ\EOT%\STX\SOH\EOT\DC2\EOT\223\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT%\STX\SOH\ENQ\DC2\EOT\223\ETX\r\DC2\n\
    \\r\n\
    \\ENQ\EOT%\STX\SOH\SOH\DC2\EOT\223\ETX\DC3\SYN\n\
    \\r\n\
    \\ENQ\EOT%\STX\SOH\ETX\DC2\EOT\223\ETX\EM\SUB\n\
    \\f\n\
    \\EOT\EOT%\STX\STX\DC2\EOT\224\ETX\EOT\SUB\n\
    \\r\n\
    \\ENQ\EOT%\STX\STX\EOT\DC2\EOT\224\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT%\STX\STX\ENQ\DC2\EOT\224\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT%\STX\STX\SOH\DC2\EOT\224\ETX\DC4\NAK\n\
    \\r\n\
    \\ENQ\EOT%\STX\STX\ETX\DC2\EOT\224\ETX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT%\STX\ETX\DC2\EOT\225\ETX\EOT\ESC\n\
    \\r\n\
    \\ENQ\EOT%\STX\ETX\EOT\DC2\EOT\225\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT%\STX\ETX\ENQ\DC2\EOT\225\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT%\STX\ETX\SOH\DC2\EOT\225\ETX\DC4\SYN\n\
    \\r\n\
    \\ENQ\EOT%\STX\ETX\ETX\DC2\EOT\225\ETX\EM\SUB\n\
    \\f\n\
    \\EOT\EOT%\STX\EOT\DC2\EOT\226\ETX\EOT#\n\
    \\r\n\
    \\ENQ\EOT%\STX\EOT\EOT\DC2\EOT\226\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT%\STX\EOT\ENQ\DC2\EOT\226\ETX\r\DC1\n\
    \\r\n\
    \\ENQ\EOT%\STX\EOT\SOH\DC2\EOT\226\ETX\DC2\RS\n\
    \\r\n\
    \\ENQ\EOT%\STX\EOT\ETX\DC2\EOT\226\ETX!\"\n\
    \\f\n\
    \\EOT\EOT%\STX\ENQ\DC2\EOT\227\ETX\EOT\"\n\
    \\r\n\
    \\ENQ\EOT%\STX\ENQ\EOT\DC2\EOT\227\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT%\STX\ENQ\ENQ\DC2\EOT\227\ETX\r\DC1\n\
    \\r\n\
    \\ENQ\EOT%\STX\ENQ\SOH\DC2\EOT\227\ETX\DC2\GS\n\
    \\r\n\
    \\ENQ\EOT%\STX\ENQ\ETX\DC2\EOT\227\ETX !\n\
    \:\n\
    \\EOT\EOT%\STX\ACK\DC2\EOT\228\ETX\EOT#\", fail if the supplied vclock does not match\n\
    \\n\
    \\r\n\
    \\ENQ\EOT%\STX\ACK\EOT\DC2\EOT\228\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT%\STX\ACK\ENQ\DC2\EOT\228\ETX\r\DC2\n\
    \\r\n\
    \\ENQ\EOT%\STX\ACK\SOH\DC2\EOT\228\ETX\DC3\RS\n\
    \\r\n\
    \\ENQ\EOT%\STX\ACK\ETX\DC2\EOT\228\ETX!\"\n\
    \/\n\
    \\EOT\EOT%\STX\a\DC2\EOT\229\ETX\EOT\ESC\"! return everything but the value\n\
    \\n\
    \\r\n\
    \\ENQ\EOT%\STX\a\EOT\DC2\EOT\229\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT%\STX\a\ENQ\DC2\EOT\229\ETX\r\DC1\n\
    \\r\n\
    \\ENQ\EOT%\STX\a\SOH\DC2\EOT\229\ETX\DC2\SYN\n\
    \\r\n\
    \\ENQ\EOT%\STX\a\ETX\DC2\EOT\229\ETX\EM\SUB\n\
    \<\n\
    \\EOT\EOT%\STX\b\DC2\EOT\230\ETX\EOT$\". return the tombstone's vclock, if applicable\n\
    \\n\
    \\r\n\
    \\ENQ\EOT%\STX\b\EOT\DC2\EOT\230\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT%\STX\b\ENQ\DC2\EOT\230\ETX\r\DC1\n\
    \\r\n\
    \\ENQ\EOT%\STX\b\SOH\DC2\EOT\230\ETX\DC2\US\n\
    \\r\n\
    \\ENQ\EOT%\STX\b\ETX\DC2\EOT\230\ETX\"#\n\
    \\f\n\
    \\EOT\EOT%\STX\t\DC2\EOT\231\ETX\EOT!\n\
    \\r\n\
    \\ENQ\EOT%\STX\t\EOT\DC2\EOT\231\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT%\STX\t\ENQ\DC2\EOT\231\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT%\STX\t\SOH\DC2\EOT\231\ETX\DC4\ESC\n\
    \\r\n\
    \\ENQ\EOT%\STX\t\ETX\DC2\EOT\231\ETX\RS \n\
    \2\n\
    \\EOT\EOT%\STX\n\
    \\DC2\EOT\232\ETX\EOT%\"$ Experimental, may change/disappear\n\
    \\n\
    \\r\n\
    \\ENQ\EOT%\STX\n\
    \\EOT\DC2\EOT\232\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT%\STX\n\
    \\ENQ\DC2\EOT\232\ETX\r\DC1\n\
    \\r\n\
    \\ENQ\EOT%\STX\n\
    \\SOH\DC2\EOT\232\ETX\DC2\US\n\
    \\r\n\
    \\ENQ\EOT%\STX\n\
    \\ETX\DC2\EOT\232\ETX\"$\n\
    \2\n\
    \\EOT\EOT%\STX\v\DC2\EOT\233\ETX\EOT\US\"$ Experimental, may change/disappear\n\
    \\n\
    \\r\n\
    \\ENQ\EOT%\STX\v\EOT\DC2\EOT\233\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT%\STX\v\ENQ\DC2\EOT\233\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT%\STX\v\SOH\DC2\EOT\233\ETX\DC4\EM\n\
    \\r\n\
    \\ENQ\EOT%\STX\v\ETX\DC2\EOT\233\ETX\FS\RS\n\
    \D\n\
    \\EOT\EOT%\STX\f\DC2\EOT\234\ETX\EOT\GS\"6 Bucket type, if not set we assume the 'default' type\n\
    \\n\
    \\r\n\
    \\ENQ\EOT%\STX\f\EOT\DC2\EOT\234\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT%\STX\f\ENQ\DC2\EOT\234\ETX\r\DC2\n\
    \\r\n\
    \\ENQ\EOT%\STX\f\SOH\DC2\EOT\234\ETX\DC3\ETB\n\
    \\r\n\
    \\ENQ\EOT%\STX\f\ETX\DC2\EOT\234\ETX\SUB\FS\n\
    \Z\n\
    \\STX\EOT&\DC2\ACK\238\ETX\NUL\242\ETX\SOH\SUBL Get Response - if the record was not found there will be no content/vclock\n\
    \\n\
    \\v\n\
    \\ETX\EOT&\SOH\DC2\EOT\238\ETX\b\DC2\n\
    \\f\n\
    \\EOT\EOT&\STX\NUL\DC2\EOT\239\ETX\EOT$\n\
    \\r\n\
    \\ENQ\EOT&\STX\NUL\EOT\DC2\EOT\239\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT&\STX\NUL\ACK\DC2\EOT\239\ETX\r\ETB\n\
    \\r\n\
    \\ENQ\EOT&\STX\NUL\SOH\DC2\EOT\239\ETX\CAN\US\n\
    \\r\n\
    \\ENQ\EOT&\STX\NUL\ETX\DC2\EOT\239\ETX\"#\n\
    \6\n\
    \\EOT\EOT&\STX\SOH\DC2\EOT\240\ETX\EOT\RS\"( the opaque vector clock for the object\n\
    \\n\
    \\r\n\
    \\ENQ\EOT&\STX\SOH\EOT\DC2\EOT\240\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT&\STX\SOH\ENQ\DC2\EOT\240\ETX\r\DC2\n\
    \\r\n\
    \\ENQ\EOT&\STX\SOH\SOH\DC2\EOT\240\ETX\DC3\EM\n\
    \\r\n\
    \\ENQ\EOT&\STX\SOH\ETX\DC2\EOT\240\ETX\FS\GS\n\
    \\f\n\
    \\EOT\EOT&\STX\STX\DC2\EOT\241\ETX\EOT \n\
    \\r\n\
    \\ENQ\EOT&\STX\STX\EOT\DC2\EOT\241\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT&\STX\STX\ENQ\DC2\EOT\241\ETX\r\DC1\n\
    \\r\n\
    \\ENQ\EOT&\STX\STX\SOH\DC2\EOT\241\ETX\DC2\ESC\n\
    \\r\n\
    \\ENQ\EOT&\STX\STX\ETX\DC2\EOT\241\ETX\RS\US\n\
    \\135\SOH\n\
    \\STX\EOT'\DC2\ACK\247\ETX\NUL\136\EOT\SOH\SUBy Put request - if options.return_body is set then the updated metadata/data for\n\
    \               the key will be returned.\n\
    \\n\
    \\v\n\
    \\ETX\EOT'\SOH\DC2\EOT\247\ETX\b\DC1\n\
    \\f\n\
    \\EOT\EOT'\STX\NUL\DC2\EOT\248\ETX\EOT\RS\n\
    \\r\n\
    \\ENQ\EOT'\STX\NUL\EOT\DC2\EOT\248\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT'\STX\NUL\ENQ\DC2\EOT\248\ETX\r\DC2\n\
    \\r\n\
    \\ENQ\EOT'\STX\NUL\SOH\DC2\EOT\248\ETX\DC3\EM\n\
    \\r\n\
    \\ENQ\EOT'\STX\NUL\ETX\DC2\EOT\248\ETX\FS\GS\n\
    \\f\n\
    \\EOT\EOT'\STX\SOH\DC2\EOT\249\ETX\EOT\ESC\n\
    \\r\n\
    \\ENQ\EOT'\STX\SOH\EOT\DC2\EOT\249\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT'\STX\SOH\ENQ\DC2\EOT\249\ETX\r\DC2\n\
    \\r\n\
    \\ENQ\EOT'\STX\SOH\SOH\DC2\EOT\249\ETX\DC3\SYN\n\
    \\r\n\
    \\ENQ\EOT'\STX\SOH\ETX\DC2\EOT\249\ETX\EM\SUB\n\
    \\f\n\
    \\EOT\EOT'\STX\STX\DC2\EOT\250\ETX\EOT\RS\n\
    \\r\n\
    \\ENQ\EOT'\STX\STX\EOT\DC2\EOT\250\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT'\STX\STX\ENQ\DC2\EOT\250\ETX\r\DC2\n\
    \\r\n\
    \\ENQ\EOT'\STX\STX\SOH\DC2\EOT\250\ETX\DC3\EM\n\
    \\r\n\
    \\ENQ\EOT'\STX\STX\ETX\DC2\EOT\250\ETX\FS\GS\n\
    \\f\n\
    \\EOT\EOT'\STX\ETX\DC2\EOT\251\ETX\EOT$\n\
    \\r\n\
    \\ENQ\EOT'\STX\ETX\EOT\DC2\EOT\251\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT'\STX\ETX\ACK\DC2\EOT\251\ETX\r\ETB\n\
    \\r\n\
    \\ENQ\EOT'\STX\ETX\SOH\DC2\EOT\251\ETX\CAN\US\n\
    \\r\n\
    \\ENQ\EOT'\STX\ETX\ETX\DC2\EOT\251\ETX\"#\n\
    \\f\n\
    \\EOT\EOT'\STX\EOT\DC2\EOT\252\ETX\EOT\SUB\n\
    \\r\n\
    \\ENQ\EOT'\STX\EOT\EOT\DC2\EOT\252\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT'\STX\EOT\ENQ\DC2\EOT\252\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT'\STX\EOT\SOH\DC2\EOT\252\ETX\DC4\NAK\n\
    \\r\n\
    \\ENQ\EOT'\STX\EOT\ETX\DC2\EOT\252\ETX\CAN\EM\n\
    \\f\n\
    \\EOT\EOT'\STX\ENQ\DC2\EOT\253\ETX\EOT\ESC\n\
    \\r\n\
    \\ENQ\EOT'\STX\ENQ\EOT\DC2\EOT\253\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT'\STX\ENQ\ENQ\DC2\EOT\253\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT'\STX\ENQ\SOH\DC2\EOT\253\ETX\DC4\SYN\n\
    \\r\n\
    \\ENQ\EOT'\STX\ENQ\ETX\DC2\EOT\253\ETX\EM\SUB\n\
    \\f\n\
    \\EOT\EOT'\STX\ACK\DC2\EOT\254\ETX\EOT\"\n\
    \\r\n\
    \\ENQ\EOT'\STX\ACK\EOT\DC2\EOT\254\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT'\STX\ACK\ENQ\DC2\EOT\254\ETX\r\DC1\n\
    \\r\n\
    \\ENQ\EOT'\STX\ACK\SOH\DC2\EOT\254\ETX\DC2\GS\n\
    \\r\n\
    \\ENQ\EOT'\STX\ACK\ETX\DC2\EOT\254\ETX !\n\
    \\f\n\
    \\EOT\EOT'\STX\a\DC2\EOT\255\ETX\EOT\ESC\n\
    \\r\n\
    \\ENQ\EOT'\STX\a\EOT\DC2\EOT\255\ETX\EOT\f\n\
    \\r\n\
    \\ENQ\EOT'\STX\a\ENQ\DC2\EOT\255\ETX\r\DC3\n\
    \\r\n\
    \\ENQ\EOT'\STX\a\SOH\DC2\EOT\255\ETX\DC4\SYN\n\
    \\r\n\
    \\ENQ\EOT'\STX\a\ETX\DC2\EOT\255\ETX\EM\SUB\n\
    \\f\n\
    \\EOT\EOT'\STX\b\DC2\EOT\128\EOT\EOT&\n\
    \\r\n\
    \\ENQ\EOT'\STX\b\EOT\DC2\EOT\128\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT'\STX\b\ENQ\DC2\EOT\128\EOT\r\DC1\n\
    \\r\n\
    \\ENQ\EOT'\STX\b\SOH\DC2\EOT\128\EOT\DC2!\n\
    \\r\n\
    \\ENQ\EOT'\STX\b\ETX\DC2\EOT\128\EOT$%\n\
    \\f\n\
    \\EOT\EOT'\STX\t\DC2\EOT\129\EOT\EOT%\n\
    \\r\n\
    \\ENQ\EOT'\STX\t\EOT\DC2\EOT\129\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT'\STX\t\ENQ\DC2\EOT\129\EOT\r\DC1\n\
    \\r\n\
    \\ENQ\EOT'\STX\t\SOH\DC2\EOT\129\EOT\DC2\US\n\
    \\r\n\
    \\ENQ\EOT'\STX\t\ETX\DC2\EOT\129\EOT\"$\n\
    \\f\n\
    \\EOT\EOT'\STX\n\
    \\DC2\EOT\130\EOT\EOT#\n\
    \\r\n\
    \\ENQ\EOT'\STX\n\
    \\EOT\DC2\EOT\130\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT'\STX\n\
    \\ENQ\DC2\EOT\130\EOT\r\DC1\n\
    \\r\n\
    \\ENQ\EOT'\STX\n\
    \\SOH\DC2\EOT\130\EOT\DC2\GS\n\
    \\r\n\
    \\ENQ\EOT'\STX\n\
    \\ETX\DC2\EOT\130\EOT \"\n\
    \\f\n\
    \\EOT\EOT'\STX\v\DC2\EOT\131\EOT\EOT!\n\
    \\r\n\
    \\ENQ\EOT'\STX\v\EOT\DC2\EOT\131\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT'\STX\v\ENQ\DC2\EOT\131\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT'\STX\v\SOH\DC2\EOT\131\EOT\DC4\ESC\n\
    \\r\n\
    \\ENQ\EOT'\STX\v\ETX\DC2\EOT\131\EOT\RS \n\
    \\f\n\
    \\EOT\EOT'\STX\f\DC2\EOT\132\EOT\EOT\FS\n\
    \\r\n\
    \\ENQ\EOT'\STX\f\EOT\DC2\EOT\132\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT'\STX\f\ENQ\DC2\EOT\132\EOT\r\DC1\n\
    \\r\n\
    \\ENQ\EOT'\STX\f\SOH\DC2\EOT\132\EOT\DC2\SYN\n\
    \\r\n\
    \\ENQ\EOT'\STX\f\ETX\DC2\EOT\132\EOT\EM\ESC\n\
    \2\n\
    \\EOT\EOT'\STX\r\DC2\EOT\133\EOT\EOT%\"$ Experimental, may change/disappear\n\
    \\n\
    \\r\n\
    \\ENQ\EOT'\STX\r\EOT\DC2\EOT\133\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT'\STX\r\ENQ\DC2\EOT\133\EOT\r\DC1\n\
    \\r\n\
    \\ENQ\EOT'\STX\r\SOH\DC2\EOT\133\EOT\DC2\US\n\
    \\r\n\
    \\ENQ\EOT'\STX\r\ETX\DC2\EOT\133\EOT\"$\n\
    \2\n\
    \\EOT\EOT'\STX\SO\DC2\EOT\134\EOT\EOT\US\"$ Experimental, may change/disappear\n\
    \\n\
    \\r\n\
    \\ENQ\EOT'\STX\SO\EOT\DC2\EOT\134\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT'\STX\SO\ENQ\DC2\EOT\134\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT'\STX\SO\SOH\DC2\EOT\134\EOT\DC4\EM\n\
    \\r\n\
    \\ENQ\EOT'\STX\SO\ETX\DC2\EOT\134\EOT\FS\RS\n\
    \D\n\
    \\EOT\EOT'\STX\SI\DC2\EOT\135\EOT\EOT\GS\"6 Bucket type, if not set we assume the 'default' type\n\
    \\n\
    \\r\n\
    \\ENQ\EOT'\STX\SI\EOT\DC2\EOT\135\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT'\STX\SI\ENQ\DC2\EOT\135\EOT\r\DC2\n\
    \\r\n\
    \\ENQ\EOT'\STX\SI\SOH\DC2\EOT\135\EOT\DC3\ETB\n\
    \\r\n\
    \\ENQ\EOT'\STX\SI\ETX\DC2\EOT\135\EOT\SUB\FS\n\
    \Z\n\
    \\STX\EOT(\DC2\ACK\139\EOT\NUL\143\EOT\SOH\SUBL Put response - same as get response with optional key if one was generated\n\
    \\n\
    \\v\n\
    \\ETX\EOT(\SOH\DC2\EOT\139\EOT\b\DC2\n\
    \\f\n\
    \\EOT\EOT(\STX\NUL\DC2\EOT\140\EOT\EOT$\n\
    \\r\n\
    \\ENQ\EOT(\STX\NUL\EOT\DC2\EOT\140\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT(\STX\NUL\ACK\DC2\EOT\140\EOT\r\ETB\n\
    \\r\n\
    \\ENQ\EOT(\STX\NUL\SOH\DC2\EOT\140\EOT\CAN\US\n\
    \\r\n\
    \\ENQ\EOT(\STX\NUL\ETX\DC2\EOT\140\EOT\"#\n\
    \6\n\
    \\EOT\EOT(\STX\SOH\DC2\EOT\141\EOT\EOT\RS\"( the opaque vector clock for the object\n\
    \\n\
    \\r\n\
    \\ENQ\EOT(\STX\SOH\EOT\DC2\EOT\141\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT(\STX\SOH\ENQ\DC2\EOT\141\EOT\r\DC2\n\
    \\r\n\
    \\ENQ\EOT(\STX\SOH\SOH\DC2\EOT\141\EOT\DC3\EM\n\
    \\r\n\
    \\ENQ\EOT(\STX\SOH\ETX\DC2\EOT\141\EOT\FS\GS\n\
    \)\n\
    \\EOT\EOT(\STX\STX\DC2\EOT\142\EOT\EOT\ESC\"\ESC the key generated, if any\n\
    \\n\
    \\r\n\
    \\ENQ\EOT(\STX\STX\EOT\DC2\EOT\142\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT(\STX\STX\ENQ\DC2\EOT\142\EOT\r\DC2\n\
    \\r\n\
    \\ENQ\EOT(\STX\STX\SOH\DC2\EOT\142\EOT\DC3\SYN\n\
    \\r\n\
    \\ENQ\EOT(\STX\STX\ETX\DC2\EOT\142\EOT\EM\SUB\n\
    \\RS\n\
    \\STX\EOT)\DC2\ACK\147\EOT\NUL\161\EOT\SOH\SUB\DLE Delete request\n\
    \\n\
    \\v\n\
    \\ETX\EOT)\SOH\DC2\EOT\147\EOT\b\DC1\n\
    \\f\n\
    \\EOT\EOT)\STX\NUL\DC2\EOT\148\EOT\EOT\RS\n\
    \\r\n\
    \\ENQ\EOT)\STX\NUL\EOT\DC2\EOT\148\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT)\STX\NUL\ENQ\DC2\EOT\148\EOT\r\DC2\n\
    \\r\n\
    \\ENQ\EOT)\STX\NUL\SOH\DC2\EOT\148\EOT\DC3\EM\n\
    \\r\n\
    \\ENQ\EOT)\STX\NUL\ETX\DC2\EOT\148\EOT\FS\GS\n\
    \\f\n\
    \\EOT\EOT)\STX\SOH\DC2\EOT\149\EOT\EOT\ESC\n\
    \\r\n\
    \\ENQ\EOT)\STX\SOH\EOT\DC2\EOT\149\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT)\STX\SOH\ENQ\DC2\EOT\149\EOT\r\DC2\n\
    \\r\n\
    \\ENQ\EOT)\STX\SOH\SOH\DC2\EOT\149\EOT\DC3\SYN\n\
    \\r\n\
    \\ENQ\EOT)\STX\SOH\ETX\DC2\EOT\149\EOT\EM\SUB\n\
    \\f\n\
    \\EOT\EOT)\STX\STX\DC2\EOT\150\EOT\EOT\ESC\n\
    \\r\n\
    \\ENQ\EOT)\STX\STX\EOT\DC2\EOT\150\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT)\STX\STX\ENQ\DC2\EOT\150\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT)\STX\STX\SOH\DC2\EOT\150\EOT\DC4\SYN\n\
    \\r\n\
    \\ENQ\EOT)\STX\STX\ETX\DC2\EOT\150\EOT\EM\SUB\n\
    \\f\n\
    \\EOT\EOT)\STX\ETX\DC2\EOT\151\EOT\EOT\RS\n\
    \\r\n\
    \\ENQ\EOT)\STX\ETX\EOT\DC2\EOT\151\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT)\STX\ETX\ENQ\DC2\EOT\151\EOT\r\DC2\n\
    \\r\n\
    \\ENQ\EOT)\STX\ETX\SOH\DC2\EOT\151\EOT\DC3\EM\n\
    \\r\n\
    \\ENQ\EOT)\STX\ETX\ETX\DC2\EOT\151\EOT\FS\GS\n\
    \\f\n\
    \\EOT\EOT)\STX\EOT\DC2\EOT\152\EOT\EOT\SUB\n\
    \\r\n\
    \\ENQ\EOT)\STX\EOT\EOT\DC2\EOT\152\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT)\STX\EOT\ENQ\DC2\EOT\152\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT)\STX\EOT\SOH\DC2\EOT\152\EOT\DC4\NAK\n\
    \\r\n\
    \\ENQ\EOT)\STX\EOT\ETX\DC2\EOT\152\EOT\CAN\EM\n\
    \\f\n\
    \\EOT\EOT)\STX\ENQ\DC2\EOT\153\EOT\EOT\SUB\n\
    \\r\n\
    \\ENQ\EOT)\STX\ENQ\EOT\DC2\EOT\153\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT)\STX\ENQ\ENQ\DC2\EOT\153\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT)\STX\ENQ\SOH\DC2\EOT\153\EOT\DC4\NAK\n\
    \\r\n\
    \\ENQ\EOT)\STX\ENQ\ETX\DC2\EOT\153\EOT\CAN\EM\n\
    \\f\n\
    \\EOT\EOT)\STX\ACK\DC2\EOT\154\EOT\EOT\ESC\n\
    \\r\n\
    \\ENQ\EOT)\STX\ACK\EOT\DC2\EOT\154\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT)\STX\ACK\ENQ\DC2\EOT\154\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT)\STX\ACK\SOH\DC2\EOT\154\EOT\DC4\SYN\n\
    \\r\n\
    \\ENQ\EOT)\STX\ACK\ETX\DC2\EOT\154\EOT\EM\SUB\n\
    \\f\n\
    \\EOT\EOT)\STX\a\DC2\EOT\155\EOT\EOT\ESC\n\
    \\r\n\
    \\ENQ\EOT)\STX\a\EOT\DC2\EOT\155\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT)\STX\a\ENQ\DC2\EOT\155\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT)\STX\a\SOH\DC2\EOT\155\EOT\DC4\SYN\n\
    \\r\n\
    \\ENQ\EOT)\STX\a\ETX\DC2\EOT\155\EOT\EM\SUB\n\
    \\f\n\
    \\EOT\EOT)\STX\b\DC2\EOT\156\EOT\EOT\ESC\n\
    \\r\n\
    \\ENQ\EOT)\STX\b\EOT\DC2\EOT\156\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT)\STX\b\ENQ\DC2\EOT\156\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT)\STX\b\SOH\DC2\EOT\156\EOT\DC4\SYN\n\
    \\r\n\
    \\ENQ\EOT)\STX\b\ETX\DC2\EOT\156\EOT\EM\SUB\n\
    \\f\n\
    \\EOT\EOT)\STX\t\DC2\EOT\157\EOT\EOT!\n\
    \\r\n\
    \\ENQ\EOT)\STX\t\EOT\DC2\EOT\157\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT)\STX\t\ENQ\DC2\EOT\157\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT)\STX\t\SOH\DC2\EOT\157\EOT\DC4\ESC\n\
    \\r\n\
    \\ENQ\EOT)\STX\t\ETX\DC2\EOT\157\EOT\RS \n\
    \2\n\
    \\EOT\EOT)\STX\n\
    \\DC2\EOT\158\EOT\EOT%\"$ Experimental, may change/disappear\n\
    \\n\
    \\r\n\
    \\ENQ\EOT)\STX\n\
    \\EOT\DC2\EOT\158\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT)\STX\n\
    \\ENQ\DC2\EOT\158\EOT\r\DC1\n\
    \\r\n\
    \\ENQ\EOT)\STX\n\
    \\SOH\DC2\EOT\158\EOT\DC2\US\n\
    \\r\n\
    \\ENQ\EOT)\STX\n\
    \\ETX\DC2\EOT\158\EOT\"$\n\
    \2\n\
    \\EOT\EOT)\STX\v\DC2\EOT\159\EOT\EOT\US\"$ Experimental, may change/disappear\n\
    \\n\
    \\r\n\
    \\ENQ\EOT)\STX\v\EOT\DC2\EOT\159\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT)\STX\v\ENQ\DC2\EOT\159\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT)\STX\v\SOH\DC2\EOT\159\EOT\DC4\EM\n\
    \\r\n\
    \\ENQ\EOT)\STX\v\ETX\DC2\EOT\159\EOT\FS\RS\n\
    \D\n\
    \\EOT\EOT)\STX\f\DC2\EOT\160\EOT\EOT\GS\"6 Bucket type, if not set we assume the 'default' type\n\
    \\n\
    \\r\n\
    \\ENQ\EOT)\STX\f\EOT\DC2\EOT\160\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT)\STX\f\ENQ\DC2\EOT\160\EOT\r\DC2\n\
    \\r\n\
    \\ENQ\EOT)\STX\f\SOH\DC2\EOT\160\EOT\DC3\ETB\n\
    \\r\n\
    \\ENQ\EOT)\STX\f\ETX\DC2\EOT\160\EOT\SUB\FS\n\
    \\133\SOH\n\
    \\STX\EOT*\DC2\ACK\166\EOT\NUL\170\EOT\SOH\SUB\SYN List buckets request\n\
    \2_ Delete response - not defined, will return a RpbDelResp on success or RpbErrorResp on failure\n\
    \\n\
    \\v\n\
    \\ETX\EOT*\SOH\DC2\EOT\166\EOT\b\EM\n\
    \\f\n\
    \\EOT\EOT*\STX\NUL\DC2\EOT\167\EOT\EOT \n\
    \\r\n\
    \\ENQ\EOT*\STX\NUL\EOT\DC2\EOT\167\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT*\STX\NUL\ENQ\DC2\EOT\167\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT*\STX\NUL\SOH\DC2\EOT\167\EOT\DC4\ESC\n\
    \\r\n\
    \\ENQ\EOT*\STX\NUL\ETX\DC2\EOT\167\EOT\RS\US\n\
    \\f\n\
    \\EOT\EOT*\STX\SOH\DC2\EOT\168\EOT\EOT\GS\n\
    \\r\n\
    \\ENQ\EOT*\STX\SOH\EOT\DC2\EOT\168\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT*\STX\SOH\ENQ\DC2\EOT\168\EOT\r\DC1\n\
    \\r\n\
    \\ENQ\EOT*\STX\SOH\SOH\DC2\EOT\168\EOT\DC2\CAN\n\
    \\r\n\
    \\ENQ\EOT*\STX\SOH\ETX\DC2\EOT\168\EOT\ESC\FS\n\
    \D\n\
    \\EOT\EOT*\STX\STX\DC2\EOT\169\EOT\EOT\FS\"6 Bucket type, if not set we assume the 'default' type\n\
    \\n\
    \\r\n\
    \\ENQ\EOT*\STX\STX\EOT\DC2\EOT\169\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT*\STX\STX\ENQ\DC2\EOT\169\EOT\r\DC2\n\
    \\r\n\
    \\ENQ\EOT*\STX\STX\SOH\DC2\EOT\169\EOT\DC3\ETB\n\
    \\r\n\
    \\ENQ\EOT*\STX\STX\ETX\DC2\EOT\169\EOT\SUB\ESC\n\
    \\157\SOH\n\
    \\STX\EOT+\DC2\ACK\174\EOT\NUL\177\EOT\SOH\SUB\142\SOH List buckets response - one or more of these packets will be sent\n\
    \ the last one will have done set true (and may not have any buckets in it)\n\
    \\n\
    \\v\n\
    \\ETX\EOT+\SOH\DC2\EOT\174\EOT\b\SUB\n\
    \\f\n\
    \\EOT\EOT+\STX\NUL\DC2\EOT\175\EOT\EOT\US\n\
    \\r\n\
    \\ENQ\EOT+\STX\NUL\EOT\DC2\EOT\175\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT+\STX\NUL\ENQ\DC2\EOT\175\EOT\r\DC2\n\
    \\r\n\
    \\ENQ\EOT+\STX\NUL\SOH\DC2\EOT\175\EOT\DC3\SUB\n\
    \\r\n\
    \\ENQ\EOT+\STX\NUL\ETX\DC2\EOT\175\EOT\GS\RS\n\
    \\f\n\
    \\EOT\EOT+\STX\SOH\DC2\EOT\176\EOT\EOT\ESC\n\
    \\r\n\
    \\ENQ\EOT+\STX\SOH\EOT\DC2\EOT\176\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT+\STX\SOH\ENQ\DC2\EOT\176\EOT\r\DC1\n\
    \\r\n\
    \\ENQ\EOT+\STX\SOH\SOH\DC2\EOT\176\EOT\DC2\SYN\n\
    \\r\n\
    \\ENQ\EOT+\STX\SOH\ETX\DC2\EOT\176\EOT\EM\SUB\n\
    \+\n\
    \\STX\EOT,\DC2\ACK\181\EOT\NUL\185\EOT\SOH\SUB\GS List keys in bucket request\n\
    \\n\
    \\v\n\
    \\ETX\EOT,\SOH\DC2\EOT\181\EOT\b\SYN\n\
    \\f\n\
    \\EOT\EOT,\STX\NUL\DC2\EOT\182\EOT\EOT\RS\n\
    \\r\n\
    \\ENQ\EOT,\STX\NUL\EOT\DC2\EOT\182\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT,\STX\NUL\ENQ\DC2\EOT\182\EOT\r\DC2\n\
    \\r\n\
    \\ENQ\EOT,\STX\NUL\SOH\DC2\EOT\182\EOT\DC3\EM\n\
    \\r\n\
    \\ENQ\EOT,\STX\NUL\ETX\DC2\EOT\182\EOT\FS\GS\n\
    \\f\n\
    \\EOT\EOT,\STX\SOH\DC2\EOT\183\EOT\EOT \n\
    \\r\n\
    \\ENQ\EOT,\STX\SOH\EOT\DC2\EOT\183\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT,\STX\SOH\ENQ\DC2\EOT\183\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT,\STX\SOH\SOH\DC2\EOT\183\EOT\DC4\ESC\n\
    \\r\n\
    \\ENQ\EOT,\STX\SOH\ETX\DC2\EOT\183\EOT\RS\US\n\
    \D\n\
    \\EOT\EOT,\STX\STX\DC2\EOT\184\EOT\EOT\FS\"6 Bucket type, if not set we assume the 'default' type\n\
    \\n\
    \\r\n\
    \\ENQ\EOT,\STX\STX\EOT\DC2\EOT\184\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT,\STX\STX\ENQ\DC2\EOT\184\EOT\r\DC2\n\
    \\r\n\
    \\ENQ\EOT,\STX\STX\SOH\DC2\EOT\184\EOT\DC3\ETB\n\
    \\r\n\
    \\ENQ\EOT,\STX\STX\ETX\DC2\EOT\184\EOT\SUB\ESC\n\
    \\161\SOH\n\
    \\STX\EOT-\DC2\ACK\189\EOT\NUL\192\EOT\SOH\SUB\146\SOH List keys in bucket response - one or more of these packets will be sent\n\
    \ the last one will have done set true (and may not have any keys in it)\n\
    \\n\
    \\v\n\
    \\ETX\EOT-\SOH\DC2\EOT\189\EOT\b\ETB\n\
    \\f\n\
    \\EOT\EOT-\STX\NUL\DC2\EOT\190\EOT\EOT\FS\n\
    \\r\n\
    \\ENQ\EOT-\STX\NUL\EOT\DC2\EOT\190\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT-\STX\NUL\ENQ\DC2\EOT\190\EOT\r\DC2\n\
    \\r\n\
    \\ENQ\EOT-\STX\NUL\SOH\DC2\EOT\190\EOT\DC3\ETB\n\
    \\r\n\
    \\ENQ\EOT-\STX\NUL\ETX\DC2\EOT\190\EOT\SUB\ESC\n\
    \\f\n\
    \\EOT\EOT-\STX\SOH\DC2\EOT\191\EOT\EOT\ESC\n\
    \\r\n\
    \\ENQ\EOT-\STX\SOH\EOT\DC2\EOT\191\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT-\STX\SOH\ENQ\DC2\EOT\191\EOT\r\DC1\n\
    \\r\n\
    \\ENQ\EOT-\STX\SOH\SOH\DC2\EOT\191\EOT\DC2\SYN\n\
    \\r\n\
    \\ENQ\EOT-\STX\SOH\ETX\DC2\EOT\191\EOT\EM\SUB\n\
    \\"\n\
    \\STX\EOT.\DC2\ACK\196\EOT\NUL\199\EOT\SOH\SUB\DC4 Map/Reduce request\n\
    \\n\
    \\v\n\
    \\ETX\EOT.\SOH\DC2\EOT\196\EOT\b\DC4\n\
    \\f\n\
    \\EOT\EOT.\STX\NUL\DC2\EOT\197\EOT\EOT\US\n\
    \\r\n\
    \\ENQ\EOT.\STX\NUL\EOT\DC2\EOT\197\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT.\STX\NUL\ENQ\DC2\EOT\197\EOT\r\DC2\n\
    \\r\n\
    \\ENQ\EOT.\STX\NUL\SOH\DC2\EOT\197\EOT\DC3\SUB\n\
    \\r\n\
    \\ENQ\EOT.\STX\NUL\ETX\DC2\EOT\197\EOT\GS\RS\n\
    \\f\n\
    \\EOT\EOT.\STX\SOH\DC2\EOT\198\EOT\EOT$\n\
    \\r\n\
    \\ENQ\EOT.\STX\SOH\EOT\DC2\EOT\198\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT.\STX\SOH\ENQ\DC2\EOT\198\EOT\r\DC2\n\
    \\r\n\
    \\ENQ\EOT.\STX\SOH\SOH\DC2\EOT\198\EOT\DC3\US\n\
    \\r\n\
    \\ENQ\EOT.\STX\SOH\ETX\DC2\EOT\198\EOT\"#\n\
    \\153\SOH\n\
    \\STX\EOT/\DC2\ACK\204\EOT\NUL\208\EOT\SOH\SUB\138\SOH Map/Reduce response\n\
    \ one or more of these packets will be sent the last one will have done set\n\
    \ true (and may not have phase/data in it)\n\
    \\n\
    \\v\n\
    \\ETX\EOT/\SOH\DC2\EOT\204\EOT\b\NAK\n\
    \\f\n\
    \\EOT\EOT/\STX\NUL\DC2\EOT\205\EOT\EOT\RS\n\
    \\r\n\
    \\ENQ\EOT/\STX\NUL\EOT\DC2\EOT\205\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT/\STX\NUL\ENQ\DC2\EOT\205\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT/\STX\NUL\SOH\DC2\EOT\205\EOT\DC4\EM\n\
    \\r\n\
    \\ENQ\EOT/\STX\NUL\ETX\DC2\EOT\205\EOT\FS\GS\n\
    \\f\n\
    \\EOT\EOT/\STX\SOH\DC2\EOT\206\EOT\EOT \n\
    \\r\n\
    \\ENQ\EOT/\STX\SOH\EOT\DC2\EOT\206\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT/\STX\SOH\ENQ\DC2\EOT\206\EOT\r\DC2\n\
    \\r\n\
    \\ENQ\EOT/\STX\SOH\SOH\DC2\EOT\206\EOT\DC3\ESC\n\
    \\r\n\
    \\ENQ\EOT/\STX\SOH\ETX\DC2\EOT\206\EOT\RS\US\n\
    \\f\n\
    \\EOT\EOT/\STX\STX\DC2\EOT\207\EOT\EOT\ESC\n\
    \\r\n\
    \\ENQ\EOT/\STX\STX\EOT\DC2\EOT\207\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT/\STX\STX\ENQ\DC2\EOT\207\EOT\r\DC1\n\
    \\r\n\
    \\ENQ\EOT/\STX\STX\SOH\DC2\EOT\207\EOT\DC2\SYN\n\
    \\r\n\
    \\ENQ\EOT/\STX\STX\ETX\DC2\EOT\207\EOT\EM\SUB\n\
    \-\n\
    \\STX\EOT0\DC2\ACK\211\EOT\NUL\236\EOT\SOH\SUB\US Secondary Index query request\n\
    \\n\
    \\v\n\
    \\ETX\EOT0\SOH\DC2\EOT\211\EOT\b\DC3\n\
    \\SO\n\
    \\EOT\EOT0\EOT\NUL\DC2\ACK\212\EOT\EOT\215\EOT\ENQ\n\
    \\r\n\
    \\ENQ\EOT0\EOT\NUL\SOH\DC2\EOT\212\EOT\t\ETB\n\
    \\SO\n\
    \\ACK\EOT0\EOT\NUL\STX\NUL\DC2\EOT\213\EOT\b\SI\n\
    \\SI\n\
    \\a\EOT0\EOT\NUL\STX\NUL\SOH\DC2\EOT\213\EOT\b\n\
    \\n\
    \\SI\n\
    \\a\EOT0\EOT\NUL\STX\NUL\STX\DC2\EOT\213\EOT\r\SO\n\
    \\SO\n\
    \\ACK\EOT0\EOT\NUL\STX\SOH\DC2\EOT\214\EOT\b\DC2\n\
    \\SI\n\
    \\a\EOT0\EOT\NUL\STX\SOH\SOH\DC2\EOT\214\EOT\b\r\n\
    \\SI\n\
    \\a\EOT0\EOT\NUL\STX\SOH\STX\DC2\EOT\214\EOT\DLE\DC1\n\
    \\f\n\
    \\EOT\EOT0\STX\NUL\DC2\EOT\217\EOT\EOT\RS\n\
    \\r\n\
    \\ENQ\EOT0\STX\NUL\EOT\DC2\EOT\217\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT0\STX\NUL\ENQ\DC2\EOT\217\EOT\r\DC2\n\
    \\r\n\
    \\ENQ\EOT0\STX\NUL\SOH\DC2\EOT\217\EOT\DC3\EM\n\
    \\r\n\
    \\ENQ\EOT0\STX\NUL\ETX\DC2\EOT\217\EOT\FS\GS\n\
    \\f\n\
    \\EOT\EOT0\STX\SOH\DC2\EOT\218\EOT\EOT\GS\n\
    \\r\n\
    \\ENQ\EOT0\STX\SOH\EOT\DC2\EOT\218\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT0\STX\SOH\ENQ\DC2\EOT\218\EOT\r\DC2\n\
    \\r\n\
    \\ENQ\EOT0\STX\SOH\SOH\DC2\EOT\218\EOT\DC3\CAN\n\
    \\r\n\
    \\ENQ\EOT0\STX\SOH\ETX\DC2\EOT\218\EOT\ESC\FS\n\
    \\f\n\
    \\EOT\EOT0\STX\STX\DC2\EOT\219\EOT\EOT&\n\
    \\r\n\
    \\ENQ\EOT0\STX\STX\EOT\DC2\EOT\219\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT0\STX\STX\ACK\DC2\EOT\219\EOT\r\ESC\n\
    \\r\n\
    \\ENQ\EOT0\STX\STX\SOH\DC2\EOT\219\EOT\FS!\n\
    \\r\n\
    \\ENQ\EOT0\STX\STX\ETX\DC2\EOT\219\EOT$%\n\
    \6\n\
    \\EOT\EOT0\STX\ETX\DC2\EOT\220\EOT\EOT\ESC\"( key here means equals value for index?\n\
    \\n\
    \\r\n\
    \\ENQ\EOT0\STX\ETX\EOT\DC2\EOT\220\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT0\STX\ETX\ENQ\DC2\EOT\220\EOT\r\DC2\n\
    \\r\n\
    \\ENQ\EOT0\STX\ETX\SOH\DC2\EOT\220\EOT\DC3\SYN\n\
    \\r\n\
    \\ENQ\EOT0\STX\ETX\ETX\DC2\EOT\220\EOT\EM\SUB\n\
    \\f\n\
    \\EOT\EOT0\STX\EOT\DC2\EOT\221\EOT\EOT!\n\
    \\r\n\
    \\ENQ\EOT0\STX\EOT\EOT\DC2\EOT\221\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT0\STX\EOT\ENQ\DC2\EOT\221\EOT\r\DC2\n\
    \\r\n\
    \\ENQ\EOT0\STX\EOT\SOH\DC2\EOT\221\EOT\DC3\FS\n\
    \\r\n\
    \\ENQ\EOT0\STX\EOT\ETX\DC2\EOT\221\EOT\US \n\
    \\f\n\
    \\EOT\EOT0\STX\ENQ\DC2\EOT\222\EOT\EOT!\n\
    \\r\n\
    \\ENQ\EOT0\STX\ENQ\EOT\DC2\EOT\222\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT0\STX\ENQ\ENQ\DC2\EOT\222\EOT\r\DC2\n\
    \\r\n\
    \\ENQ\EOT0\STX\ENQ\SOH\DC2\EOT\222\EOT\DC3\FS\n\
    \\r\n\
    \\ENQ\EOT0\STX\ENQ\ETX\DC2\EOT\222\EOT\US \n\
    \\f\n\
    \\EOT\EOT0\STX\ACK\DC2\EOT\223\EOT\EOT#\n\
    \\r\n\
    \\ENQ\EOT0\STX\ACK\EOT\DC2\EOT\223\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT0\STX\ACK\ENQ\DC2\EOT\223\EOT\r\DC1\n\
    \\r\n\
    \\ENQ\EOT0\STX\ACK\SOH\DC2\EOT\223\EOT\DC2\RS\n\
    \\r\n\
    \\ENQ\EOT0\STX\ACK\ETX\DC2\EOT\223\EOT!\"\n\
    \\f\n\
    \\EOT\EOT0\STX\a\DC2\EOT\224\EOT\EOT\GS\n\
    \\r\n\
    \\ENQ\EOT0\STX\a\EOT\DC2\EOT\224\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT0\STX\a\ENQ\DC2\EOT\224\EOT\r\DC1\n\
    \\r\n\
    \\ENQ\EOT0\STX\a\SOH\DC2\EOT\224\EOT\DC2\CAN\n\
    \\r\n\
    \\ENQ\EOT0\STX\a\ETX\DC2\EOT\224\EOT\ESC\FS\n\
    \\f\n\
    \\EOT\EOT0\STX\b\DC2\EOT\225\EOT\EOT$\n\
    \\r\n\
    \\ENQ\EOT0\STX\b\EOT\DC2\EOT\225\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT0\STX\b\ENQ\DC2\EOT\225\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT0\STX\b\SOH\DC2\EOT\225\EOT\DC4\US\n\
    \\r\n\
    \\ENQ\EOT0\STX\b\ETX\DC2\EOT\225\EOT\"#\n\
    \\f\n\
    \\EOT\EOT0\STX\t\DC2\EOT\226\EOT\EOT%\n\
    \\r\n\
    \\ENQ\EOT0\STX\t\EOT\DC2\EOT\226\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT0\STX\t\ENQ\DC2\EOT\226\EOT\r\DC2\n\
    \\r\n\
    \\ENQ\EOT0\STX\t\SOH\DC2\EOT\226\EOT\DC3\US\n\
    \\r\n\
    \\ENQ\EOT0\STX\t\ETX\DC2\EOT\226\EOT\"$\n\
    \\f\n\
    \\EOT\EOT0\STX\n\
    \\DC2\EOT\227\EOT\EOT!\n\
    \\r\n\
    \\ENQ\EOT0\STX\n\
    \\EOT\DC2\EOT\227\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT0\STX\n\
    \\ENQ\DC2\EOT\227\EOT\r\DC3\n\
    \\r\n\
    \\ENQ\EOT0\STX\n\
    \\SOH\DC2\EOT\227\EOT\DC4\ESC\n\
    \\r\n\
    \\ENQ\EOT0\STX\n\
    \\ETX\DC2\EOT\227\EOT\RS \n\
    \D\n\
    \\EOT\EOT0\STX\v\DC2\EOT\228\EOT\EOT\GS\"6 Bucket type, if not set we assume the 'default' type\n\
    \\n\
    \\r\n\
    \\ENQ\EOT0\STX\v\EOT\DC2\EOT\228\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT0\STX\v\ENQ\DC2\EOT\228\EOT\r\DC2\n\
    \\r\n\
    \\ENQ\EOT0\STX\v\SOH\DC2\EOT\228\EOT\DC3\ETB\n\
    \\r\n\
    \\ENQ\EOT0\STX\v\ETX\DC2\EOT\228\EOT\SUB\FS\n\
    \\f\n\
    \\EOT\EOT0\STX\f\DC2\EOT\229\EOT\EOT#\n\
    \\r\n\
    \\ENQ\EOT0\STX\f\EOT\DC2\EOT\229\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT0\STX\f\ENQ\DC2\EOT\229\EOT\r\DC2\n\
    \\r\n\
    \\ENQ\EOT0\STX\f\SOH\DC2\EOT\229\EOT\DC3\GS\n\
    \\r\n\
    \\ENQ\EOT0\STX\f\ETX\DC2\EOT\229\EOT \"\n\
    \H\n\
    \\EOT\EOT0\STX\r\DC2\EOT\231\EOT\EOT'\SUB: Whether to use pagination sort for non-paginated queries\n\
    \\n\
    \\r\n\
    \\ENQ\EOT0\STX\r\EOT\DC2\EOT\231\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT0\STX\r\ENQ\DC2\EOT\231\EOT\r\DC1\n\
    \\r\n\
    \\ENQ\EOT0\STX\r\SOH\DC2\EOT\231\EOT\DC2!\n\
    \\r\n\
    \\ENQ\EOT0\STX\r\ETX\DC2\EOT\231\EOT$&\n\
    \Q\n\
    \\EOT\EOT0\STX\SO\DC2\EOT\233\EOT\EOT&\SUB\US parallel extraction extension\n\
    \\"\" chopped up coverage plan per-req\n\
    \\n\
    \\r\n\
    \\ENQ\EOT0\STX\SO\EOT\DC2\EOT\233\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT0\STX\SO\ENQ\DC2\EOT\233\EOT\r\DC2\n\
    \\r\n\
    \\ENQ\EOT0\STX\SO\SOH\DC2\EOT\233\EOT\DC3 \n\
    \\r\n\
    \\ENQ\EOT0\STX\SO\ETX\DC2\EOT\233\EOT#%\n\
    \S\n\
    \\EOT\EOT0\STX\SI\DC2\EOT\234\EOT\EOT#\"E Return values with keys, only works with $bucket/$key index queries\n\
    \\n\
    \\r\n\
    \\ENQ\EOT0\STX\SI\EOT\DC2\EOT\234\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT0\STX\SI\ENQ\DC2\EOT\234\EOT\r\DC1\n\
    \\r\n\
    \\ENQ\EOT0\STX\SI\SOH\DC2\EOT\234\EOT\DC2\GS\n\
    \\r\n\
    \\ENQ\EOT0\STX\SI\ETX\DC2\EOT\234\EOT \"\n\
    \.\n\
    \\STX\EOT1\DC2\ACK\239\EOT\NUL\244\EOT\SOH\SUB  Secondary Index query response\n\
    \\n\
    \\v\n\
    \\ETX\EOT1\SOH\DC2\EOT\239\EOT\b\DC4\n\
    \\f\n\
    \\EOT\EOT1\STX\NUL\DC2\EOT\240\EOT\EOT\FS\n\
    \\r\n\
    \\ENQ\EOT1\STX\NUL\EOT\DC2\EOT\240\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT1\STX\NUL\ENQ\DC2\EOT\240\EOT\r\DC2\n\
    \\r\n\
    \\ENQ\EOT1\STX\NUL\SOH\DC2\EOT\240\EOT\DC3\ETB\n\
    \\r\n\
    \\ENQ\EOT1\STX\NUL\ETX\DC2\EOT\240\EOT\SUB\ESC\n\
    \\f\n\
    \\EOT\EOT1\STX\SOH\DC2\EOT\241\EOT\EOT!\n\
    \\r\n\
    \\ENQ\EOT1\STX\SOH\EOT\DC2\EOT\241\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT1\STX\SOH\ACK\DC2\EOT\241\EOT\r\DC4\n\
    \\r\n\
    \\ENQ\EOT1\STX\SOH\SOH\DC2\EOT\241\EOT\NAK\FS\n\
    \\r\n\
    \\ENQ\EOT1\STX\SOH\ETX\DC2\EOT\241\EOT\US \n\
    \\f\n\
    \\EOT\EOT1\STX\STX\DC2\EOT\242\EOT\EOT$\n\
    \\r\n\
    \\ENQ\EOT1\STX\STX\EOT\DC2\EOT\242\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT1\STX\STX\ENQ\DC2\EOT\242\EOT\r\DC2\n\
    \\r\n\
    \\ENQ\EOT1\STX\STX\SOH\DC2\EOT\242\EOT\DC3\US\n\
    \\r\n\
    \\ENQ\EOT1\STX\STX\ETX\DC2\EOT\242\EOT\"#\n\
    \\f\n\
    \\EOT\EOT1\STX\ETX\DC2\EOT\243\EOT\EOT\ESC\n\
    \\r\n\
    \\ENQ\EOT1\STX\ETX\EOT\DC2\EOT\243\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT1\STX\ETX\ENQ\DC2\EOT\243\EOT\r\DC1\n\
    \\r\n\
    \\ENQ\EOT1\STX\ETX\SOH\DC2\EOT\243\EOT\DC2\SYN\n\
    \\r\n\
    \\ENQ\EOT1\STX\ETX\ETX\DC2\EOT\243\EOT\EM\SUB\n\
    \P\n\
    \\STX\EOT2\DC2\ACK\247\EOT\NUL\251\EOT\SOH\SUBB Stolen from CS bucket response, to be used when return_body=true\n\
    \\n\
    \\v\n\
    \\ETX\EOT2\SOH\DC2\EOT\247\EOT\b\CAN\n\
    \\f\n\
    \\EOT\EOT2\STX\NUL\DC2\EOT\248\EOT\EOT(\n\
    \\r\n\
    \\ENQ\EOT2\STX\NUL\EOT\DC2\EOT\248\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT2\STX\NUL\ACK\DC2\EOT\248\EOT\r\ESC\n\
    \\r\n\
    \\ENQ\EOT2\STX\NUL\SOH\DC2\EOT\248\EOT\FS#\n\
    \\r\n\
    \\ENQ\EOT2\STX\NUL\ETX\DC2\EOT\248\EOT&'\n\
    \\f\n\
    \\EOT\EOT2\STX\SOH\DC2\EOT\249\EOT\EOT$\n\
    \\r\n\
    \\ENQ\EOT2\STX\SOH\EOT\DC2\EOT\249\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT2\STX\SOH\ENQ\DC2\EOT\249\EOT\r\DC2\n\
    \\r\n\
    \\ENQ\EOT2\STX\SOH\SOH\DC2\EOT\249\EOT\DC3\US\n\
    \\r\n\
    \\ENQ\EOT2\STX\SOH\ETX\DC2\EOT\249\EOT\"#\n\
    \\f\n\
    \\EOT\EOT2\STX\STX\DC2\EOT\250\EOT\EOT\ESC\n\
    \\r\n\
    \\ENQ\EOT2\STX\STX\EOT\DC2\EOT\250\EOT\EOT\f\n\
    \\r\n\
    \\ENQ\EOT2\STX\STX\ENQ\DC2\EOT\250\EOT\r\DC1\n\
    \\r\n\
    \\ENQ\EOT2\STX\STX\SOH\DC2\EOT\250\EOT\DC2\SYN\n\
    \\r\n\
    \\ENQ\EOT2\STX\STX\ETX\DC2\EOT\250\EOT\EM\SUB\n\
    \e\n\
    \\STX\EOT3\DC2\ACK\128\ENQ\NUL\140\ENQ\SOH\SUBW added solely for riak_cs currently\n\
    \ for folding over a bucket and returning\n\
    \ objects.\n\
    \\n\
    \\v\n\
    \\ETX\EOT3\SOH\DC2\EOT\128\ENQ\b\SYN\n\
    \\f\n\
    \\EOT\EOT3\STX\NUL\DC2\EOT\129\ENQ\EOT\RS\n\
    \\r\n\
    \\ENQ\EOT3\STX\NUL\EOT\DC2\EOT\129\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT3\STX\NUL\ENQ\DC2\EOT\129\ENQ\r\DC2\n\
    \\r\n\
    \\ENQ\EOT3\STX\NUL\SOH\DC2\EOT\129\ENQ\DC3\EM\n\
    \\r\n\
    \\ENQ\EOT3\STX\NUL\ETX\DC2\EOT\129\ENQ\FS\GS\n\
    \\f\n\
    \\EOT\EOT3\STX\SOH\DC2\EOT\130\ENQ\EOT!\n\
    \\r\n\
    \\ENQ\EOT3\STX\SOH\EOT\DC2\EOT\130\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT3\STX\SOH\ENQ\DC2\EOT\130\ENQ\r\DC2\n\
    \\r\n\
    \\ENQ\EOT3\STX\SOH\SOH\DC2\EOT\130\ENQ\DC3\FS\n\
    \\r\n\
    \\ENQ\EOT3\STX\SOH\ETX\DC2\EOT\130\ENQ\US \n\
    \\f\n\
    \\EOT\EOT3\STX\STX\DC2\EOT\131\ENQ\EOT\US\n\
    \\r\n\
    \\ENQ\EOT3\STX\STX\EOT\DC2\EOT\131\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT3\STX\STX\ENQ\DC2\EOT\131\ENQ\r\DC2\n\
    \\r\n\
    \\ENQ\EOT3\STX\STX\SOH\DC2\EOT\131\ENQ\DC3\SUB\n\
    \\r\n\
    \\ENQ\EOT3\STX\STX\ETX\DC2\EOT\131\ENQ\GS\RS\n\
    \\f\n\
    \\EOT\EOT3\STX\ETX\DC2\EOT\132\ENQ\EOT2\n\
    \\r\n\
    \\ENQ\EOT3\STX\ETX\EOT\DC2\EOT\132\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT3\STX\ETX\ENQ\DC2\EOT\132\ENQ\r\DC1\n\
    \\r\n\
    \\ENQ\EOT3\STX\ETX\SOH\DC2\EOT\132\ENQ\DC2\FS\n\
    \\r\n\
    \\ENQ\EOT3\STX\ETX\ETX\DC2\EOT\132\ENQ\US \n\
    \\r\n\
    \\ENQ\EOT3\STX\ETX\b\DC2\EOT\132\ENQ!1\n\
    \\r\n\
    \\ENQ\EOT3\STX\ETX\a\DC2\EOT\132\ENQ,0\n\
    \\f\n\
    \\EOT\EOT3\STX\EOT\DC2\EOT\133\ENQ\EOT1\n\
    \\r\n\
    \\ENQ\EOT3\STX\EOT\EOT\DC2\EOT\133\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT3\STX\EOT\ENQ\DC2\EOT\133\ENQ\r\DC1\n\
    \\r\n\
    \\ENQ\EOT3\STX\EOT\SOH\DC2\EOT\133\ENQ\DC2\SUB\n\
    \\r\n\
    \\ENQ\EOT3\STX\EOT\ETX\DC2\EOT\133\ENQ\GS\RS\n\
    \\r\n\
    \\ENQ\EOT3\STX\EOT\b\DC2\EOT\133\ENQ\US0\n\
    \\r\n\
    \\ENQ\EOT3\STX\EOT\a\DC2\EOT\133\ENQ*/\n\
    \\f\n\
    \\EOT\EOT3\STX\ENQ\DC2\EOT\134\ENQ\EOT$\n\
    \\r\n\
    \\ENQ\EOT3\STX\ENQ\EOT\DC2\EOT\134\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT3\STX\ENQ\ENQ\DC2\EOT\134\ENQ\r\DC2\n\
    \\r\n\
    \\ENQ\EOT3\STX\ENQ\SOH\DC2\EOT\134\ENQ\DC3\US\n\
    \\r\n\
    \\ENQ\EOT3\STX\ENQ\ETX\DC2\EOT\134\ENQ\"#\n\
    \\f\n\
    \\EOT\EOT3\STX\ACK\DC2\EOT\135\ENQ\EOT$\n\
    \\r\n\
    \\ENQ\EOT3\STX\ACK\EOT\DC2\EOT\135\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT3\STX\ACK\ENQ\DC2\EOT\135\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT3\STX\ACK\SOH\DC2\EOT\135\ENQ\DC4\US\n\
    \\r\n\
    \\ENQ\EOT3\STX\ACK\ETX\DC2\EOT\135\ENQ\"#\n\
    \\f\n\
    \\EOT\EOT3\STX\a\DC2\EOT\136\ENQ\EOT \n\
    \\r\n\
    \\ENQ\EOT3\STX\a\EOT\DC2\EOT\136\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT3\STX\a\ENQ\DC2\EOT\136\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT3\STX\a\SOH\DC2\EOT\136\ENQ\DC4\ESC\n\
    \\r\n\
    \\ENQ\EOT3\STX\a\ETX\DC2\EOT\136\ENQ\RS\US\n\
    \D\n\
    \\EOT\EOT3\STX\b\DC2\EOT\137\ENQ\EOT\FS\"6 Bucket type, if not set we assume the 'default' type\n\
    \\n\
    \\r\n\
    \\ENQ\EOT3\STX\b\EOT\DC2\EOT\137\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT3\STX\b\ENQ\DC2\EOT\137\ENQ\r\DC2\n\
    \\r\n\
    \\ENQ\EOT3\STX\b\SOH\DC2\EOT\137\ENQ\DC3\ETB\n\
    \\r\n\
    \\ENQ\EOT3\STX\b\ETX\DC2\EOT\137\ENQ\SUB\ESC\n\
    \Q\n\
    \\EOT\EOT3\STX\t\DC2\EOT\139\ENQ\EOT&\SUB\US parallel extraction extension\n\
    \\"\" chopped up coverage plan per-req\n\
    \\n\
    \\r\n\
    \\ENQ\EOT3\STX\t\EOT\DC2\EOT\139\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT3\STX\t\ENQ\DC2\EOT\139\ENQ\r\DC2\n\
    \\r\n\
    \\ENQ\EOT3\STX\t\SOH\DC2\EOT\139\ENQ\DC3 \n\
    \\r\n\
    \\ENQ\EOT3\STX\t\ETX\DC2\EOT\139\ENQ#%\n\
    \)\n\
    \\STX\EOT4\DC2\ACK\143\ENQ\NUL\147\ENQ\SOH\SUB\ESC return for CS bucket fold\n\
    \\n\
    \\v\n\
    \\ETX\EOT4\SOH\DC2\EOT\143\ENQ\b\ETB\n\
    \\f\n\
    \\EOT\EOT4\STX\NUL\DC2\EOT\144\ENQ\EOT(\n\
    \\r\n\
    \\ENQ\EOT4\STX\NUL\EOT\DC2\EOT\144\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT4\STX\NUL\ACK\DC2\EOT\144\ENQ\r\ESC\n\
    \\r\n\
    \\ENQ\EOT4\STX\NUL\SOH\DC2\EOT\144\ENQ\FS#\n\
    \\r\n\
    \\ENQ\EOT4\STX\NUL\ETX\DC2\EOT\144\ENQ&'\n\
    \\f\n\
    \\EOT\EOT4\STX\SOH\DC2\EOT\145\ENQ\EOT$\n\
    \\r\n\
    \\ENQ\EOT4\STX\SOH\EOT\DC2\EOT\145\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT4\STX\SOH\ENQ\DC2\EOT\145\ENQ\r\DC2\n\
    \\r\n\
    \\ENQ\EOT4\STX\SOH\SOH\DC2\EOT\145\ENQ\DC3\US\n\
    \\r\n\
    \\ENQ\EOT4\STX\SOH\ETX\DC2\EOT\145\ENQ\"#\n\
    \\f\n\
    \\EOT\EOT4\STX\STX\DC2\EOT\146\ENQ\EOT\ESC\n\
    \\r\n\
    \\ENQ\EOT4\STX\STX\EOT\DC2\EOT\146\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT4\STX\STX\ENQ\DC2\EOT\146\ENQ\r\DC1\n\
    \\r\n\
    \\ENQ\EOT4\STX\STX\SOH\DC2\EOT\146\ENQ\DC2\SYN\n\
    \\r\n\
    \\ENQ\EOT4\STX\STX\ETX\DC2\EOT\146\ENQ\EM\SUB\n\
    \\f\n\
    \\STX\EOT5\DC2\ACK\149\ENQ\NUL\152\ENQ\SOH\n\
    \\v\n\
    \\ETX\EOT5\SOH\DC2\EOT\149\ENQ\b\SYN\n\
    \\f\n\
    \\EOT\EOT5\STX\NUL\DC2\EOT\150\ENQ\EOT\ESC\n\
    \\r\n\
    \\ENQ\EOT5\STX\NUL\EOT\DC2\EOT\150\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT5\STX\NUL\ENQ\DC2\EOT\150\ENQ\r\DC2\n\
    \\r\n\
    \\ENQ\EOT5\STX\NUL\SOH\DC2\EOT\150\ENQ\DC3\SYN\n\
    \\r\n\
    \\ENQ\EOT5\STX\NUL\ETX\DC2\EOT\150\ENQ\EM\SUB\n\
    \\f\n\
    \\EOT\EOT5\STX\SOH\DC2\EOT\151\ENQ\EOT#\n\
    \\r\n\
    \\ENQ\EOT5\STX\SOH\EOT\DC2\EOT\151\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT5\STX\SOH\ACK\DC2\EOT\151\ENQ\r\ETB\n\
    \\r\n\
    \\ENQ\EOT5\STX\SOH\SOH\DC2\EOT\151\ENQ\CAN\RS\n\
    \\r\n\
    \\ENQ\EOT5\STX\SOH\ETX\DC2\EOT\151\ENQ!\"\n\
    \f\n\
    \\STX\EOT6\DC2\ACK\156\ENQ\NUL\169\ENQ\SOH\SUBX Content message included in get/put responses\n\
    \ Holds the value and associated metadata\n\
    \\n\
    \\v\n\
    \\ETX\EOT6\SOH\DC2\EOT\156\ENQ\b\DC2\n\
    \\f\n\
    \\EOT\EOT6\STX\NUL\DC2\EOT\157\ENQ\EOT\GS\n\
    \\r\n\
    \\ENQ\EOT6\STX\NUL\EOT\DC2\EOT\157\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT6\STX\NUL\ENQ\DC2\EOT\157\ENQ\r\DC2\n\
    \\r\n\
    \\ENQ\EOT6\STX\NUL\SOH\DC2\EOT\157\ENQ\DC3\CAN\n\
    \\r\n\
    \\ENQ\EOT6\STX\NUL\ETX\DC2\EOT\157\ENQ\ESC\FS\n\
    \%\n\
    \\EOT\EOT6\STX\SOH\DC2\EOT\158\ENQ\EOT$\"\ETB the media type/format\n\
    \\n\
    \\r\n\
    \\ENQ\EOT6\STX\SOH\EOT\DC2\EOT\158\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT6\STX\SOH\ENQ\DC2\EOT\158\ENQ\r\DC2\n\
    \\r\n\
    \\ENQ\EOT6\STX\SOH\SOH\DC2\EOT\158\ENQ\DC3\US\n\
    \\r\n\
    \\ENQ\EOT6\STX\SOH\ETX\DC2\EOT\158\ENQ\"#\n\
    \\f\n\
    \\EOT\EOT6\STX\STX\DC2\EOT\159\ENQ\EOT\US\n\
    \\r\n\
    \\ENQ\EOT6\STX\STX\EOT\DC2\EOT\159\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT6\STX\STX\ENQ\DC2\EOT\159\ENQ\r\DC2\n\
    \\r\n\
    \\ENQ\EOT6\STX\STX\SOH\DC2\EOT\159\ENQ\DC3\SUB\n\
    \\r\n\
    \\ENQ\EOT6\STX\STX\ETX\DC2\EOT\159\ENQ\GS\RS\n\
    \\f\n\
    \\EOT\EOT6\STX\ETX\DC2\EOT\160\ENQ\EOT(\n\
    \\r\n\
    \\ENQ\EOT6\STX\ETX\EOT\DC2\EOT\160\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT6\STX\ETX\ENQ\DC2\EOT\160\ENQ\r\DC2\n\
    \\r\n\
    \\ENQ\EOT6\STX\ETX\SOH\DC2\EOT\160\ENQ\DC3#\n\
    \\r\n\
    \\ENQ\EOT6\STX\ETX\ETX\DC2\EOT\160\ENQ&'\n\
    \\f\n\
    \\EOT\EOT6\STX\EOT\DC2\EOT\161\ENQ\EOT\FS\n\
    \\r\n\
    \\ENQ\EOT6\STX\EOT\EOT\DC2\EOT\161\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT6\STX\EOT\ENQ\DC2\EOT\161\ENQ\r\DC2\n\
    \\r\n\
    \\ENQ\EOT6\STX\EOT\SOH\DC2\EOT\161\ENQ\DC3\ETB\n\
    \\r\n\
    \\ENQ\EOT6\STX\EOT\ETX\DC2\EOT\161\ENQ\SUB\ESC\n\
    \(\n\
    \\EOT\EOT6\STX\ENQ\DC2\EOT\162\ENQ\EOT\US\"\SUB links to other resources\n\
    \\n\
    \\r\n\
    \\ENQ\EOT6\STX\ENQ\EOT\DC2\EOT\162\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT6\STX\ENQ\ACK\DC2\EOT\162\ENQ\r\DC4\n\
    \\r\n\
    \\ENQ\EOT6\STX\ENQ\SOH\DC2\EOT\162\ENQ\NAK\SUB\n\
    \\r\n\
    \\ENQ\EOT6\STX\ENQ\ETX\DC2\EOT\162\ENQ\GS\RS\n\
    \\f\n\
    \\EOT\EOT6\STX\ACK\DC2\EOT\163\ENQ\EOT!\n\
    \\r\n\
    \\ENQ\EOT6\STX\ACK\EOT\DC2\EOT\163\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT6\STX\ACK\ENQ\DC2\EOT\163\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT6\STX\ACK\SOH\DC2\EOT\163\ENQ\DC4\FS\n\
    \\r\n\
    \\ENQ\EOT6\STX\ACK\ETX\DC2\EOT\163\ENQ\US \n\
    \\f\n\
    \\EOT\EOT6\STX\a\DC2\EOT\164\ENQ\EOT'\n\
    \\r\n\
    \\ENQ\EOT6\STX\a\EOT\DC2\EOT\164\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT6\STX\a\ENQ\DC2\EOT\164\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT6\STX\a\SOH\DC2\EOT\164\ENQ\DC4\"\n\
    \\r\n\
    \\ENQ\EOT6\STX\a\ETX\DC2\EOT\164\ENQ%&\n\
    \4\n\
    \\EOT\EOT6\STX\b\DC2\EOT\165\ENQ\EOT\"\"& user metadata stored with the object\n\
    \\n\
    \\r\n\
    \\ENQ\EOT6\STX\b\EOT\DC2\EOT\165\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT6\STX\b\ACK\DC2\EOT\165\ENQ\r\DC4\n\
    \\r\n\
    \\ENQ\EOT6\STX\b\SOH\DC2\EOT\165\ENQ\NAK\GS\n\
    \\r\n\
    \\ENQ\EOT6\STX\b\ETX\DC2\EOT\165\ENQ !\n\
    \4\n\
    \\EOT\EOT6\STX\t\DC2\EOT\166\ENQ\EOT\"\"& user metadata stored with the object\n\
    \\n\
    \\r\n\
    \\ENQ\EOT6\STX\t\EOT\DC2\EOT\166\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT6\STX\t\ACK\DC2\EOT\166\ENQ\r\DC4\n\
    \\r\n\
    \\ENQ\EOT6\STX\t\SOH\DC2\EOT\166\ENQ\NAK\FS\n\
    \\r\n\
    \\ENQ\EOT6\STX\t\ETX\DC2\EOT\166\ENQ\US!\n\
    \\f\n\
    \\EOT\EOT6\STX\n\
    \\DC2\EOT\167\ENQ\EOT\US\n\
    \\r\n\
    \\ENQ\EOT6\STX\n\
    \\EOT\DC2\EOT\167\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT6\STX\n\
    \\ENQ\DC2\EOT\167\ENQ\r\DC1\n\
    \\r\n\
    \\ENQ\EOT6\STX\n\
    \\SOH\DC2\EOT\167\ENQ\DC2\EM\n\
    \\r\n\
    \\ENQ\EOT6\STX\n\
    \\ETX\DC2\EOT\167\ENQ\FS\RS\n\
    \\f\n\
    \\EOT\EOT6\STX\v\DC2\EOT\168\ENQ\EOT\GS\n\
    \\r\n\
    \\ENQ\EOT6\STX\v\EOT\DC2\EOT\168\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT6\STX\v\ENQ\DC2\EOT\168\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT6\STX\v\SOH\DC2\EOT\168\ENQ\DC4\ETB\n\
    \\r\n\
    \\ENQ\EOT6\STX\v\ETX\DC2\EOT\168\ENQ\SUB\FS\n\
    \\GS\n\
    \\STX\EOT7\DC2\ACK\172\ENQ\NUL\176\ENQ\SOH\SUB\SI Link metadata\n\
    \\n\
    \\v\n\
    \\ETX\EOT7\SOH\DC2\EOT\172\ENQ\b\SI\n\
    \\f\n\
    \\EOT\EOT7\STX\NUL\DC2\EOT\173\ENQ\EOT\RS\n\
    \\r\n\
    \\ENQ\EOT7\STX\NUL\EOT\DC2\EOT\173\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT7\STX\NUL\ENQ\DC2\EOT\173\ENQ\r\DC2\n\
    \\r\n\
    \\ENQ\EOT7\STX\NUL\SOH\DC2\EOT\173\ENQ\DC3\EM\n\
    \\r\n\
    \\ENQ\EOT7\STX\NUL\ETX\DC2\EOT\173\ENQ\FS\GS\n\
    \\f\n\
    \\EOT\EOT7\STX\SOH\DC2\EOT\174\ENQ\EOT\ESC\n\
    \\r\n\
    \\ENQ\EOT7\STX\SOH\EOT\DC2\EOT\174\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT7\STX\SOH\ENQ\DC2\EOT\174\ENQ\r\DC2\n\
    \\r\n\
    \\ENQ\EOT7\STX\SOH\SOH\DC2\EOT\174\ENQ\DC3\SYN\n\
    \\r\n\
    \\ENQ\EOT7\STX\SOH\ETX\DC2\EOT\174\ENQ\EM\SUB\n\
    \\f\n\
    \\EOT\EOT7\STX\STX\DC2\EOT\175\ENQ\EOT\ESC\n\
    \\r\n\
    \\ENQ\EOT7\STX\STX\EOT\DC2\EOT\175\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT7\STX\STX\ENQ\DC2\EOT\175\ENQ\r\DC2\n\
    \\r\n\
    \\ENQ\EOT7\STX\STX\SOH\DC2\EOT\175\ENQ\DC3\SYN\n\
    \\r\n\
    \\ENQ\EOT7\STX\STX\ETX\DC2\EOT\175\ENQ\EM\SUB\n\
    \&\n\
    \\STX\EOT8\DC2\ACK\179\ENQ\NUL\187\ENQ\SOH\SUB\CAN Counter update request\n\
    \\n\
    \\v\n\
    \\ETX\EOT8\SOH\DC2\EOT\179\ENQ\b\ESC\n\
    \\f\n\
    \\EOT\EOT8\STX\NUL\DC2\EOT\180\ENQ\EOT\RS\n\
    \\r\n\
    \\ENQ\EOT8\STX\NUL\EOT\DC2\EOT\180\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT8\STX\NUL\ENQ\DC2\EOT\180\ENQ\r\DC2\n\
    \\r\n\
    \\ENQ\EOT8\STX\NUL\SOH\DC2\EOT\180\ENQ\DC3\EM\n\
    \\r\n\
    \\ENQ\EOT8\STX\NUL\ETX\DC2\EOT\180\ENQ\FS\GS\n\
    \\f\n\
    \\EOT\EOT8\STX\SOH\DC2\EOT\181\ENQ\EOT\ESC\n\
    \\r\n\
    \\ENQ\EOT8\STX\SOH\EOT\DC2\EOT\181\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT8\STX\SOH\ENQ\DC2\EOT\181\ENQ\r\DC2\n\
    \\r\n\
    \\ENQ\EOT8\STX\SOH\SOH\DC2\EOT\181\ENQ\DC3\SYN\n\
    \\r\n\
    \\ENQ\EOT8\STX\SOH\ETX\DC2\EOT\181\ENQ\EM\SUB\n\
    \\f\n\
    \\EOT\EOT8\STX\STX\DC2\EOT\182\ENQ\EOT\US\n\
    \\r\n\
    \\ENQ\EOT8\STX\STX\EOT\DC2\EOT\182\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT8\STX\STX\ENQ\DC2\EOT\182\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT8\STX\STX\SOH\DC2\EOT\182\ENQ\DC4\SUB\n\
    \\r\n\
    \\ENQ\EOT8\STX\STX\ETX\DC2\EOT\182\ENQ\GS\RS\n\
    \\f\n\
    \\EOT\EOT8\STX\ETX\DC2\EOT\183\ENQ\EOT\SUB\n\
    \\r\n\
    \\ENQ\EOT8\STX\ETX\EOT\DC2\EOT\183\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT8\STX\ETX\ENQ\DC2\EOT\183\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT8\STX\ETX\SOH\DC2\EOT\183\ENQ\DC4\NAK\n\
    \\r\n\
    \\ENQ\EOT8\STX\ETX\ETX\DC2\EOT\183\ENQ\CAN\EM\n\
    \\f\n\
    \\EOT\EOT8\STX\EOT\DC2\EOT\184\ENQ\EOT\ESC\n\
    \\r\n\
    \\ENQ\EOT8\STX\EOT\EOT\DC2\EOT\184\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT8\STX\EOT\ENQ\DC2\EOT\184\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT8\STX\EOT\SOH\DC2\EOT\184\ENQ\DC4\SYN\n\
    \\r\n\
    \\ENQ\EOT8\STX\EOT\ETX\DC2\EOT\184\ENQ\EM\SUB\n\
    \\f\n\
    \\EOT\EOT8\STX\ENQ\DC2\EOT\185\ENQ\EOT\ESC\n\
    \\r\n\
    \\ENQ\EOT8\STX\ENQ\EOT\DC2\EOT\185\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT8\STX\ENQ\ENQ\DC2\EOT\185\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT8\STX\ENQ\SOH\DC2\EOT\185\ENQ\DC4\SYN\n\
    \\r\n\
    \\ENQ\EOT8\STX\ENQ\ETX\DC2\EOT\185\ENQ\EM\SUB\n\
    \\f\n\
    \\EOT\EOT8\STX\ACK\DC2\EOT\186\ENQ\EOT\"\n\
    \\r\n\
    \\ENQ\EOT8\STX\ACK\EOT\DC2\EOT\186\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT8\STX\ACK\ENQ\DC2\EOT\186\ENQ\r\DC1\n\
    \\r\n\
    \\ENQ\EOT8\STX\ACK\SOH\DC2\EOT\186\ENQ\DC2\GS\n\
    \\r\n\
    \\ENQ\EOT8\STX\ACK\ETX\DC2\EOT\186\ENQ !\n\
    \D\n\
    \\STX\EOT9\DC2\ACK\190\ENQ\NUL\192\ENQ\SOH\SUB6 Counter update response? No message | error response\n\
    \\n\
    \\v\n\
    \\ETX\EOT9\SOH\DC2\EOT\190\ENQ\b\FS\n\
    \\f\n\
    \\EOT\EOT9\STX\NUL\DC2\EOT\191\ENQ\b\"\n\
    \\r\n\
    \\ENQ\EOT9\STX\NUL\EOT\DC2\EOT\191\ENQ\b\DLE\n\
    \\r\n\
    \\ENQ\EOT9\STX\NUL\ENQ\DC2\EOT\191\ENQ\DC1\ETB\n\
    \\r\n\
    \\ENQ\EOT9\STX\NUL\SOH\DC2\EOT\191\ENQ\CAN\GS\n\
    \\r\n\
    \\ENQ\EOT9\STX\NUL\ETX\DC2\EOT\191\ENQ !\n\
    \\GS\n\
    \\STX\EOT:\DC2\ACK\195\ENQ\NUL\202\ENQ\SOH\SUB\SI counter value\n\
    \\n\
    \\v\n\
    \\ETX\EOT:\SOH\DC2\EOT\195\ENQ\b\CAN\n\
    \\f\n\
    \\EOT\EOT:\STX\NUL\DC2\EOT\196\ENQ\EOT\RS\n\
    \\r\n\
    \\ENQ\EOT:\STX\NUL\EOT\DC2\EOT\196\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT:\STX\NUL\ENQ\DC2\EOT\196\ENQ\r\DC2\n\
    \\r\n\
    \\ENQ\EOT:\STX\NUL\SOH\DC2\EOT\196\ENQ\DC3\EM\n\
    \\r\n\
    \\ENQ\EOT:\STX\NUL\ETX\DC2\EOT\196\ENQ\FS\GS\n\
    \\f\n\
    \\EOT\EOT:\STX\SOH\DC2\EOT\197\ENQ\EOT\ESC\n\
    \\r\n\
    \\ENQ\EOT:\STX\SOH\EOT\DC2\EOT\197\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT:\STX\SOH\ENQ\DC2\EOT\197\ENQ\r\DC2\n\
    \\r\n\
    \\ENQ\EOT:\STX\SOH\SOH\DC2\EOT\197\ENQ\DC3\SYN\n\
    \\r\n\
    \\ENQ\EOT:\STX\SOH\ETX\DC2\EOT\197\ENQ\EM\SUB\n\
    \\f\n\
    \\EOT\EOT:\STX\STX\DC2\EOT\198\ENQ\EOT\SUB\n\
    \\r\n\
    \\ENQ\EOT:\STX\STX\EOT\DC2\EOT\198\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT:\STX\STX\ENQ\DC2\EOT\198\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT:\STX\STX\SOH\DC2\EOT\198\ENQ\DC4\NAK\n\
    \\r\n\
    \\ENQ\EOT:\STX\STX\ETX\DC2\EOT\198\ENQ\CAN\EM\n\
    \\f\n\
    \\EOT\EOT:\STX\ETX\DC2\EOT\199\ENQ\EOT\ESC\n\
    \\r\n\
    \\ENQ\EOT:\STX\ETX\EOT\DC2\EOT\199\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT:\STX\ETX\ENQ\DC2\EOT\199\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT:\STX\ETX\SOH\DC2\EOT\199\ENQ\DC4\SYN\n\
    \\r\n\
    \\ENQ\EOT:\STX\ETX\ETX\DC2\EOT\199\ENQ\EM\SUB\n\
    \\f\n\
    \\EOT\EOT:\STX\EOT\DC2\EOT\200\ENQ\EOT#\n\
    \\r\n\
    \\ENQ\EOT:\STX\EOT\EOT\DC2\EOT\200\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT:\STX\EOT\ENQ\DC2\EOT\200\ENQ\r\DC1\n\
    \\r\n\
    \\ENQ\EOT:\STX\EOT\SOH\DC2\EOT\200\ENQ\DC2\RS\n\
    \\r\n\
    \\ENQ\EOT:\STX\EOT\ETX\DC2\EOT\200\ENQ!\"\n\
    \\f\n\
    \\EOT\EOT:\STX\ENQ\DC2\EOT\201\ENQ\EOT\"\n\
    \\r\n\
    \\ENQ\EOT:\STX\ENQ\EOT\DC2\EOT\201\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT:\STX\ENQ\ENQ\DC2\EOT\201\ENQ\r\DC1\n\
    \\r\n\
    \\ENQ\EOT:\STX\ENQ\SOH\DC2\EOT\201\ENQ\DC2\GS\n\
    \\r\n\
    \\ENQ\EOT:\STX\ENQ\ETX\DC2\EOT\201\ENQ !\n\
    \&\n\
    \\STX\EOT;\DC2\ACK\205\ENQ\NUL\207\ENQ\SOH\SUB\CAN Counter value response\n\
    \\n\
    \\v\n\
    \\ETX\EOT;\SOH\DC2\EOT\205\ENQ\b\EM\n\
    \\f\n\
    \\EOT\EOT;\STX\NUL\DC2\EOT\206\ENQ\EOT\RS\n\
    \\r\n\
    \\ENQ\EOT;\STX\NUL\EOT\DC2\EOT\206\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT;\STX\NUL\ENQ\DC2\EOT\206\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT;\STX\NUL\SOH\DC2\EOT\206\ENQ\DC4\EM\n\
    \\r\n\
    \\ENQ\EOT;\STX\NUL\ETX\DC2\EOT\206\ENQ\FS\GS\n\
    \/\n\
    \\STX\EOT<\DC2\ACK\210\ENQ\NUL\214\ENQ\SOH\SUB! Get bucket-key preflist request\n\
    \\n\
    \\v\n\
    \\ETX\EOT<\SOH\DC2\EOT\210\ENQ\b\"\n\
    \\f\n\
    \\EOT\EOT<\STX\NUL\DC2\EOT\211\ENQ\EOT\RS\n\
    \\r\n\
    \\ENQ\EOT<\STX\NUL\EOT\DC2\EOT\211\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT<\STX\NUL\ENQ\DC2\EOT\211\ENQ\r\DC2\n\
    \\r\n\
    \\ENQ\EOT<\STX\NUL\SOH\DC2\EOT\211\ENQ\DC3\EM\n\
    \\r\n\
    \\ENQ\EOT<\STX\NUL\ETX\DC2\EOT\211\ENQ\FS\GS\n\
    \\f\n\
    \\EOT\EOT<\STX\SOH\DC2\EOT\212\ENQ\EOT\ESC\n\
    \\r\n\
    \\ENQ\EOT<\STX\SOH\EOT\DC2\EOT\212\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT<\STX\SOH\ENQ\DC2\EOT\212\ENQ\r\DC2\n\
    \\r\n\
    \\ENQ\EOT<\STX\SOH\SOH\DC2\EOT\212\ENQ\DC3\SYN\n\
    \\r\n\
    \\ENQ\EOT<\STX\SOH\ETX\DC2\EOT\212\ENQ\EM\SUB\n\
    \\f\n\
    \\EOT\EOT<\STX\STX\DC2\EOT\213\ENQ\EOT\FS\n\
    \\r\n\
    \\ENQ\EOT<\STX\STX\EOT\DC2\EOT\213\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT<\STX\STX\ENQ\DC2\EOT\213\ENQ\r\DC2\n\
    \\r\n\
    \\ENQ\EOT<\STX\STX\SOH\DC2\EOT\213\ENQ\DC3\ETB\n\
    \\r\n\
    \\ENQ\EOT<\STX\STX\ETX\DC2\EOT\213\ENQ\SUB\ESC\n\
    \0\n\
    \\STX\EOT=\DC2\ACK\217\ENQ\NUL\219\ENQ\SOH\SUB\" Get bucket-key preflist response\n\
    \\n\
    \\v\n\
    \\ETX\EOT=\SOH\DC2\EOT\217\ENQ\b#\n\
    \\f\n\
    \\EOT\EOT=\STX\NUL\DC2\EOT\218\ENQ\EOT3\n\
    \\r\n\
    \\ENQ\EOT=\STX\NUL\EOT\DC2\EOT\218\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT=\STX\NUL\ACK\DC2\EOT\218\ENQ\r%\n\
    \\r\n\
    \\ENQ\EOT=\STX\NUL\SOH\DC2\EOT\218\ENQ&.\n\
    \\r\n\
    \\ENQ\EOT=\STX\NUL\ETX\DC2\EOT\218\ENQ12\n\
    \\GS\n\
    \\STX\EOT>\DC2\ACK\222\ENQ\NUL\226\ENQ\SOH\SUB\SI Preflist item\n\
    \\n\
    \\v\n\
    \\ETX\EOT>\SOH\DC2\EOT\222\ENQ\b \n\
    \\f\n\
    \\EOT\EOT>\STX\NUL\DC2\EOT\223\ENQ\EOT!\n\
    \\r\n\
    \\ENQ\EOT>\STX\NUL\EOT\DC2\EOT\223\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT>\STX\NUL\ENQ\DC2\EOT\223\ENQ\r\DC2\n\
    \\r\n\
    \\ENQ\EOT>\STX\NUL\SOH\DC2\EOT\223\ENQ\DC3\FS\n\
    \\r\n\
    \\ENQ\EOT>\STX\NUL\ETX\DC2\EOT\223\ENQ\US \n\
    \\f\n\
    \\EOT\EOT>\STX\SOH\DC2\EOT\224\ENQ\EOT\FS\n\
    \\r\n\
    \\ENQ\EOT>\STX\SOH\EOT\DC2\EOT\224\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT>\STX\SOH\ENQ\DC2\EOT\224\ENQ\r\DC2\n\
    \\r\n\
    \\ENQ\EOT>\STX\SOH\SOH\DC2\EOT\224\ENQ\DC3\ETB\n\
    \\r\n\
    \\ENQ\EOT>\STX\SOH\ETX\DC2\EOT\224\ENQ\SUB\ESC\n\
    \\f\n\
    \\EOT\EOT>\STX\STX\DC2\EOT\225\ENQ\EOT\US\n\
    \\r\n\
    \\ENQ\EOT>\STX\STX\EOT\DC2\EOT\225\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT>\STX\STX\ENQ\DC2\EOT\225\ENQ\r\DC1\n\
    \\r\n\
    \\ENQ\EOT>\STX\STX\SOH\DC2\EOT\225\ENQ\DC3\SUB\n\
    \\r\n\
    \\ENQ\EOT>\STX\STX\ETX\DC2\EOT\225\ENQ\GS\RS\n\
    \J\n\
    \\STX\EOT?\DC2\ACK\230\ENQ\NUL\236\ENQ\SOH\SUB< Request a segmented coverage plan for the specified bucket\n\
    \\n\
    \\v\n\
    \\ETX\EOT?\SOH\DC2\EOT\230\ENQ\b\SYN\n\
    \D\n\
    \\EOT\EOT?\STX\NUL\DC2\EOT\231\ENQ\EOT\FS\"6 Bucket type, if not set we assume the 'default' type\n\
    \\n\
    \\r\n\
    \\ENQ\EOT?\STX\NUL\EOT\DC2\EOT\231\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX\NUL\ENQ\DC2\EOT\231\ENQ\r\DC2\n\
    \\r\n\
    \\ENQ\EOT?\STX\NUL\SOH\DC2\EOT\231\ENQ\DC3\ETB\n\
    \\r\n\
    \\ENQ\EOT?\STX\NUL\ETX\DC2\EOT\231\ENQ\SUB\ESC\n\
    \\f\n\
    \\EOT\EOT?\STX\SOH\DC2\EOT\232\ENQ\EOT\RS\n\
    \\r\n\
    \\ENQ\EOT?\STX\SOH\EOT\DC2\EOT\232\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX\SOH\ENQ\DC2\EOT\232\ENQ\r\DC2\n\
    \\r\n\
    \\ENQ\EOT?\STX\SOH\SOH\DC2\EOT\232\ENQ\DC3\EM\n\
    \\r\n\
    \\ENQ\EOT?\STX\SOH\ETX\DC2\EOT\232\ENQ\FS\GS\n\
    \\226\SOH\n\
    \\EOT\EOT?\STX\STX\DC2\EOT\233\ENQ\EOT'\"\211\SOH If undefined, we build a normal coverage plan. If <ring_size, we build a coverage plan with exactly ring_size entries, anything larger will have a power of 2 entries covering keyspaces smaller than a partition\n\
    \\n\
    \\r\n\
    \\ENQ\EOT?\STX\STX\EOT\DC2\EOT\233\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX\STX\ENQ\DC2\EOT\233\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOT?\STX\STX\SOH\DC2\EOT\233\ENQ\DC4\"\n\
    \\r\n\
    \\ENQ\EOT?\STX\STX\ETX\DC2\EOT\233\ENQ%&\n\
    \$\n\
    \\EOT\EOT?\STX\ETX\DC2\EOT\234\ENQ\EOT%\"\SYN For failure recovery\n\
    \\n\
    \\r\n\
    \\ENQ\EOT?\STX\ETX\EOT\DC2\EOT\234\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX\ETX\ENQ\DC2\EOT\234\ENQ\r\DC2\n\
    \\r\n\
    \\ENQ\EOT?\STX\ETX\SOH\DC2\EOT\234\ENQ\DC3 \n\
    \\r\n\
    \\ENQ\EOT?\STX\ETX\ETX\DC2\EOT\234\ENQ#$\n\
    \g\n\
    \\EOT\EOT?\STX\EOT\DC2\EOT\235\ENQ\EOT)\"Y Other coverage contexts that have failed to assist Riak in deciding what nodes to avoid\n\
    \\n\
    \\r\n\
    \\ENQ\EOT?\STX\EOT\EOT\DC2\EOT\235\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOT?\STX\EOT\ENQ\DC2\EOT\235\ENQ\r\DC2\n\
    \\r\n\
    \\ENQ\EOT?\STX\EOT\SOH\DC2\EOT\235\ENQ\DC3$\n\
    \\r\n\
    \\ENQ\EOT?\STX\EOT\ETX\DC2\EOT\235\ENQ'(\n\
    \0\n\
    \\STX\EOT@\DC2\ACK\239\ENQ\NUL\241\ENQ\SOH\SUB\" Segmented coverage plan response\n\
    \\n\
    \\v\n\
    \\ETX\EOT@\SOH\DC2\EOT\239\ENQ\b\ETB\n\
    \\f\n\
    \\EOT\EOT@\STX\NUL\DC2\EOT\240\ENQ\ETX)\n\
    \\r\n\
    \\ENQ\EOT@\STX\NUL\EOT\DC2\EOT\240\ENQ\ETX\v\n\
    \\r\n\
    \\ENQ\EOT@\STX\NUL\ACK\DC2\EOT\240\ENQ\f\FS\n\
    \\r\n\
    \\ENQ\EOT@\STX\NUL\SOH\DC2\EOT\240\ENQ\GS$\n\
    \\r\n\
    \\ENQ\EOT@\STX\NUL\ETX\DC2\EOT\240\ENQ'(\n\
    \*\n\
    \\STX\EOTA\DC2\ACK\244\ENQ\NUL\249\ENQ\SOH\SUB\FS Segment of a coverage plan\n\
    \\n\
    \\v\n\
    \\ETX\EOTA\SOH\DC2\EOT\244\ENQ\b\CAN\n\
    \\f\n\
    \\EOT\EOTA\STX\NUL\DC2\EOT\245\ENQ\EOT\SUB\n\
    \\r\n\
    \\ENQ\EOTA\STX\NUL\EOT\DC2\EOT\245\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOTA\STX\NUL\ENQ\DC2\EOT\245\ENQ\r\DC2\n\
    \\r\n\
    \\ENQ\EOTA\STX\NUL\SOH\DC2\EOT\245\ENQ\DC3\NAK\n\
    \\r\n\
    \\ENQ\EOTA\STX\NUL\ETX\DC2\EOT\245\ENQ\CAN\EM\n\
    \\f\n\
    \\EOT\EOTA\STX\SOH\DC2\EOT\246\ENQ\EOT\GS\n\
    \\r\n\
    \\ENQ\EOTA\STX\SOH\EOT\DC2\EOT\246\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOTA\STX\SOH\ENQ\DC2\EOT\246\ENQ\r\DC3\n\
    \\r\n\
    \\ENQ\EOTA\STX\SOH\SOH\DC2\EOT\246\ENQ\DC4\CAN\n\
    \\r\n\
    \\ENQ\EOTA\STX\SOH\ETX\DC2\EOT\246\ENQ\ESC\FS\n\
    \G\n\
    \\EOT\EOTA\STX\STX\DC2\EOT\247\ENQ\EOT%\"9 Some human readable description of the keyspace covered\n\
    \\n\
    \\r\n\
    \\ENQ\EOTA\STX\STX\EOT\DC2\EOT\247\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOTA\STX\STX\ENQ\DC2\EOT\247\ENQ\r\DC2\n\
    \\r\n\
    \\ENQ\EOTA\STX\STX\SOH\DC2\EOT\247\ENQ\DC3 \n\
    \\r\n\
    \\ENQ\EOTA\STX\STX\ETX\DC2\EOT\247\ENQ#$\n\
    \5\n\
    \\EOT\EOTA\STX\ETX\DC2\EOT\248\ENQ\EOT%\"' Opaque context to pass into 2I query.\n\
    \\n\
    \\r\n\
    \\ENQ\EOTA\STX\ETX\EOT\DC2\EOT\248\ENQ\EOT\f\n\
    \\r\n\
    \\ENQ\EOTA\STX\ETX\ENQ\DC2\EOT\248\ENQ\r\DC2\n\
    \\r\n\
    \\ENQ\EOTA\STX\ETX\SOH\DC2\EOT\248\ENQ\DC3 \n\
    \\r\n\
    \\ENQ\EOTA\STX\ETX\ETX\DC2\EOT\248\ENQ#$\n\
    \\160\SOH\n\
    \\STX\EOTB\DC2\ACK\143\ACK\NUL\145\ACK\SOH2\SYN import \"riak.proto\";\n\
    \2z java package specifiers\n\
    \ option java_package = \"com.basho.riak.protobuf\";\n\
    \ option java_outer_classname = \"RiakSearchPB\";\n\
    \\n\
    \\v\n\
    \\ETX\EOTB\SOH\DC2\EOT\143\ACK\b\DC4\n\
    \\f\n\
    \\EOT\EOTB\STX\NUL\DC2\EOT\144\ACK\STX\RS\n\
    \\r\n\
    \\ENQ\EOTB\STX\NUL\EOT\DC2\EOT\144\ACK\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTB\STX\NUL\ACK\DC2\EOT\144\ACK\v\DC2\n\
    \\r\n\
    \\ENQ\EOTB\STX\NUL\SOH\DC2\EOT\144\ACK\DC3\EM\n\
    \\r\n\
    \\ENQ\EOTB\STX\NUL\ETX\DC2\EOT\144\ACK\FS\GS\n\
    \\f\n\
    \\STX\EOTC\DC2\ACK\147\ACK\NUL\158\ACK\SOH\n\
    \\v\n\
    \\ETX\EOTC\SOH\DC2\EOT\147\ACK\b\EM\n\
    \\FS\n\
    \\EOT\EOTC\STX\NUL\DC2\EOT\148\ACK\STX\RS\"\SO Query string\n\
    \\n\
    \\r\n\
    \\ENQ\EOTC\STX\NUL\EOT\DC2\EOT\148\ACK\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTC\STX\NUL\ENQ\DC2\EOT\148\ACK\v\DLE\n\
    \\r\n\
    \\ENQ\EOTC\STX\NUL\SOH\DC2\EOT\148\ACK\DC2\DC3\n\
    \\r\n\
    \\ENQ\EOTC\STX\NUL\ETX\DC2\EOT\148\ACK\FS\GS\n\
    \\NAK\n\
    \\EOT\EOTC\STX\SOH\DC2\EOT\149\ACK\STX\RS\"\a Index\n\
    \\n\
    \\r\n\
    \\ENQ\EOTC\STX\SOH\EOT\DC2\EOT\149\ACK\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTC\STX\SOH\ENQ\DC2\EOT\149\ACK\v\DLE\n\
    \\r\n\
    \\ENQ\EOTC\STX\SOH\SOH\DC2\EOT\149\ACK\DC2\ETB\n\
    \\r\n\
    \\ENQ\EOTC\STX\SOH\ETX\DC2\EOT\149\ACK\FS\GS\n\
    \\SUB\n\
    \\EOT\EOTC\STX\STX\DC2\EOT\150\ACK\STX\RS\"\f Limit rows\n\
    \\n\
    \\r\n\
    \\ENQ\EOTC\STX\STX\EOT\DC2\EOT\150\ACK\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTC\STX\STX\ENQ\DC2\EOT\150\ACK\v\DC1\n\
    \\r\n\
    \\ENQ\EOTC\STX\STX\SOH\DC2\EOT\150\ACK\DC2\SYN\n\
    \\r\n\
    \\ENQ\EOTC\STX\STX\ETX\DC2\EOT\150\ACK\FS\GS\n\
    \\US\n\
    \\EOT\EOTC\STX\ETX\DC2\EOT\151\ACK\STX\RS\"\DC1 Starting offset\n\
    \\n\
    \\r\n\
    \\ENQ\EOTC\STX\ETX\EOT\DC2\EOT\151\ACK\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTC\STX\ETX\ENQ\DC2\EOT\151\ACK\v\DC1\n\
    \\r\n\
    \\ENQ\EOTC\STX\ETX\SOH\DC2\EOT\151\ACK\DC2\ETB\n\
    \\r\n\
    \\ENQ\EOTC\STX\ETX\ETX\DC2\EOT\151\ACK\FS\GS\n\
    \\SUB\n\
    \\EOT\EOTC\STX\EOT\DC2\EOT\152\ACK\STX\RS\"\f Sort order\n\
    \\n\
    \\r\n\
    \\ENQ\EOTC\STX\EOT\EOT\DC2\EOT\152\ACK\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTC\STX\EOT\ENQ\DC2\EOT\152\ACK\v\DLE\n\
    \\r\n\
    \\ENQ\EOTC\STX\EOT\SOH\DC2\EOT\152\ACK\DC2\SYN\n\
    \\r\n\
    \\ENQ\EOTC\STX\EOT\ETX\DC2\EOT\152\ACK\FS\GS\n\
    \-\n\
    \\EOT\EOTC\STX\ENQ\DC2\EOT\153\ACK\STX\RS\"\US Inline fields filtering query\n\
    \\n\
    \\r\n\
    \\ENQ\EOTC\STX\ENQ\EOT\DC2\EOT\153\ACK\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTC\STX\ENQ\ENQ\DC2\EOT\153\ACK\v\DLE\n\
    \\r\n\
    \\ENQ\EOTC\STX\ENQ\SOH\DC2\EOT\153\ACK\DC2\CAN\n\
    \\r\n\
    \\ENQ\EOTC\STX\ENQ\ETX\DC2\EOT\153\ACK\FS\GS\n\
    \\GS\n\
    \\EOT\EOTC\STX\ACK\DC2\EOT\154\ACK\STX\RS\"\SI Default field\n\
    \\n\
    \\r\n\
    \\ENQ\EOTC\STX\ACK\EOT\DC2\EOT\154\ACK\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTC\STX\ACK\ENQ\DC2\EOT\154\ACK\v\DLE\n\
    \\r\n\
    \\ENQ\EOTC\STX\ACK\SOH\DC2\EOT\154\ACK\DC2\DC4\n\
    \\r\n\
    \\ENQ\EOTC\STX\ACK\ETX\DC2\EOT\154\ACK\FS\GS\n\
    \\SUB\n\
    \\EOT\EOTC\STX\a\DC2\EOT\155\ACK\STX\RS\"\f Default op\n\
    \\n\
    \\r\n\
    \\ENQ\EOTC\STX\a\EOT\DC2\EOT\155\ACK\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTC\STX\a\ENQ\DC2\EOT\155\ACK\v\DLE\n\
    \\r\n\
    \\ENQ\EOTC\STX\a\SOH\DC2\EOT\155\ACK\DC2\DC4\n\
    \\r\n\
    \\ENQ\EOTC\STX\a\ETX\DC2\EOT\155\ACK\FS\GS\n\
    \=\n\
    \\EOT\EOTC\STX\b\DC2\EOT\156\ACK\STX\RS\"/ Return fields limit (for ids only, generally)\n\
    \\n\
    \\r\n\
    \\ENQ\EOTC\STX\b\EOT\DC2\EOT\156\ACK\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTC\STX\b\ENQ\DC2\EOT\156\ACK\v\DLE\n\
    \\r\n\
    \\ENQ\EOTC\STX\b\SOH\DC2\EOT\156\ACK\DC2\DC4\n\
    \\r\n\
    \\ENQ\EOTC\STX\b\ETX\DC2\EOT\156\ACK\FS\GS\n\
    \%\n\
    \\EOT\EOTC\STX\t\DC2\EOT\157\ACK\STX\US\"\ETB Presort (key / score)\n\
    \\n\
    \\r\n\
    \\ENQ\EOTC\STX\t\EOT\DC2\EOT\157\ACK\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTC\STX\t\ENQ\DC2\EOT\157\ACK\v\DLE\n\
    \\r\n\
    \\ENQ\EOTC\STX\t\SOH\DC2\EOT\157\ACK\DC2\EM\n\
    \\r\n\
    \\ENQ\EOTC\STX\t\ETX\DC2\EOT\157\ACK\FS\RS\n\
    \\f\n\
    \\STX\EOTD\DC2\ACK\160\ACK\NUL\164\ACK\SOH\n\
    \\v\n\
    \\ETX\EOTD\SOH\DC2\EOT\160\ACK\b\SUB\n\
    \ \n\
    \\EOT\EOTD\STX\NUL\DC2\EOT\161\ACK\STX&\"\DC2 Result documents\n\
    \\n\
    \\r\n\
    \\ENQ\EOTD\STX\NUL\EOT\DC2\EOT\161\ACK\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTD\STX\NUL\ACK\DC2\EOT\161\ACK\v\ETB\n\
    \\r\n\
    \\ENQ\EOTD\STX\NUL\SOH\DC2\EOT\161\ACK\CAN\FS\n\
    \\r\n\
    \\ENQ\EOTD\STX\NUL\ETX\DC2\EOT\161\ACK$%\n\
    \\GS\n\
    \\EOT\EOTD\STX\SOH\DC2\EOT\162\ACK\STX&\"\SI Maximum score\n\
    \\n\
    \\r\n\
    \\ENQ\EOTD\STX\SOH\EOT\DC2\EOT\162\ACK\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTD\STX\SOH\ENQ\DC2\EOT\162\ACK\v\DLE\n\
    \\r\n\
    \\ENQ\EOTD\STX\SOH\SOH\DC2\EOT\162\ACK\CAN!\n\
    \\r\n\
    \\ENQ\EOTD\STX\SOH\ETX\DC2\EOT\162\ACK$%\n\
    \!\n\
    \\EOT\EOTD\STX\STX\DC2\EOT\163\ACK\STX&\"\DC3 Number of results\n\
    \\n\
    \\r\n\
    \\ENQ\EOTD\STX\STX\EOT\DC2\EOT\163\ACK\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTD\STX\STX\ENQ\DC2\EOT\163\ACK\v\DC1\n\
    \\r\n\
    \\ENQ\EOTD\STX\STX\SOH\DC2\EOT\163\ACK\CAN!\n\
    \\r\n\
    \\ENQ\EOTD\STX\STX\ETX\DC2\EOT\163\ACK$%\n\
    \\199\SOH\n\
    \\STX\EOTE\DC2\ACK\188\ACK\NUL\193\ACK\SOH\SUB\SUB Dispatch a query to Riak\n\
    \2v Java package specifiers\n\
    \ option java_package = \"com.basho.riak.protobuf\";\n\
    \ option java_outer_classname = \"RiakTsPB\";\n\
    \2% import \"riak.proto\"; // for RpbPair\n\
    \\n\
    \\v\n\
    \\ETX\EOTE\SOH\DC2\EOT\188\ACK\b\DC2\n\
    \L\n\
    \\EOT\EOTE\STX\NUL\DC2\EOT\190\ACK\STX%\SUB> left optional to support parameterized queries in the future\n\
    \\n\
    \\r\n\
    \\ENQ\EOTE\STX\NUL\EOT\DC2\EOT\190\ACK\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTE\STX\NUL\ACK\DC2\EOT\190\ACK\v\SUB\n\
    \\r\n\
    \\ENQ\EOTE\STX\NUL\SOH\DC2\EOT\190\ACK\ESC \n\
    \\r\n\
    \\ENQ\EOTE\STX\NUL\ETX\DC2\EOT\190\ACK#$\n\
    \\f\n\
    \\EOT\EOTE\STX\SOH\DC2\EOT\191\ACK\STX-\n\
    \\r\n\
    \\ENQ\EOTE\STX\SOH\EOT\DC2\EOT\191\ACK\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTE\STX\SOH\ENQ\DC2\EOT\191\ACK\v\SI\n\
    \\r\n\
    \\ENQ\EOTE\STX\SOH\SOH\DC2\EOT\191\ACK\DLE\SYN\n\
    \\r\n\
    \\ENQ\EOTE\STX\SOH\ETX\DC2\EOT\191\ACK\EM\SUB\n\
    \\r\n\
    \\ENQ\EOTE\STX\SOH\b\DC2\EOT\191\ACK\ESC,\n\
    \\r\n\
    \\ENQ\EOTE\STX\SOH\a\DC2\EOT\191\ACK&+\n\
    \0\n\
    \\EOT\EOTE\STX\STX\DC2\EOT\192\ACK\STX#\"\" chopped up coverage plan per-req\n\
    \\n\
    \\r\n\
    \\ENQ\EOTE\STX\STX\EOT\DC2\EOT\192\ACK\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTE\STX\STX\ENQ\DC2\EOT\192\ACK\v\DLE\n\
    \\r\n\
    \\ENQ\EOTE\STX\STX\SOH\DC2\EOT\192\ACK\DC1\RS\n\
    \\r\n\
    \\ENQ\EOTE\STX\STX\ETX\DC2\EOT\192\ACK!\"\n\
    \\f\n\
    \\STX\EOTF\DC2\ACK\195\ACK\NUL\199\ACK\SOH\n\
    \\v\n\
    \\ETX\EOTF\SOH\DC2\EOT\195\ACK\b\DC3\n\
    \\f\n\
    \\EOT\EOTF\STX\NUL\DC2\EOT\196\ACK\STX+\n\
    \\r\n\
    \\ENQ\EOTF\STX\NUL\EOT\DC2\EOT\196\ACK\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTF\STX\NUL\ACK\DC2\EOT\196\ACK\v\RS\n\
    \\r\n\
    \\ENQ\EOTF\STX\NUL\SOH\DC2\EOT\196\ACK\US&\n\
    \\r\n\
    \\ENQ\EOTF\STX\NUL\ETX\DC2\EOT\196\ACK)*\n\
    \\ESC\n\
    \\EOT\EOTF\STX\SOH\DC2\EOT\197\ACK\STX\SUB\"\r 0 to n rows\n\
    \\n\
    \\r\n\
    \\ENQ\EOTF\STX\SOH\EOT\DC2\EOT\197\ACK\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTF\STX\SOH\ACK\DC2\EOT\197\ACK\v\DLE\n\
    \\r\n\
    \\ENQ\EOTF\STX\SOH\SOH\DC2\EOT\197\ACK\DC1\NAK\n\
    \\r\n\
    \\ENQ\EOTF\STX\SOH\ETX\DC2\EOT\197\ACK\CAN\EM\n\
    \\f\n\
    \\EOT\EOTF\STX\STX\DC2\EOT\198\ACK\STX*\n\
    \\r\n\
    \\ENQ\EOTF\STX\STX\EOT\DC2\EOT\198\ACK\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTF\STX\STX\ENQ\DC2\EOT\198\ACK\v\SI\n\
    \\r\n\
    \\ENQ\EOTF\STX\STX\SOH\DC2\EOT\198\ACK\DLE\DC4\n\
    \\r\n\
    \\ENQ\EOTF\STX\STX\ETX\DC2\EOT\198\ACK\ETB\CAN\n\
    \\r\n\
    \\ENQ\EOTF\STX\STX\b\DC2\EOT\198\ACK\EM)\n\
    \\r\n\
    \\ENQ\EOTF\STX\STX\a\DC2\EOT\198\ACK$(\n\
    \\f\n\
    \\STX\EOTG\DC2\ACK\201\ACK\NUL\205\ACK\SOH\n\
    \\v\n\
    \\ETX\EOTG\SOH\DC2\EOT\201\ACK\b\DLE\n\
    \\f\n\
    \\EOT\EOTG\STX\NUL\DC2\EOT\202\ACK\STX\ESC\n\
    \\r\n\
    \\ENQ\EOTG\STX\NUL\EOT\DC2\EOT\202\ACK\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTG\STX\NUL\ENQ\DC2\EOT\202\ACK\v\DLE\n\
    \\r\n\
    \\ENQ\EOTG\STX\NUL\SOH\DC2\EOT\202\ACK\DC1\SYN\n\
    \\r\n\
    \\ENQ\EOTG\STX\NUL\ETX\DC2\EOT\202\ACK\EM\SUB\n\
    \\f\n\
    \\EOT\EOTG\STX\SOH\DC2\EOT\203\ACK\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTG\STX\SOH\EOT\DC2\EOT\203\ACK\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTG\STX\SOH\ACK\DC2\EOT\203\ACK\v\DC1\n\
    \\r\n\
    \\ENQ\EOTG\STX\SOH\SOH\DC2\EOT\203\ACK\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOTG\STX\SOH\ETX\DC2\EOT\203\ACK\CAN\EM\n\
    \\f\n\
    \\EOT\EOTG\STX\STX\DC2\EOT\204\ACK\STX\RS\n\
    \\r\n\
    \\ENQ\EOTG\STX\STX\EOT\DC2\EOT\204\ACK\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTG\STX\STX\ENQ\DC2\EOT\204\ACK\v\DC1\n\
    \\r\n\
    \\ENQ\EOTG\STX\STX\SOH\DC2\EOT\204\ACK\DC2\EM\n\
    \\r\n\
    \\ENQ\EOTG\STX\STX\ETX\DC2\EOT\204\ACK\FS\GS\n\
    \\f\n\
    \\STX\EOTH\DC2\ACK\207\ACK\NUL\210\ACK\SOH\n\
    \\v\n\
    \\ETX\EOTH\SOH\DC2\EOT\207\ACK\b\DC1\n\
    \\f\n\
    \\EOT\EOTH\STX\NUL\DC2\EOT\208\ACK\STX+\n\
    \\r\n\
    \\ENQ\EOTH\STX\NUL\EOT\DC2\EOT\208\ACK\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTH\STX\NUL\ACK\DC2\EOT\208\ACK\v\RS\n\
    \\r\n\
    \\ENQ\EOTH\STX\NUL\SOH\DC2\EOT\208\ACK\US&\n\
    \\r\n\
    \\ENQ\EOTH\STX\NUL\ETX\DC2\EOT\208\ACK)*\n\
    \\ESC\n\
    \\EOT\EOTH\STX\SOH\DC2\EOT\209\ACK\STX\SUB\"\r 0 or 1 rows\n\
    \\n\
    \\r\n\
    \\ENQ\EOTH\STX\SOH\EOT\DC2\EOT\209\ACK\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTH\STX\SOH\ACK\DC2\EOT\209\ACK\v\DLE\n\
    \\r\n\
    \\ENQ\EOTH\STX\SOH\SOH\DC2\EOT\209\ACK\DC1\NAK\n\
    \\r\n\
    \\ENQ\EOTH\STX\SOH\ETX\DC2\EOT\209\ACK\CAN\EM\n\
    \\f\n\
    \\STX\EOTI\DC2\ACK\213\ACK\NUL\220\ACK\SOH\n\
    \\v\n\
    \\ETX\EOTI\SOH\DC2\EOT\213\ACK\b\DLE\n\
    \\f\n\
    \\EOT\EOTI\STX\NUL\DC2\EOT\214\ACK\STX\ESC\n\
    \\r\n\
    \\ENQ\EOTI\STX\NUL\EOT\DC2\EOT\214\ACK\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTI\STX\NUL\ENQ\DC2\EOT\214\ACK\v\DLE\n\
    \\r\n\
    \\ENQ\EOTI\STX\NUL\SOH\DC2\EOT\214\ACK\DC1\SYN\n\
    \\r\n\
    \\ENQ\EOTI\STX\NUL\ETX\DC2\EOT\214\ACK\EM\SUB\n\
    \<\n\
    \\EOT\EOTI\STX\SOH\DC2\EOT\217\ACK\STX+\SUB. optional: omitting it should use table order\n\
    \\n\
    \\r\n\
    \\ENQ\EOTI\STX\SOH\EOT\DC2\EOT\217\ACK\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTI\STX\SOH\ACK\DC2\EOT\217\ACK\v\RS\n\
    \\r\n\
    \\ENQ\EOTI\STX\SOH\SOH\DC2\EOT\217\ACK\US&\n\
    \\r\n\
    \\ENQ\EOTI\STX\SOH\ETX\DC2\EOT\217\ACK)*\n\
    \\f\n\
    \\EOT\EOTI\STX\STX\DC2\EOT\219\ACK\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTI\STX\STX\EOT\DC2\EOT\219\ACK\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTI\STX\STX\ACK\DC2\EOT\219\ACK\v\DLE\n\
    \\r\n\
    \\ENQ\EOTI\STX\STX\SOH\DC2\EOT\219\ACK\DC1\NAK\n\
    \\r\n\
    \\ENQ\EOTI\STX\STX\ETX\DC2\EOT\219\ACK\CAN\EM\n\
    \\f\n\
    \\STX\EOTJ\DC2\ACK\222\ACK\NUL\224\ACK\SOH\n\
    \\v\n\
    \\ETX\EOTJ\SOH\DC2\EOT\222\ACK\b\DC1\n\
    \\f\n\
    \\STX\EOTK\DC2\ACK\226\ACK\NUL\231\ACK\SOH\n\
    \\v\n\
    \\ETX\EOTK\SOH\DC2\EOT\226\ACK\b\DLE\n\
    \\f\n\
    \\EOT\EOTK\STX\NUL\DC2\EOT\227\ACK\STX\ESC\n\
    \\r\n\
    \\ENQ\EOTK\STX\NUL\EOT\DC2\EOT\227\ACK\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTK\STX\NUL\ENQ\DC2\EOT\227\ACK\v\DLE\n\
    \\r\n\
    \\ENQ\EOTK\STX\NUL\SOH\DC2\EOT\227\ACK\DC1\SYN\n\
    \\r\n\
    \\ENQ\EOTK\STX\NUL\ETX\DC2\EOT\227\ACK\EM\SUB\n\
    \\f\n\
    \\EOT\EOTK\STX\SOH\DC2\EOT\228\ACK\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTK\STX\SOH\EOT\DC2\EOT\228\ACK\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTK\STX\SOH\ACK\DC2\EOT\228\ACK\v\DC1\n\
    \\r\n\
    \\ENQ\EOTK\STX\SOH\SOH\DC2\EOT\228\ACK\DC2\NAK\n\
    \\r\n\
    \\ENQ\EOTK\STX\SOH\ETX\DC2\EOT\228\ACK\CAN\EM\n\
    \\f\n\
    \\EOT\EOTK\STX\STX\DC2\EOT\229\ACK\STX\FS\n\
    \\r\n\
    \\ENQ\EOTK\STX\STX\EOT\DC2\EOT\229\ACK\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTK\STX\STX\ENQ\DC2\EOT\229\ACK\v\DLE\n\
    \\r\n\
    \\ENQ\EOTK\STX\STX\SOH\DC2\EOT\229\ACK\DC1\ETB\n\
    \\r\n\
    \\ENQ\EOTK\STX\STX\ETX\DC2\EOT\229\ACK\SUB\ESC\n\
    \\f\n\
    \\EOT\EOTK\STX\ETX\DC2\EOT\230\ACK\STX\RS\n\
    \\r\n\
    \\ENQ\EOTK\STX\ETX\EOT\DC2\EOT\230\ACK\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTK\STX\ETX\ENQ\DC2\EOT\230\ACK\v\DC1\n\
    \\r\n\
    \\ENQ\EOTK\STX\ETX\SOH\DC2\EOT\230\ACK\DC2\EM\n\
    \\r\n\
    \\ENQ\EOTK\STX\ETX\ETX\DC2\EOT\230\ACK\FS\GS\n\
    \\f\n\
    \\STX\EOTL\DC2\ACK\233\ACK\NUL\235\ACK\SOH\n\
    \\v\n\
    \\ETX\EOTL\SOH\DC2\EOT\233\ACK\b\DC1\n\
    \\f\n\
    \\STX\EOTM\DC2\ACK\237\ACK\NUL\240\ACK\SOH\n\
    \\v\n\
    \\ETX\EOTM\SOH\DC2\EOT\237\ACK\b\ETB\n\
    \\f\n\
    \\EOT\EOTM\STX\NUL\DC2\EOT\238\ACK\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTM\STX\NUL\EOT\DC2\EOT\238\ACK\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTM\STX\NUL\ENQ\DC2\EOT\238\ACK\v\DLE\n\
    \\r\n\
    \\ENQ\EOTM\STX\NUL\SOH\DC2\EOT\238\ACK\DC1\NAK\n\
    \\r\n\
    \\ENQ\EOTM\STX\NUL\ETX\DC2\EOT\238\ACK\CAN\EM\n\
    \\f\n\
    \\EOT\EOTM\STX\SOH\DC2\EOT\239\ACK\STX&\n\
    \\r\n\
    \\ENQ\EOTM\STX\SOH\EOT\DC2\EOT\239\ACK\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTM\STX\SOH\ACK\DC2\EOT\239\ACK\v\DC2\n\
    \\r\n\
    \\ENQ\EOTM\STX\SOH\SOH\DC2\EOT\239\ACK\DC3!\n\
    \\r\n\
    \\ENQ\EOTM\STX\SOH\ETX\DC2\EOT\239\ACK$%\n\
    \\f\n\
    \\STX\ENQ\NUL\DC2\ACK\242\ACK\NUL\249\ACK\SOH\n\
    \\v\n\
    \\ETX\ENQ\NUL\SOH\DC2\EOT\242\ACK\ENQ\DC1\n\
    \\f\n\
    \\EOT\ENQ\NUL\STX\NUL\DC2\EOT\243\ACK\STX\SO\n\
    \\r\n\
    \\ENQ\ENQ\NUL\STX\NUL\SOH\DC2\EOT\243\ACK\STX\t\n\
    \\r\n\
    \\ENQ\ENQ\NUL\STX\NUL\STX\DC2\EOT\243\ACK\f\r\n\
    \\f\n\
    \\EOT\ENQ\NUL\STX\SOH\DC2\EOT\244\ACK\STX\r\n\
    \\r\n\
    \\ENQ\ENQ\NUL\STX\SOH\SOH\DC2\EOT\244\ACK\STX\b\n\
    \\r\n\
    \\ENQ\ENQ\NUL\STX\SOH\STX\DC2\EOT\244\ACK\v\f\n\
    \\f\n\
    \\EOT\ENQ\NUL\STX\STX\DC2\EOT\245\ACK\STX\r\n\
    \\r\n\
    \\ENQ\ENQ\NUL\STX\STX\SOH\DC2\EOT\245\ACK\STX\b\n\
    \\r\n\
    \\ENQ\ENQ\NUL\STX\STX\STX\DC2\EOT\245\ACK\v\f\n\
    \\f\n\
    \\EOT\ENQ\NUL\STX\ETX\DC2\EOT\246\ACK\STX\DLE\n\
    \\r\n\
    \\ENQ\ENQ\NUL\STX\ETX\SOH\DC2\EOT\246\ACK\STX\v\n\
    \\r\n\
    \\ENQ\ENQ\NUL\STX\ETX\STX\DC2\EOT\246\ACK\SO\SI\n\
    \\f\n\
    \\EOT\ENQ\NUL\STX\EOT\DC2\EOT\247\ACK\STX\SO\n\
    \\r\n\
    \\ENQ\ENQ\NUL\STX\EOT\SOH\DC2\EOT\247\ACK\STX\t\n\
    \\r\n\
    \\ENQ\ENQ\NUL\STX\EOT\STX\DC2\EOT\247\ACK\f\r\n\
    \\f\n\
    \\EOT\ENQ\NUL\STX\ENQ\DC2\EOT\248\ACK\STX\v\n\
    \\r\n\
    \\ENQ\ENQ\NUL\STX\ENQ\SOH\DC2\EOT\248\ACK\STX\ACK\n\
    \\r\n\
    \\ENQ\ENQ\NUL\STX\ENQ\STX\DC2\EOT\248\ACK\t\n\
    \\n\
    \\f\n\
    \\STX\EOTN\DC2\ACK\251\ACK\NUL\254\ACK\SOH\n\
    \\v\n\
    \\ETX\EOTN\SOH\DC2\EOT\251\ACK\b\ESC\n\
    \\f\n\
    \\EOT\EOTN\STX\NUL\DC2\EOT\252\ACK\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTN\STX\NUL\EOT\DC2\EOT\252\ACK\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTN\STX\NUL\ENQ\DC2\EOT\252\ACK\v\DLE\n\
    \\r\n\
    \\ENQ\EOTN\STX\NUL\SOH\DC2\EOT\252\ACK\DC1\NAK\n\
    \\r\n\
    \\ENQ\EOTN\STX\NUL\ETX\DC2\EOT\252\ACK\CAN\EM\n\
    \\f\n\
    \\EOT\EOTN\STX\SOH\DC2\EOT\253\ACK\STX!\n\
    \\r\n\
    \\ENQ\EOTN\STX\SOH\EOT\DC2\EOT\253\ACK\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTN\STX\SOH\ACK\DC2\EOT\253\ACK\v\ETB\n\
    \\r\n\
    \\ENQ\EOTN\STX\SOH\SOH\DC2\EOT\253\ACK\CAN\FS\n\
    \\r\n\
    \\ENQ\EOTN\STX\SOH\ETX\DC2\EOT\253\ACK\US \n\
    \\f\n\
    \\STX\EOTO\DC2\ACK\128\a\NUL\130\a\SOH\n\
    \\v\n\
    \\ETX\EOTO\SOH\DC2\EOT\128\a\b\r\n\
    \\f\n\
    \\EOT\EOTO\STX\NUL\DC2\EOT\129\a\STX\FS\n\
    \\r\n\
    \\ENQ\EOTO\STX\NUL\EOT\DC2\EOT\129\a\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTO\STX\NUL\ACK\DC2\EOT\129\a\v\DC1\n\
    \\r\n\
    \\ENQ\EOTO\STX\NUL\SOH\DC2\EOT\129\a\DC2\ETB\n\
    \\r\n\
    \\ENQ\EOTO\STX\NUL\ETX\DC2\EOT\129\a\SUB\ESC\n\
    \\f\n\
    \\STX\EOTP\DC2\ACK\132\a\NUL\138\a\SOH\n\
    \\v\n\
    \\ETX\EOTP\SOH\DC2\EOT\132\a\b\SO\n\
    \\f\n\
    \\EOT\EOTP\STX\NUL\DC2\EOT\133\a\STX#\n\
    \\r\n\
    \\ENQ\EOTP\STX\NUL\EOT\DC2\EOT\133\a\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTP\STX\NUL\ENQ\DC2\EOT\133\a\v\DLE\n\
    \\r\n\
    \\ENQ\EOTP\STX\NUL\SOH\DC2\EOT\133\a\DC1\RS\n\
    \\r\n\
    \\ENQ\EOTP\STX\NUL\ETX\DC2\EOT\133\a!\"\n\
    \\f\n\
    \\EOT\EOTP\STX\SOH\DC2\EOT\134\a\STX#\n\
    \\r\n\
    \\ENQ\EOTP\STX\SOH\EOT\DC2\EOT\134\a\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTP\STX\SOH\ENQ\DC2\EOT\134\a\v\DC1\n\
    \\r\n\
    \\ENQ\EOTP\STX\SOH\SOH\DC2\EOT\134\a\DC2\RS\n\
    \\r\n\
    \\ENQ\EOTP\STX\SOH\ETX\DC2\EOT\134\a!\"\n\
    \\f\n\
    \\EOT\EOTP\STX\STX\DC2\EOT\135\a\STX&\n\
    \\r\n\
    \\ENQ\EOTP\STX\STX\EOT\DC2\EOT\135\a\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTP\STX\STX\ENQ\DC2\EOT\135\a\v\DC1\n\
    \\r\n\
    \\ENQ\EOTP\STX\STX\SOH\DC2\EOT\135\a\DC2!\n\
    \\r\n\
    \\ENQ\EOTP\STX\STX\ETX\DC2\EOT\135\a$%\n\
    \\f\n\
    \\EOT\EOTP\STX\ETX\DC2\EOT\136\a\STX\"\n\
    \\r\n\
    \\ENQ\EOTP\STX\ETX\EOT\DC2\EOT\136\a\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTP\STX\ETX\ENQ\DC2\EOT\136\a\v\SI\n\
    \\r\n\
    \\ENQ\EOTP\STX\ETX\SOH\DC2\EOT\136\a\DLE\GS\n\
    \\r\n\
    \\ENQ\EOTP\STX\ETX\ETX\DC2\EOT\136\a !\n\
    \\f\n\
    \\EOT\EOTP\STX\EOT\DC2\EOT\137\a\STX#\n\
    \\r\n\
    \\ENQ\EOTP\STX\EOT\EOT\DC2\EOT\137\a\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTP\STX\EOT\ENQ\DC2\EOT\137\a\v\DC1\n\
    \\r\n\
    \\ENQ\EOTP\STX\EOT\SOH\DC2\EOT\137\a\DC2\RS\n\
    \\r\n\
    \\ENQ\EOTP\STX\EOT\ETX\DC2\EOT\137\a!\"\n\
    \\f\n\
    \\STX\EOTQ\DC2\ACK\140\a\NUL\143\a\SOH\n\
    \\v\n\
    \\ETX\EOTQ\SOH\DC2\EOT\140\a\b\NAK\n\
    \\f\n\
    \\EOT\EOTQ\STX\NUL\DC2\EOT\141\a\STX\ESC\n\
    \\r\n\
    \\ENQ\EOTQ\STX\NUL\EOT\DC2\EOT\141\a\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTQ\STX\NUL\ENQ\DC2\EOT\141\a\v\DLE\n\
    \\r\n\
    \\ENQ\EOTQ\STX\NUL\SOH\DC2\EOT\141\a\DC1\SYN\n\
    \\r\n\
    \\ENQ\EOTQ\STX\NUL\ETX\DC2\EOT\141\a\EM\SUB\n\
    \\f\n\
    \\EOT\EOTQ\STX\SOH\DC2\EOT\142\a\STX\RS\n\
    \\r\n\
    \\ENQ\EOTQ\STX\SOH\EOT\DC2\EOT\142\a\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTQ\STX\SOH\ENQ\DC2\EOT\142\a\v\DC1\n\
    \\r\n\
    \\ENQ\EOTQ\STX\SOH\SOH\DC2\EOT\142\a\DC2\EM\n\
    \\r\n\
    \\ENQ\EOTQ\STX\SOH\ETX\DC2\EOT\142\a\FS\GS\n\
    \\f\n\
    \\STX\EOTR\DC2\ACK\145\a\NUL\148\a\SOH\n\
    \\v\n\
    \\ETX\EOTR\SOH\DC2\EOT\145\a\b\SYN\n\
    \\f\n\
    \\EOT\EOTR\STX\NUL\DC2\EOT\146\a\STX\SUB\n\
    \\r\n\
    \\ENQ\EOTR\STX\NUL\EOT\DC2\EOT\146\a\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTR\STX\NUL\ACK\DC2\EOT\146\a\v\DLE\n\
    \\r\n\
    \\ENQ\EOTR\STX\NUL\SOH\DC2\EOT\146\a\DC1\NAK\n\
    \\r\n\
    \\ENQ\EOTR\STX\NUL\ETX\DC2\EOT\146\a\CAN\EM\n\
    \\f\n\
    \\EOT\EOTR\STX\SOH\DC2\EOT\147\a\STX\EM\n\
    \\r\n\
    \\ENQ\EOTR\STX\SOH\EOT\DC2\EOT\147\a\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTR\STX\SOH\ENQ\DC2\EOT\147\a\v\SI\n\
    \\r\n\
    \\ENQ\EOTR\STX\SOH\SOH\DC2\EOT\147\a\DLE\DC4\n\
    \\r\n\
    \\ENQ\EOTR\STX\SOH\ETX\DC2\EOT\147\a\ETB\CAN\n\
    \@\n\
    \\STX\EOTS\DC2\ACK\151\a\NUL\157\a\SOH\SUB2 Request a segmented coverage plan for this query\n\
    \\n\
    \\v\n\
    \\ETX\EOTS\SOH\DC2\EOT\151\a\b\NAK\n\
    \L\n\
    \\EOT\EOTS\STX\NUL\DC2\EOT\153\a\STX%\SUB> left optional to support parameterized queries in the future\n\
    \\n\
    \\r\n\
    \\ENQ\EOTS\STX\NUL\EOT\DC2\EOT\153\a\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTS\STX\NUL\ACK\DC2\EOT\153\a\v\SUB\n\
    \\r\n\
    \\ENQ\EOTS\STX\NUL\SOH\DC2\EOT\153\a\ESC \n\
    \\r\n\
    \\ENQ\EOTS\STX\NUL\ETX\DC2\EOT\153\a#$\n\
    \\f\n\
    \\EOT\EOTS\STX\SOH\DC2\EOT\154\a\STX\ESC\n\
    \\r\n\
    \\ENQ\EOTS\STX\SOH\EOT\DC2\EOT\154\a\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTS\STX\SOH\ENQ\DC2\EOT\154\a\v\DLE\n\
    \\r\n\
    \\ENQ\EOTS\STX\SOH\SOH\DC2\EOT\154\a\DC1\SYN\n\
    \\r\n\
    \\ENQ\EOTS\STX\SOH\ETX\DC2\EOT\154\a\EM\SUB\n\
    \$\n\
    \\EOT\EOTS\STX\STX\DC2\EOT\155\a\STX#\"\SYN For failure recovery\n\
    \\n\
    \\r\n\
    \\ENQ\EOTS\STX\STX\EOT\DC2\EOT\155\a\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTS\STX\STX\ENQ\DC2\EOT\155\a\v\DLE\n\
    \\r\n\
    \\ENQ\EOTS\STX\STX\SOH\DC2\EOT\155\a\DC1\RS\n\
    \\r\n\
    \\ENQ\EOTS\STX\STX\ETX\DC2\EOT\155\a!\"\n\
    \g\n\
    \\EOT\EOTS\STX\ETX\DC2\EOT\156\a\STX'\"Y Other coverage contexts that have failed to assist Riak in deciding what nodes to avoid\n\
    \\n\
    \\r\n\
    \\ENQ\EOTS\STX\ETX\EOT\DC2\EOT\156\a\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOTS\STX\ETX\ENQ\DC2\EOT\156\a\v\DLE\n\
    \\r\n\
    \\ENQ\EOTS\STX\ETX\SOH\DC2\EOT\156\a\DC1\"\n\
    \\r\n\
    \\ENQ\EOTS\STX\ETX\ETX\DC2\EOT\156\a%&\n\
    \3\n\
    \\STX\EOTT\DC2\ACK\160\a\NUL\162\a\SOH\SUB% Segmented TS coverage plan response\n\
    \\n\
    \\v\n\
    \\ETX\EOTT\SOH\DC2\EOT\160\a\b\SYN\n\
    \\f\n\
    \\EOT\EOTT\STX\NUL\DC2\EOT\161\a\ETX(\n\
    \\r\n\
    \\ENQ\EOTT\STX\NUL\EOT\DC2\EOT\161\a\ETX\v\n\
    \\r\n\
    \\ENQ\EOTT\STX\NUL\ACK\DC2\EOT\161\a\f\ESC\n\
    \\r\n\
    \\ENQ\EOTT\STX\NUL\SOH\DC2\EOT\161\a\FS#\n\
    \\r\n\
    \\ENQ\EOTT\STX\NUL\ETX\DC2\EOT\161\a&'\n\
    \-\n\
    \\STX\EOTU\DC2\ACK\165\a\NUL\170\a\SOH\SUB\US Segment of a TS coverage plan\n\
    \\n\
    \\v\n\
    \\ETX\EOTU\SOH\DC2\EOT\165\a\b\ETB\n\
    \\f\n\
    \\EOT\EOTU\STX\NUL\DC2\EOT\166\a\EOT\SUB\n\
    \\r\n\
    \\ENQ\EOTU\STX\NUL\EOT\DC2\EOT\166\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOTU\STX\NUL\ENQ\DC2\EOT\166\a\r\DC2\n\
    \\r\n\
    \\ENQ\EOTU\STX\NUL\SOH\DC2\EOT\166\a\DC3\NAK\n\
    \\r\n\
    \\ENQ\EOTU\STX\NUL\ETX\DC2\EOT\166\a\CAN\EM\n\
    \\f\n\
    \\EOT\EOTU\STX\SOH\DC2\EOT\167\a\EOT\GS\n\
    \\r\n\
    \\ENQ\EOTU\STX\SOH\EOT\DC2\EOT\167\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOTU\STX\SOH\ENQ\DC2\EOT\167\a\r\DC3\n\
    \\r\n\
    \\ENQ\EOTU\STX\SOH\SOH\DC2\EOT\167\a\DC4\CAN\n\
    \\r\n\
    \\ENQ\EOTU\STX\SOH\ETX\DC2\EOT\167\a\ESC\FS\n\
    \=\n\
    \\EOT\EOTU\STX\STX\DC2\EOT\168\a\EOT%\"/ Opaque context to pass into follow-up request\n\
    \\n\
    \\r\n\
    \\ENQ\EOTU\STX\STX\EOT\DC2\EOT\168\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOTU\STX\STX\ENQ\DC2\EOT\168\a\r\DC2\n\
    \\r\n\
    \\ENQ\EOTU\STX\STX\SOH\DC2\EOT\168\a\DC3 \n\
    \\r\n\
    \\ENQ\EOTU\STX\STX\ETX\DC2\EOT\168\a#$\n\
    \B\n\
    \\EOT\EOTU\STX\ETX\DC2\EOT\169\a\EOT\US\"4 Might be other types of coverage queries/responses\n\
    \\n\
    \\r\n\
    \\ENQ\EOTU\STX\ETX\EOT\DC2\EOT\169\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOTU\STX\ETX\ACK\DC2\EOT\169\a\r\DC4\n\
    \\r\n\
    \\ENQ\EOTU\STX\ETX\SOH\DC2\EOT\169\a\NAK\SUB\n\
    \\r\n\
    \\ENQ\EOTU\STX\ETX\ETX\DC2\EOT\169\a\GS\RS\n\
    \J\n\
    \\STX\EOTV\DC2\ACK\173\a\NUL\180\a\SOH\SUB< Each prospective subquery has a range of valid time values\n\
    \\n\
    \\v\n\
    \\ETX\EOTV\SOH\DC2\EOT\173\a\b\SI\n\
    \\f\n\
    \\EOT\EOTV\STX\NUL\DC2\EOT\174\a\EOT\"\n\
    \\r\n\
    \\ENQ\EOTV\STX\NUL\EOT\DC2\EOT\174\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOTV\STX\NUL\ENQ\DC2\EOT\174\a\r\DC2\n\
    \\r\n\
    \\ENQ\EOTV\STX\NUL\SOH\DC2\EOT\174\a\DC3\GS\n\
    \\r\n\
    \\ENQ\EOTV\STX\NUL\ETX\DC2\EOT\174\a !\n\
    \\f\n\
    \\EOT\EOTV\STX\SOH\DC2\EOT\175\a\EOT$\n\
    \\r\n\
    \\ENQ\EOTV\STX\SOH\EOT\DC2\EOT\175\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOTV\STX\SOH\ENQ\DC2\EOT\175\a\r\DC3\n\
    \\r\n\
    \\ENQ\EOTV\STX\SOH\SOH\DC2\EOT\175\a\DC4\US\n\
    \\r\n\
    \\ENQ\EOTV\STX\SOH\ETX\DC2\EOT\175\a\"#\n\
    \\f\n\
    \\EOT\EOTV\STX\STX\DC2\EOT\176\a\EOT,\n\
    \\r\n\
    \\ENQ\EOTV\STX\STX\EOT\DC2\EOT\176\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOTV\STX\STX\ENQ\DC2\EOT\176\a\r\DC1\n\
    \\r\n\
    \\ENQ\EOTV\STX\STX\SOH\DC2\EOT\176\a\DC2'\n\
    \\r\n\
    \\ENQ\EOTV\STX\STX\ETX\DC2\EOT\176\a*+\n\
    \\f\n\
    \\EOT\EOTV\STX\ETX\DC2\EOT\177\a\EOT$\n\
    \\r\n\
    \\ENQ\EOTV\STX\ETX\EOT\DC2\EOT\177\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOTV\STX\ETX\ENQ\DC2\EOT\177\a\r\DC3\n\
    \\r\n\
    \\ENQ\EOTV\STX\ETX\SOH\DC2\EOT\177\a\DC4\US\n\
    \\r\n\
    \\ENQ\EOTV\STX\ETX\ETX\DC2\EOT\177\a\"#\n\
    \\f\n\
    \\EOT\EOTV\STX\EOT\DC2\EOT\178\a\EOT,\n\
    \\r\n\
    \\ENQ\EOTV\STX\EOT\EOT\DC2\EOT\178\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOTV\STX\EOT\ENQ\DC2\EOT\178\a\r\DC1\n\
    \\r\n\
    \\ENQ\EOTV\STX\EOT\SOH\DC2\EOT\178\a\DC2'\n\
    \\r\n\
    \\ENQ\EOTV\STX\EOT\ETX\DC2\EOT\178\a*+\n\
    \A\n\
    \\EOT\EOTV\STX\ENQ\DC2\EOT\179\a\EOT\FS\"3 Some human readable description of the time range\n\
    \\n\
    \\r\n\
    \\ENQ\EOTV\STX\ENQ\EOT\DC2\EOT\179\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOTV\STX\ENQ\ENQ\DC2\EOT\179\a\r\DC2\n\
    \\r\n\
    \\ENQ\EOTV\STX\ENQ\SOH\DC2\EOT\179\a\DC3\ETB\n\
    \\r\n\
    \\ENQ\EOTV\STX\ENQ\ETX\DC2\EOT\179\a\SUB\ESC\n\
    \\155\SOH\n\
    \\STX\EOTW\DC2\ACK\201\a\NUL\205\a\SOH2| java package specifiers\n\
    \ option java_package = \"com.basho.riak.protobuf\";\n\
    \ option java_outer_classname = \"RiakYokozunaPB\";\n\
    \2\SI Index queries\n\
    \\n\
    \\v\n\
    \\ETX\EOTW\SOH\DC2\EOT\201\a\b\CAN\n\
    \\SUB\n\
    \\EOT\EOTW\STX\NUL\DC2\EOT\202\a\EOT\US\"\f Index name\n\
    \\n\
    \\r\n\
    \\ENQ\EOTW\STX\NUL\EOT\DC2\EOT\202\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOTW\STX\NUL\ENQ\DC2\EOT\202\a\r\DC2\n\
    \\r\n\
    \\ENQ\EOTW\STX\NUL\SOH\DC2\EOT\202\a\DC3\ETB\n\
    \\r\n\
    \\ENQ\EOTW\STX\NUL\ETX\DC2\EOT\202\a\GS\RS\n\
    \\ESC\n\
    \\EOT\EOTW\STX\SOH\DC2\EOT\203\a\EOT\US\"\r Schema name\n\
    \\n\
    \\r\n\
    \\ENQ\EOTW\STX\SOH\EOT\DC2\EOT\203\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOTW\STX\SOH\ENQ\DC2\EOT\203\a\r\DC2\n\
    \\r\n\
    \\ENQ\EOTW\STX\SOH\SOH\DC2\EOT\203\a\DC3\EM\n\
    \\r\n\
    \\ENQ\EOTW\STX\SOH\ETX\DC2\EOT\203\a\GS\RS\n\
    \\ETB\n\
    \\EOT\EOTW\STX\STX\DC2\EOT\204\a\EOT\US\"\t N value\n\
    \\n\
    \\r\n\
    \\ENQ\EOTW\STX\STX\EOT\DC2\EOT\204\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOTW\STX\STX\ENQ\DC2\EOT\204\a\r\DC3\n\
    \\r\n\
    \\ENQ\EOTW\STX\STX\SOH\DC2\EOT\204\a\DC4\EM\n\
    \\r\n\
    \\ENQ\EOTW\STX\STX\ETX\DC2\EOT\204\a\GS\RS\n\
    \X\n\
    \\STX\EOTX\DC2\ACK\208\a\NUL\210\a\SOH\SUBJ GET request - If a name is given, return matching index, else return all\n\
    \\n\
    \\v\n\
    \\ETX\EOTX\SOH\DC2\EOT\208\a\b\RS\n\
    \\SUB\n\
    \\EOT\EOTX\STX\NUL\DC2\EOT\209\a\EOT\RS\"\f Index name\n\
    \\n\
    \\r\n\
    \\ENQ\EOTX\STX\NUL\EOT\DC2\EOT\209\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOTX\STX\NUL\ENQ\DC2\EOT\209\a\r\DC2\n\
    \\r\n\
    \\ENQ\EOTX\STX\NUL\SOH\DC2\EOT\209\a\DC3\ETB\n\
    \\r\n\
    \\ENQ\EOTX\STX\NUL\ETX\DC2\EOT\209\a\FS\GS\n\
    \\f\n\
    \\STX\EOTY\DC2\ACK\212\a\NUL\214\a\SOH\n\
    \\v\n\
    \\ETX\EOTY\SOH\DC2\EOT\212\a\b\US\n\
    \\f\n\
    \\EOT\EOTY\STX\NUL\DC2\EOT\213\a\EOT*\n\
    \\r\n\
    \\ENQ\EOTY\STX\NUL\EOT\DC2\EOT\213\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOTY\STX\NUL\ACK\DC2\EOT\213\a\r\GS\n\
    \\r\n\
    \\ENQ\EOTY\STX\NUL\SOH\DC2\EOT\213\a\RS#\n\
    \\r\n\
    \\ENQ\EOTY\STX\NUL\ETX\DC2\EOT\213\a()\n\
    \0\n\
    \\STX\EOTZ\DC2\ACK\217\a\NUL\220\a\SOH\SUB\" PUT request - Create a new index\n\
    \\n\
    \\v\n\
    \\ETX\EOTZ\SOH\DC2\EOT\217\a\b\RS\n\
    \\f\n\
    \\EOT\EOTZ\STX\NUL\DC2\EOT\218\a\EOT*\n\
    \\r\n\
    \\ENQ\EOTZ\STX\NUL\EOT\DC2\EOT\218\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOTZ\STX\NUL\ACK\DC2\EOT\218\a\r\GS\n\
    \\r\n\
    \\ENQ\EOTZ\STX\NUL\SOH\DC2\EOT\218\a\RS#\n\
    \\r\n\
    \\ENQ\EOTZ\STX\NUL\ETX\DC2\EOT\218\a()\n\
    \\GS\n\
    \\EOT\EOTZ\STX\SOH\DC2\EOT\219\a\EOT*\"\SI Timeout value\n\
    \\n\
    \\r\n\
    \\ENQ\EOTZ\STX\SOH\EOT\DC2\EOT\219\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOTZ\STX\SOH\ENQ\DC2\EOT\219\a\r\DC3\n\
    \\r\n\
    \\ENQ\EOTZ\STX\SOH\SOH\DC2\EOT\219\a\DC4\ESC\n\
    \\r\n\
    \\ENQ\EOTZ\STX\SOH\ETX\DC2\EOT\219\a()\n\
    \0\n\
    \\STX\EOT[\DC2\ACK\223\a\NUL\225\a\SOH\SUB\" DELETE request - Remove an index\n\
    \\n\
    \\v\n\
    \\ETX\EOT[\SOH\DC2\EOT\223\a\b!\n\
    \\SUB\n\
    \\EOT\EOT[\STX\NUL\DC2\EOT\224\a\EOT\RS\"\f Index name\n\
    \\n\
    \\r\n\
    \\ENQ\EOT[\STX\NUL\EOT\DC2\EOT\224\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT[\STX\NUL\ENQ\DC2\EOT\224\a\r\DC2\n\
    \\r\n\
    \\ENQ\EOT[\STX\NUL\SOH\DC2\EOT\224\a\DC3\ETB\n\
    \\r\n\
    \\ENQ\EOT[\STX\NUL\ETX\DC2\EOT\224\a\FS\GS\n\
    \\RS\n\
    \\STX\EOT\\\DC2\ACK\229\a\NUL\232\a\SOH2\DLE Schema queries\n\
    \\n\
    \\v\n\
    \\ETX\EOT\\\SOH\DC2\EOT\229\a\b\EM\n\
    \\SUB\n\
    \\EOT\EOT\\\STX\NUL\DC2\EOT\230\a\EOT \"\f Index name\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\\\STX\NUL\EOT\DC2\EOT\230\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\\\STX\NUL\ENQ\DC2\EOT\230\a\r\DC2\n\
    \\r\n\
    \\ENQ\EOT\\\STX\NUL\SOH\DC2\EOT\230\a\DC3\ETB\n\
    \\r\n\
    \\ENQ\EOT\\\STX\NUL\ETX\DC2\EOT\230\a\RS\US\n\
    \\ESC\n\
    \\EOT\EOT\\\STX\SOH\DC2\EOT\231\a\EOT \"\r Schema data\n\
    \\n\
    \\r\n\
    \\ENQ\EOT\\\STX\SOH\EOT\DC2\EOT\231\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT\\\STX\SOH\ENQ\DC2\EOT\231\a\r\DC2\n\
    \\r\n\
    \\ENQ\EOT\\\STX\SOH\SOH\DC2\EOT\231\a\DC3\SUB\n\
    \\r\n\
    \\ENQ\EOT\\\STX\SOH\ETX\DC2\EOT\231\a\RS\US\n\
    \G\n\
    \\STX\EOT]\DC2\ACK\235\a\NUL\237\a\SOH\SUB9 PUT request - create or potentially update a new schema\n\
    \\n\
    \\v\n\
    \\ETX\EOT]\SOH\DC2\EOT\235\a\b\US\n\
    \\f\n\
    \\EOT\EOT]\STX\NUL\DC2\EOT\236\a\EOT+\n\
    \\r\n\
    \\ENQ\EOT]\STX\NUL\EOT\DC2\EOT\236\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT]\STX\NUL\ACK\DC2\EOT\236\a\r\RS\n\
    \\r\n\
    \\ENQ\EOT]\STX\NUL\SOH\DC2\EOT\236\a\US%\n\
    \\r\n\
    \\ENQ\EOT]\STX\NUL\ETX\DC2\EOT\236\a)*\n\
    \<\n\
    \\STX\EOT^\DC2\ACK\240\a\NUL\242\a\SOH\SUB. GET request - Return matching schema by name\n\
    \\n\
    \\v\n\
    \\ETX\EOT^\SOH\DC2\EOT\240\a\b\US\n\
    \\ESC\n\
    \\EOT\EOT^\STX\NUL\DC2\EOT\241\a\EOT\RS\"\r Schema name\n\
    \\n\
    \\r\n\
    \\ENQ\EOT^\STX\NUL\EOT\DC2\EOT\241\a\EOT\f\n\
    \\r\n\
    \\ENQ\EOT^\STX\NUL\ENQ\DC2\EOT\241\a\r\DC2\n\
    \\r\n\
    \\ENQ\EOT^\STX\NUL\SOH\DC2\EOT\241\a\DC3\ETB\n\
    \\r\n\
    \\ENQ\EOT^\STX\NUL\ETX\DC2\EOT\241\a\FS\GS\n\
    \\f\n\
    \\STX\EOT_\DC2\ACK\244\a\NUL\246\a\SOH\n\
    \\v\n\
    \\ETX\EOT_\SOH\DC2\EOT\244\a\b \n\
    \\f\n\
    \\EOT\EOT_\STX\NUL\DC2\EOT\245\a\STX)\n\
    \\r\n\
    \\ENQ\EOT_\STX\NUL\EOT\DC2\EOT\245\a\STX\n\
    \\n\
    \\r\n\
    \\ENQ\EOT_\STX\NUL\ACK\DC2\EOT\245\a\v\FS\n\
    \\r\n\
    \\ENQ\EOT_\STX\NUL\SOH\DC2\EOT\245\a\GS#\n\
    \\r\n\
    \\ENQ\EOT_\STX\NUL\ETX\DC2\EOT\245\a'("